syntax = "proto3";

package v1;
import "common/common.proto";



// User message
message User {
  string id = 1;
  string email = 2;
  string first_name = 3;
  string last_name = 4;
  common.UserRole role = 5;
  bool is_active = 6;
  int32 level = 7;              // 1-9 for STUDENT/TUTOR/TEACHER
  string username = 8;          // unique username
  string avatar = 9;            // avatar URL
  common.UserStatus status = 10;
  bool email_verified = 11;
  string google_id = 12;        // for OAuth
}

// Authentication
message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  common.Response response = 1;
  string access_token = 2;
  User user = 3;
  string refresh_token = 4;  // JWT refresh token for token rotation
  string session_token = 5;  // Session token for stateful session management
}

message RegisterRequest {
  string email = 1;
  string password = 2;
  string first_name = 3;
  string last_name = 4;
}

message RegisterResponse {
  common.Response response = 1;
  User user = 2;
}

// OAuth Authentication
message GoogleLoginRequest {
  string id_token = 1;        // Google ID token from frontend
}

// Refresh Token
message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  common.Response response = 1;
  string access_token = 2;
  string refresh_token = 3;
  int32 expires_in = 4;       // seconds until expiry
}

// Email Verification
message VerifyEmailRequest {
  string token = 1;
}

message VerifyEmailResponse {
  common.Response response = 1;
  bool verified = 2;
}

// Send Verification Email
message SendVerificationEmailRequest {
  string user_id = 1;  // User ID to send verification email to
}

message SendVerificationEmailResponse {
  common.Response response = 1;
  string message = 2;  // Success/error message
}

// Password Reset
message ForgotPasswordRequest {
  string email = 1;
}

message ForgotPasswordResponse {
  common.Response response = 1;
  string message = 2;
}

message ResetPasswordRequest {
  string token = 1;
  string new_password = 2;
}

message ResetPasswordResponse {
  common.Response response = 1;
  bool success = 2;
}

// User management
message GetUserRequest {
  string id = 1;
}

message GetUserResponse {
  common.Response response = 1;
  User user = 2;
}

message ListUsersRequest {
  common.PaginationRequest pagination = 1;
}

message ListUsersResponse {
  common.Response response = 1;
  repeated User users = 2;
  common.PaginationResponse pagination = 3;
}

message GetStudentListRequest {
  common.PaginationRequest pagination = 1;
}

message GetStudentListResponse {
  repeated User users = 1;
  common.PaginationResponse pagination = 2;
}

// Current user operations
message GetCurrentUserRequest {
  // Empty - gets current authenticated user
}

// Update user operations
message UpdateUserRequest {
  string id = 1;              // User ID to update
  string first_name = 2;
  string last_name = 3;
  string username = 4;
  string avatar = 5;
  string bio = 6;
  string phone = 7;
  string address = 8;
  string school = 9;
  string date_of_birth = 10;
  string gender = 11;
}

message UpdateUserResponse {
  common.Response response = 1;
  User user = 2;
}

// User service
service UserService {
  rpc Login(LoginRequest) returns (LoginResponse);

  rpc GoogleLogin(GoogleLoginRequest) returns (LoginResponse);

  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);

  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse);

  rpc SendVerificationEmail(SendVerificationEmailRequest) returns (SendVerificationEmailResponse);

  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse);

  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);

  rpc Register(RegisterRequest) returns (RegisterResponse);

  rpc GetUser(GetUserRequest) returns (GetUserResponse);

  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);

  rpc GetStudentList(GetStudentListRequest) returns (GetStudentListResponse);

  rpc GetCurrentUser(GetCurrentUserRequest) returns (GetUserResponse);

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
}




