syntax = "proto3";
package v1;
import "common/common.proto";
import "google/protobuf/timestamp.proto";


// Answer message - for structured answers
message Answer {
  string id = 1;
  string content = 2;        // Changed from text to content to match frontend
  bool is_correct = 3;
  string explanation = 4;    // Added explanation field
}

// Question message - matches database schema
message Question {
  string id = 1;
  string raw_content = 2;              // LaTeX gốc từ user
  string content = 3;                  // Nội dung đã xử lý (cleaned)
  string subcount = 4;                 // [XX.N] format
  common.QuestionType type = 5;        // MC, TF, SA, ES, MA
  string source = 6;                   // Nguồn câu hỏi
  
  // Structured answers for MC/TF or JSON string for complex types
  oneof answer_data {
    AnswerList structured_answers = 7;  // For MC/TF questions
    string json_answers = 8;            // For complex answer formats (JSONB in DB)
  }
  
  oneof correct_answer_data {
    CorrectAnswer structured_correct = 9;  // For MC/TF/SA
    string json_correct_answer = 10;       // For complex formats (JSONB in DB)
  }
  
  string solution = 11;                // Lời giải chi tiết
  repeated string tag = 12;            // Tags cho câu hỏi
  
  // Metadata & Classification (optional, for filtering purposes only)
  string grade = 13;                   // Lớp (0,1,2) - Optional classification
  string subject = 14;                 // Môn học (P,L,H) - Optional classification  
  string chapter = 15;                 // Chương (1-9) - Optional classification
  string level = 16;                   // Mức độ (N,H,V,C,T,M) - Optional classification
  
  // Usage tracking
  int32 usage_count = 17;              // Số lần sử dụng
  string creator = 18;                 // Người tạo
  common.QuestionStatus status = 19;   // ACTIVE, PENDING, INACTIVE, ARCHIVED
  int32 feedback = 20;                 // Điểm feedback
  common.DifficultyLevel difficulty = 21; // EASY, MEDIUM, HARD, EXPERT
  string question_code_id = 22;        // FK to QuestionCode
  google.protobuf.Timestamp created_at = 23;
  google.protobuf.Timestamp updated_at = 24;
  bool is_favorite = 25;               // Đánh dấu câu hỏi yêu thích
}

// Wrapper for multiple answers
message AnswerList {
  repeated Answer answers = 1;
}

// Correct answer structure
message CorrectAnswer {
  oneof answer_type {
    SingleAnswer single = 1;    // For MC
    MultipleAnswers multiple = 2; // For TF
    TextAnswer text = 3;        // For SA
  }
}

message SingleAnswer {
  string answer_id = 1;
}

message MultipleAnswers {
  repeated string answer_ids = 1;
}

message TextAnswer {
  string text = 1;
}

// Question management
message CreateQuestionRequest {
  string raw_content = 1;      // LaTeX gốc từ user
  string content = 2;           // Nội dung đã xử lý
  string subcount = 3;          // [XX.N] format
  common.QuestionType type = 4; // MC, TF, SA, ES, MA
  string source = 5;            // Nguồn câu hỏi
  
  // Flexible answer format
  oneof answer_data {
    AnswerList structured_answers = 6;  // For MC/TF questions
    string json_answers = 7;            // For complex answer formats
  }
  
  oneof correct_answer_data {
    CorrectAnswer structured_correct = 8;  // For MC/TF/SA
    string json_correct_answer = 9;        // For complex formats
  }
  
  string solution = 10;           // Lời giải chi tiết
  repeated string tag = 11;       // Tags cho câu hỏi
  
  // Optional classification fields
  string grade = 12;              // Lớp (0,1,2) - Optional
  string subject = 13;            // Môn học (P,L,H) - Optional
  string chapter = 14;            // Chương (1-9) - Optional
  string level = 15;              // Mức độ (N,H,V,C,T,M) - Optional
  
  string question_code_id = 16;   // QuestionCode ID
  common.QuestionStatus status = 17;    // ACTIVE, PENDING, INACTIVE, ARCHIVED
  common.DifficultyLevel difficulty = 18; // EASY, MEDIUM, HARD, EXPERT
  string creator = 19;            // Creator username
}

message CreateQuestionResponse {
  common.Response response = 1;
  Question question = 2;
}

message GetQuestionRequest {
  string id = 1;
}

message GetQuestionResponse {
  common.Response response = 1;
  Question question = 2;
}

message ListQuestionsRequest {
  common.PaginationRequest pagination = 1;
}

message ListQuestionsResponse {
  common.Response response = 1;
  repeated Question questions = 2;
  common.PaginationResponse pagination = 3;
}

// Update question
message UpdateQuestionRequest {
  string id = 1;
  string raw_content = 2;
  string content = 3;
  string subcount = 4;
  common.QuestionType type = 5;
  string source = 6;
  
  oneof answer_data {
    AnswerList structured_answers = 7;
    string json_answers = 8;
  }
  
  oneof correct_answer_data {
    CorrectAnswer structured_correct = 9;
    string json_correct_answer = 10;
  }
  
  string solution = 11;
  repeated string tag = 12;
  
  // Optional classification fields
  string grade = 13;              // Lớp (0,1,2) - Optional
  string subject = 14;            // Môn học (P,L,H) - Optional
  string chapter = 15;            // Chương (1-9) - Optional
  string level = 16;              // Mức độ (N,H,V,C,T,M) - Optional
  
  string question_code_id = 17;
  common.QuestionStatus status = 18;
  common.DifficultyLevel difficulty = 19;
}

message UpdateQuestionResponse {
  common.Response response = 1;
  Question question = 2;
}

// Delete question
message DeleteQuestionRequest {
  string id = 1;
}

message DeleteQuestionResponse {
  common.Response response = 1;
}

// Import questions
message ImportQuestionsRequest {
  string csv_data_base64 = 1;
  bool upsert_mode = 2;
}

// QuestionCode message for LaTeX parsing
message QuestionCode {
  string id = 1;          // Full code like "4L5301N"
  string prefix = 2;      // First part like "4L5"
  string main_code = 3;   // Middle part like "301"
  string extend_code = 4; // Additional code if any
  string num_part = 5;    // Number part like "N"
  string description = 6; // Human-readable description
}

// Parse LaTeX question
message ParseLatexQuestionRequest {
  string latex_content = 1;  // LaTeX content (can be base64 or raw)
  bool is_base64 = 2;       // Whether content is base64 encoded
}

message ParseLatexQuestionResponse {
  common.Response response = 1;
  repeated Question questions = 2;  // Parsed questions (without ID, for preview)
  repeated QuestionCode question_codes = 3; // Extracted question codes
  repeated string warnings = 4;  // Parsing warnings if any
}

// Create question from LaTeX
message CreateQuestionFromLatexRequest {
  string latex_content = 1;  // LaTeX content (can be base64 or raw)
  bool is_base64 = 2;        // Whether content is base64 encoded
  bool auto_create_codes = 3; // Auto-create QuestionCode if not exists
}

message CreateQuestionFromLatexResponse {
  common.Response response = 1;
  repeated Question created_questions = 2;  // Created questions with IDs
  repeated QuestionCode created_codes = 3;  // QuestionCodes that were auto-created
  int32 created_count = 4;    // Number of questions created
  int32 failed_count = 5;     // Number of questions that failed
  repeated string warnings = 6; // Warnings if any
}

// Import LaTeX file
message ImportLatexRequest {
  string latex_content = 1;  // LaTeX content (can be base64 or raw)
  bool is_base64 = 2;        // Whether content is base64 encoded
  bool upsert_mode = 3;       // Update existing questions
  bool auto_create_codes = 4; // Auto-create missing QuestionCodes
}

message ImportLatexResponse {
  common.Response response = 1;
  int32 total_processed = 2;
  int32 created_count = 3;
  int32 updated_count = 4;
  int32 skipped_count = 5;  // MA questions or errors
  repeated ImportError errors = 6;
  repeated string question_codes_created = 7;  // New QuestionCodes created
  string summary = 8;
}

message ImportError {
  int32 row_number = 1;
  string field_name = 2;
  string error_message = 3;
  string row_data = 4;
}

message ImportQuestionsResponse {
  common.Response response = 1;
  int32 total_processed = 2;
  int32 created_count = 3;
  int32 updated_count = 4;
  int32 error_count = 5;
  repeated ImportError errors = 6;
  string summary = 7;
}

// ============================================================================
// VERSION CONTROL MESSAGES
// ============================================================================

message VersionHistoryItem {
  string version_id = 1;
  int32 version_number = 2;
  string changed_by_user_id = 3;
  string changed_by_user_name = 4;
  string change_reason = 5;
  google.protobuf.Timestamp changed_at = 6;
  string summary_of_changes = 7;
}

message GetVersionHistoryRequest {
  string question_id = 1;
  common.PaginationRequest pagination = 2;
}

message GetVersionHistoryResponse {
  repeated VersionHistoryItem versions = 1;
  common.PaginationResponse pagination = 2;
  common.Response response = 3;
}

message GetVersionRequest {
  string question_id = 1;
  int32 version_number = 2;
}

message GetVersionResponse {
  Question question_version = 1;
  common.Response response = 2;
}

message VersionDiff {
  string field_name = 1;
  string old_value = 2;
  string new_value = 3;
  string change_type = 4; // ADDED, MODIFIED, DELETED
}

message CompareVersionsRequest {
  string question_id = 1;
  int32 version_number_1 = 2;
  int32 version_number_2 = 3;
}

message CompareVersionsResponse {
  repeated VersionDiff diffs = 1;
  common.Response response = 2;
}

message RevertToVersionRequest {
  string question_id = 1;
  int32 version_number = 2;
  string revert_reason = 3;
  string user_id = 4;
}

message RevertToVersionResponse {
  bool success = 1;
  string message = 2;
  common.Response response = 3;
}

// ============================================================================
// BULK OPERATIONS MESSAGES
// ============================================================================

message BulkUpdateQuestionsRequest {
  repeated string question_ids = 1;
  string status = 2;         // "NO_CHANGE" or actual status value
  string difficulty = 3;      // "NO_CHANGE" or actual difficulty value
}

message BulkUpdateQuestionsResponse {
  int32 success_count = 1;
  int32 failed_count = 2;
  repeated string failed_ids = 3;
  common.Response response = 4;
}

message BulkDeleteQuestionsRequest {
  repeated string question_ids = 1;
}

message BulkDeleteQuestionsResponse {
  int32 success_count = 1;
  int32 failed_count = 2;
  repeated string failed_ids = 3;
  common.Response response = 4;
}

// ============================================================================
// FAVORITE OPERATIONS MESSAGES
// ============================================================================

message ToggleFavoriteRequest {
  string question_id = 1;
  bool is_favorite = 2;  // true to mark as favorite, false to unmark
}

message ToggleFavoriteResponse {
  bool success = 1;
  bool is_favorite = 2;  // Current favorite status
  common.Response response = 3;
}

message ListFavoriteQuestionsRequest {
  common.PaginationRequest pagination = 1;
}

message ListFavoriteQuestionsResponse {
  common.Response response = 1;
  repeated Question questions = 2;
  common.PaginationResponse pagination = 3;
}

// ============================================================================
// Question service
// ============================================================================
service QuestionService {
  rpc CreateQuestion(CreateQuestionRequest) returns (CreateQuestionResponse);

  rpc GetQuestion(GetQuestionRequest) returns (GetQuestionResponse);
  
  rpc UpdateQuestion(UpdateQuestionRequest) returns (UpdateQuestionResponse);
  
  rpc DeleteQuestion(DeleteQuestionRequest) returns (DeleteQuestionResponse);

  rpc ListQuestions(ListQuestionsRequest) returns (ListQuestionsResponse);

  rpc ImportQuestions(ImportQuestionsRequest) returns (ImportQuestionsResponse);
  
  // LaTeX parsing operations
  rpc ParseLatexQuestion(ParseLatexQuestionRequest) returns (ParseLatexQuestionResponse);
  
  rpc CreateQuestionFromLatex(CreateQuestionFromLatexRequest) returns (CreateQuestionFromLatexResponse);
  
  rpc ImportLatex(ImportLatexRequest) returns (ImportLatexResponse);
  
  // ============================================================================
  // VERSION CONTROL OPERATIONS
  // ============================================================================
  rpc GetVersionHistory(GetVersionHistoryRequest) returns (GetVersionHistoryResponse);
  
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse);
  
  rpc CompareVersions(CompareVersionsRequest) returns (CompareVersionsResponse);
  
  rpc RevertToVersion(RevertToVersionRequest) returns (RevertToVersionResponse);
  
  // ============================================================================
  // BULK OPERATIONS
  // ============================================================================
  rpc BulkUpdateQuestions(BulkUpdateQuestionsRequest) returns (BulkUpdateQuestionsResponse);
  
  rpc BulkDeleteQuestions(BulkDeleteQuestionsRequest) returns (BulkDeleteQuestionsResponse);
  
  // ============================================================================
  // FAVORITE OPERATIONS
  // ============================================================================
  rpc ToggleFavorite(ToggleFavoriteRequest) returns (ToggleFavoriteResponse);
  
  rpc ListFavoriteQuestions(ListFavoriteQuestionsRequest) returns (ListFavoriteQuestionsResponse);
}




