syntax = "proto3";

package v1;
import "google/api/annotations.proto";
import "common/common.proto";
import "v1/user.proto";
import "v1/profile.proto";
import "v1/notification.proto";
import "google/protobuf/timestamp.proto";


// Admin user management
message ListUsersFilter {
  common.UserRole role = 1;
  common.UserStatus status = 2;
  int32 level = 3;
  bool email_verified = 4;
  string search_query = 5;  // Search in email, username, name
}

message AdminListUsersRequest {
  common.PaginationRequest pagination = 1;
  ListUsersFilter filter = 2;
}

message AdminListUsersResponse {
  common.Response response = 1;
  repeated User users = 2;
  common.PaginationResponse pagination = 3;
}

message UpdateUserRoleRequest {
  string user_id = 1;
  common.UserRole new_role = 2;
  int32 level = 3;  // Required for STUDENT, TUTOR, TEACHER
}

message UpdateUserRoleResponse {
  common.Response response = 1;
  User updated_user = 2;
}

message UpdateUserLevelRequest {
  string user_id = 1;
  int32 new_level = 2;  // 1-9
}

message UpdateUserLevelResponse {
  common.Response response = 1;
  User updated_user = 2;
}

message UpdateUserStatusRequest {
  string user_id = 1;
  common.UserStatus new_status = 2;
  string reason = 3;  // Reason for status change
}

message UpdateUserStatusResponse {
  common.Response response = 1;
  User updated_user = 2;
}

// Audit logs
message AuditLog {
  string id = 1;
  string user_id = 2;
  string user_email = 3;
  string action = 4;
  string resource = 5;
  string resource_id = 6;
  string old_values = 7;  // JSON string
  string new_values = 8;  // JSON string
  string ip_address = 9;
  string user_agent = 10;
  bool success = 11;
  string error_message = 12;
  google.protobuf.Timestamp created_at = 13;
}

message GetAuditLogsRequest {
  common.PaginationRequest pagination = 1;
  string user_id = 2;
  string action = 3;
  string resource = 4;
  google.protobuf.Timestamp start_date = 5;  // ISO 8601, UTC
  google.protobuf.Timestamp end_date = 6;    // ISO 8601, UTC
}

message GetAuditLogsResponse {
  common.Response response = 1;
  repeated AuditLog logs = 2;
  common.PaginationResponse pagination = 3;
}

// Resource access monitoring
message ResourceAccess {
  string id = 1;
  string user_id = 2;
  string user_email = 3;
  string resource_type = 4;
  string resource_id = 5;
  string action = 6;
  string ip_address = 7;
  bool is_valid_access = 8;
  int32 risk_score = 9;
  google.protobuf.Timestamp created_at = 10;
}

message GetResourceAccessRequest {
  common.PaginationRequest pagination = 1;
  string user_id = 2;
  string resource_type = 3;
  string resource_id = 4;
  int32 min_risk_score = 5;
  google.protobuf.Timestamp start_date = 6;  // ISO 8601, UTC
  google.protobuf.Timestamp end_date = 7;    // ISO 8601, UTC
}

message GetResourceAccessResponse {
  common.Response response = 1;
  repeated ResourceAccess accesses = 2;
  common.PaginationResponse pagination = 3;
}

// Security alerts
message SecurityAlert {
  string user_id = 1;
  string alert_type = 2;  // CONCURRENT_SESSIONS, HIGH_RISK_ACCESS, etc.
  string message = 3;
  string details = 4;  // JSON string with additional data
}

message GetSecurityAlertsRequest {
  common.PaginationRequest pagination = 1;
  string user_id = 2;
  string alert_type = 3;
  bool unresolved_only = 4;
}

message GetSecurityAlertsResponse {
  common.Response response = 1;
  repeated SecurityAlert alerts = 2;
  common.PaginationResponse pagination = 3;
}

// Statistics
message SystemStats {
  int32 total_users = 1;
  int32 active_users = 2;
  int32 total_sessions = 3;
  int32 active_sessions = 4;
  map<string, int32> users_by_role = 5;
  map<string, int32> users_by_status = 6;
  int32 suspicious_activities = 7;
}

message GetSystemStatsRequest {
  // Empty - returns current stats
}

message GetSystemStatsResponse {
  common.Response response = 1;
  SystemStats stats = 2;
}

// Metrics History - Time series data for sparklines/charts
message MetricsDataPoint {
  google.protobuf.Timestamp timestamp = 1;
  int32 total_users = 2;
  int32 active_users = 3;
  int32 total_sessions = 4;
  int32 active_sessions = 5;
  int32 suspicious_activities = 6;
}

message GetMetricsHistoryRequest {
  // Time range for metrics
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  
  // Optional: interval between data points (in seconds)
  // Default: auto-calculate based on time range
  // For sparklines: typically 5-15 minutes
  int32 interval_seconds = 3;
  
  // Optional: limit number of data points
  // Default: 20 (suitable for sparklines)
  int32 limit = 4;
}

message GetMetricsHistoryResponse {
  common.Response response = 1;
  repeated MetricsDataPoint data_points = 2;
  int32 total_points = 3;
}

// Session management
message GetAllUserSessionsRequest {
  common.PaginationRequest pagination = 1;
  string user_id = 2;           // Optional: filter by specific user
  bool active_only = 3;         // Filter only active sessions
  string search_query = 4;      // Search by email, IP, location
}

message GetAllUserSessionsResponse {
  common.Response response = 1;
  repeated UserSession sessions = 2;
  common.PaginationResponse pagination = 3;
  int32 total_active_sessions = 4;
  int32 unique_active_users = 5;
}

// Notification management (Admin view)
message NotificationFilter {
  string type = 1;              // Filter by notification type
  bool unread_only = 2;         // Show only unread notifications
  string user_id = 3;           // Filter by specific user
}

message GetAllNotificationsRequest {
  common.PaginationRequest pagination = 1;
  NotificationFilter filter = 2;
  string search_query = 3;      // Search in title, message, user email
}

message NotificationWithUser {
  Notification notification = 1;
  string user_email = 2;
  string user_name = 3;
}

message GetAllNotificationsResponse {
  common.Response response = 1;
  repeated NotificationWithUser notifications = 2;
  common.PaginationResponse pagination = 3;
  int32 total_unread = 4;
}

message GetNotificationStatsRequest {
  // Empty - returns current stats
}

message NotificationStats {
  int32 total_sent_today = 1;
  int32 total_unread = 2;
  map<string, int32> notifications_by_type = 3;
  double read_rate = 4;
  string most_active_type = 5;
  double average_read_time = 6;
  int32 sent_this_week = 7;
  double growth_percentage = 8;
}

message GetNotificationStatsResponse {
  common.Response response = 1;
  NotificationStats stats = 2;
}

// Admin service
service AdminService {
  // User management
  rpc ListUsers(AdminListUsersRequest) returns (AdminListUsersResponse) {
    option (google.api.http) = {
      get: "/api/v1/admin/users"
    };
  }

  rpc UpdateUserRole(UpdateUserRoleRequest) returns (UpdateUserRoleResponse) {
    option (google.api.http) = {
      put: "/api/v1/admin/users/{user_id}/role"
      body: "*"
    };
  }

  rpc UpdateUserLevel(UpdateUserLevelRequest) returns (UpdateUserLevelResponse) {
    option (google.api.http) = {
      put: "/api/v1/admin/users/{user_id}/level"
      body: "*"
    };
  }

  rpc UpdateUserStatus(UpdateUserStatusRequest) returns (UpdateUserStatusResponse) {
    option (google.api.http) = {
      put: "/api/v1/admin/users/{user_id}/status"
      body: "*"
    };
  }

  // Audit & Monitoring
  rpc GetAuditLogs(GetAuditLogsRequest) returns (GetAuditLogsResponse) {
    option (google.api.http) = {
      get: "/api/v1/admin/audit-logs"
    };
  }

  rpc GetResourceAccess(GetResourceAccessRequest) returns (GetResourceAccessResponse) {
    option (google.api.http) = {
      get: "/api/v1/admin/resource-access"
    };
  }

  rpc GetSecurityAlerts(GetSecurityAlertsRequest) returns (GetSecurityAlertsResponse) {
    option (google.api.http) = {
      get: "/api/v1/admin/security-alerts"
    };
  }

  rpc GetSystemStats(GetSystemStatsRequest) returns (GetSystemStatsResponse) {
    option (google.api.http) = {
      get: "/api/v1/admin/stats"
    };
  }

  rpc GetMetricsHistory(GetMetricsHistoryRequest) returns (GetMetricsHistoryResponse) {
    option (google.api.http) = {
      get: "/api/v1/admin/metrics/history"
    };
  }

  // Session management
  rpc GetAllUserSessions(GetAllUserSessionsRequest) returns (GetAllUserSessionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/admin/sessions"
    };
  }

  // Notification management
  rpc GetAllNotifications(GetAllNotificationsRequest) returns (GetAllNotificationsResponse) {
    option (google.api.http) = {
      get: "/api/v1/admin/notifications"
    };
  }

  rpc GetNotificationStats(GetNotificationStatsRequest) returns (GetNotificationStatsResponse) {
    option (google.api.http) = {
      get: "/api/v1/admin/notifications/stats"
    };
  }
}




