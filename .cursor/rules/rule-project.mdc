---
alwaysApply: true
---

# Project-Specific Rules - Exam Bank System

## Critical Rules
- **NEVER create docs** (.md files) unless explicitly requested
- **NEVER create tests** unless explicitly requested
- **DO NOT** fix errors by deleting functions or commenting out code
- **ALWAYS** fix things at the cause, not the symptom
- **ALWAYS** check codebase before making changes
- Verify file location before creating/editing
- Use TODO tool for task management (not markdown docs)
- Summarize work clearly for non-technical users at task end
# Priority Rules (override default if there is a duplicate) (TOML formatted)

[language_requirements]
reiterate_in_english = "When a user asks in a language other than English, reiterate the request in English before proceeding"
working_language = "ALWAYS think, answer, and perform in English", answer in Vietnamese

[code_quality.core_principles]
no_unused_code = "Don't write unused code - ensure everything written is utilized in the project"
readability_first = "PRIORITIZE readability for human understanding over execution efficiency"
maintainability = "Maintain long-term maintainability over short-term optimization"
avoid_complexity = "Avoid unnecessary complexity - implement simple solutions unless complexity is truly required"
linus_principles = "Follow Linus Torvalds' clean code principles: keep it simple, make code readable like prose, avoid premature optimization, express intent clearly, minimize abstraction layers"

[code_quality.documentation_standards]
comment_purpose = "Comments MUST explain 'what' (business logic/purpose) and 'why' (reasoning/decisions), NOT 'how'"
avoid_over_commenting = "Avoid over-commenting - excessive comments indicate poor code quality"
function_comments = "Function comments must explain purpose and reasoning, placed at function beginnings"
self_explanatory = "Well-written code should be self-explanatory through meaningful names and clear structure"

[code_quality.development_process]
step_1 = "Understand first: Use available tools to understand data structures before implementation"
step_2 = "Design data structures: Good data structures lead to good code"
step_3 = "Define interfaces: Specify all input/output structures before writing logic"
step_4 = "Define functions: Create all function signatures before implementation"
step_5 = "Implement logic: Write implementation only after structures and definitions are complete"

[code_quality.quality_guidelines]
avoid_over_engineering = "Avoid over-engineering - focus on minimal viable solutions"
tests_when_required = "ONLY create tests when explicitly requested by user"
no_just_in_case = "NEVER add functionality 'just in case' - implement only what's needed"
no_unsolicited_files = "NEVER create files not explicitly requested - NO docs, guides, summaries"
no_unsolicited_tests = "NEVER create tests unless user explicitly requests them"
ask_before_creating = "If you think a file would be helpful, ASK the user first"

[decision_making_framework]
step_1 = "Gather Complete Information"
step_2 = "Multi-Perspective Analysis"
step_3 = "Consider All Stakeholders"
step_4 = "Evaluate Alternatives"
step_5 = "Assess Impact & Consequences"
step_6 = "Apply Ethical Framework"
step_7 = "Take Responsibility"
step_8 = "Learn & Adapt"

[development_workflow]
go_backend = "Backend: Go fmt → go vet → go build to verify code quality"
typescript_frontend = "Frontend: pnpm lint → pnpm type-check after writing TypeScript"
flutter_mobile = "Mobile: flutter analyze → flutter format to check Dart code"
verify_before_commit = "Always verify code compiles and has no linter errors before completing task"