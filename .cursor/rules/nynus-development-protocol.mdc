---
alwaysApply: true
---
# NyNus Development Protocol - Simplified
## RIPER-5 + Monorepo Architecture + NyNus Tech Stack

## 📋 Table of Contents
- [NyNus Project Overview](#nynus-project-overview)
- [RIPER-5 Methodology](#riper-5-methodology)
- [Implementation Guidelines](#implementation-guidelines)
- [Quick Reference](#quick-reference)

## NyNus Project Overview

### **Monorepo Architecture**
```
exam-bank-system/
├── apps/
│   ├── backend/      # Go gRPC backend
│   ├── frontend/     # Next.js 14 frontend
│   └── mobile/       # Flutter mobile app
├── packages/
│   └── proto/        # gRPC proto definitions
├── docs/
│   └── work-tracking/ # Task management (optional)
└── docker/           # Docker configurations
```

### **Tech Stack**
- **Backend**: Go 1.23, gRPC, PostgreSQL 15, JWT Authentication, Redis
- **Frontend**: Next.js 14 (App Router), React 18, TypeScript 5.5, Tailwind CSS, Shadcn UI
- **Mobile**: Flutter, Dart, gRPC client
- **Infrastructure**: Docker, PNPM workspaces, Monorepo
- **Testing**: Go testing (backend), Jest (frontend unit), Playwright (E2E)

### **Core Principles**
1. **Always verify location**: `pwd` must be workspace root
2. **Respect monorepo structure**: Only work within apps/, packages/, docs/
3. **Consistent language**: English for code, Vietnamese for UI text
4. **gRPC protocol**: All communication between frontend/mobile and backend
5. **Type safety**: Go types, TypeScript strict mode, Dart strong typing
6. **Testing**: Only create tests when explicitly requested

## RIPER-5 Methodology

### **Mode 1: RESEARCH**
**Purpose**: Gather information and understand NyNus codebase

**Allowed**:
- Read files using codebase-retrieval tool
- Ask clarifying questions about requirements
- Analyze system architecture within monorepo

**Forbidden**:
- Give recommendations or suggestions
- Implement any changes
- Planning specific solutions

**Output**: `[MODE: RESEARCH]` + observations about NyNus codebase

### **Mode 2: INNOVATE**
**Purpose**: Brainstorm approaches suitable for NyNus architecture

**Allowed**:
- Discuss multiple solution ideas
- Evaluate pros/cons within monorepo constraints
- Explore architectural alternatives

**Forbidden**:
- Specific planning or implementation details
- Code writing or modification
- Commit to specific solution without user input

**Output**: `[MODE: INNOVATE]` + possibilities and considerations

### **Mode 3: PLAN**
**Purpose**: Create detailed technical specifications for NyNus

**Allowed**:
- Detailed plans with exact file paths in monorepo
- Precise function names and signatures
- Complete architectural overview
- Database schema changes with Prisma ORM

**Forbidden**:
- Any implementation or code writing
- Skipping or simplifying specifications

**Required**: Convert plan to numbered checklist

**Output**: `[MODE: PLAN]` + specifications and implementation checklist

### **Mode 4: EXECUTE**
**Purpose**: Implement plan from Mode 3 in NyNus monorepo

**Allowed**:
- Implement only what is detailed in approved plan
- Follow numbered checklist strictly
- Minor deviation corrections (must report first)

**Forbidden**:
- Any unreported deviation
- Improvements or feature additions not in plan
- Major logical or structural changes

**Output**: `[MODE: EXECUTE]` + implementation code + progress update

### **Mode 5: REVIEW**
**Purpose**: Validate implementation against final plan

**Allowed**:
- Line-by-line comparison between plan and implementation
- Technical validation of implemented code
- Check for errors, bugs, unexpected behavior

**Required**:
- Flag any deviations between implementation and plan
- Verify all checklist items completed correctly
- Check security implications and maintainability

**Output**: `[MODE: REVIEW]` + systematic comparison and clear judgment

## Implementation Guidelines

### **Code Quality Standards**
```typescript
// ✅ GOOD - Vietnamese comments for business logic
interface QuestionCardProps {
  // Loại câu hỏi trong NyNus
  questionType: 'multiple-choice' | 'essay' | 'coding';
  question: Question;
  onAnswer: (answer: string) => void;
}

// ✅ GOOD - English comments for technical details
export function QuestionCard({ questionType, question, onAnswer }: QuestionCardProps) {
  // Handle question rendering based on type
  const renderQuestionContent = () => {
    switch (questionType) {
      case 'multiple-choice':
        return <MultipleChoiceQuestion question={question} />;
      // ... other cases
    }
  };
}
```

### **File Structure Guidelines**
- **Backend**: `apps/backend/internal/` for Go packages (handlers, services, repositories)
- **Frontend**: `apps/frontend/src/` for Next.js pages and components
- **Mobile**: `apps/mobile/lib/` for Flutter/Dart code
- **Proto**: `packages/proto/` for gRPC protocol definitions
- **Database**: PostgreSQL via Go database/sql or pgx

### **Testing Policy**
- **Only create automated tests when explicitly requested by user**
- When requested: Go testing (backend), Jest (frontend), Flutter test (mobile)
- E2E tests with Playwright only when needed
- **Manual testing**: Use MCP Chrome DevTools after significant features (see testing-workflow.mdc)
- Performance: API <200ms, Frontend <1s load time

### **Performance Targets**
- **API Response**: <200ms simple, <500ms complex queries
- **Frontend**: <1s page load, <2s complex dashboards
- **Database**: <100ms simple queries, <300ms analytics
- **Concurrent Users**: 100+ simultaneous learners

### **Security Standards**
- JWT authentication with refresh token flow
- Input validation with class-validator
- XSS prevention, HTTPS, CSP headers
- Rate limiting: 5 attempts/15min login, 3 attempts/hour password reset

## Quick Reference

### **Pre-Work Checklist**
```bash
# Verify location
pwd  # Must be: exam-bank-system workspace root

# Check structure
ls apps/     # Should show: backend, frontend, mobile
ls packages/ # Should show: proto
ls docs/     # Should show: arch, grpc, etc.

# Verify environment
go version   # Go 1.23+
node --version  # Node 18+
pnpm --version  # PNPM 8+
flutter --version  # Flutter 3+
```

### **Emergency Protocols**
- **Wrong directory**: Stop immediately, navigate to correct location
- **Breaking changes**: Revert and return to PLAN mode
- **Auth system affected**: Halt work, seek explicit approval
- **Database integrity risk**: Stop operations, verify schema and migrations
- **gRPC proto changes**: Regenerate Go/TS/Dart code after proto updates

### **BOO Integration**
```
BOO, tạo task mới →
RESEARCH (understand context) →
INNOVATE (explore solutions) →
PLAN (detailed specs) →
EXECUTE (implementation) →
REVIEW (validation) →
Archive to completed/
```

---

**Protocol Version**: 4.0.0 - Simplified and Optimized
**Last Updated**: 2025-01-19
**Status**: Production Ready - Optimized for NyNus Development
**Reduced from**: 246 lines → 180 lines (27% reduction)
