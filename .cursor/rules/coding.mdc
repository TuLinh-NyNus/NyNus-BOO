---
alwaysApply: true
---
# Clean Code Standards - Exam Bank System
## Essential Coding Guidelines for All Languages (Go, TypeScript, Dart)

## üéØ Priority Levels
- üî¥ **Critical**: Must follow (CI/CD will fail)
- üü° **High**: Should follow (Code review required)
- üü¢ **Medium**: Recommended (Best practice)

## üìÅ Monorepo Architecture
```
exam-bank-system/
‚îú‚îÄ‚îÄ apps/
‚îÇ   ‚îú‚îÄ‚îÄ backend/      # Go + gRPC backend
‚îÇ   ‚îú‚îÄ‚îÄ frontend/     # Next.js 14 + TypeScript frontend
‚îÇ   ‚îî‚îÄ‚îÄ mobile/       # Flutter + Dart mobile app
‚îú‚îÄ‚îÄ packages/
‚îÇ   ‚îî‚îÄ‚îÄ proto/        # gRPC proto definitions
‚îî‚îÄ‚îÄ docs/             # Documentation & tracking
```

**‚úÖ DO**: Feature-based organization, gRPC for communication, clear separation
**‚ùå DON'T**: Mix frontend/backend logic, duplicate code, circular dependencies

**üìñ See**: `architecture.mdc` for detailed structure guidelines

---

## üî¥ Critical Rules

### Language Policy
```typescript
// ‚úÖ Vietnamese for business logic & UI
const UI_MESSAGES = {
  loginSuccess: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
  invalidEmail: 'Email kh√¥ng h·ª£p l·ªá'
};

// ‚úÖ English for technical implementation
function calculateQuestionScore(answers: Answer[]): number {
  // Filter correct answers and sum points
  return answers.filter(a => a.isCorrect).reduce((sum, a) => sum + a.points, 0);
}
```

### Single Responsibility
```typescript
// ‚ùå BAD - Multiple responsibilities
function processUserData(userData: any) {
  if (!userData.email) throw new Error('Email required');
  const user = { id: generateId(), email: userData.email.toLowerCase() };
  database.save(user);
  emailService.sendWelcome(user.email);
  return user;
}

// ‚úÖ GOOD - Separate functions
function createUser(userData: UserInput): User {
  validateUserData(userData);
  const user = transformUserData(userData);
  return userRepository.save(user);
}
```

### Function Limits
- **Size**: < 20 lines
- **Parameters**: < 4 (use object parameter)
- **Nesting**: < 3 levels (use early returns)

```typescript
// ‚úÖ GOOD - Object parameter
interface CreateQuestionParams {
  content: string;
  type: QuestionType;
  difficulty: Difficulty;
  category: string;
}

function createQuestion(params: CreateQuestionParams): Question {
  // Implementation
}
```

### File Organization
- **Files**: < 300 lines
- **Classes**: < 200 lines
- **Functions**: < 20 lines

### Error Handling
```typescript
// ‚ùå BAD - Return null
function findUser(email: string): User | null {
  return database.findUser(email) || null;
}

// ‚úÖ GOOD - Throw exceptions
function findUser(email: string): User {
  const user = database.findUser(email);
  if (!user) {
    throw new UserNotFoundError(`User with email ${email} not found`);
  }
  return user;
}
```

---

## üü° High Priority Rules

### Naming Conventions
```typescript
// ‚ùå BAD - Vague names
const d = new Date();
const u = users.filter(x => x.active);

// ‚úÖ GOOD - Clear names
const currentDate = new Date();
const activeUsers = users.filter(user => user.isActive);
```

### Avoid Deep Nesting
```typescript
// ‚ùå BAD - Deep nesting
function processAnswer(answer: Answer): Result {
  if (answer) {
    if (answer.content) {
      if (answer.questionId) {
        // ... nested logic
      }
    }
  }
}

// ‚úÖ GOOD - Early returns
function processAnswer(answer: Answer): Result {
  if (!answer?.content || !answer.questionId) {
    throw new InvalidAnswerError('Answer missing required information');
  }
  // Main logic here
}
```

### Constants & Magic Numbers
```typescript
// ‚ùå BAD - Magic numbers
function validatePassword(password: string): boolean {
  return password.length >= 8 && password.length <= 128;
}

// ‚úÖ GOOD - Named constants
const PASSWORD_MIN_LENGTH = 8;
const PASSWORD_MAX_LENGTH = 128;

function validatePassword(password: string): boolean {
  return password.length >= PASSWORD_MIN_LENGTH && 
         password.length <= PASSWORD_MAX_LENGTH;
}
```

---

## üü¢ Medium Priority Rules

### Testing (Only When Requested)
```typescript
// AAA Pattern: Arrange, Act, Assert
describe('UserService', () => {
  it('should create user with valid data', async () => {
    // Arrange
    const userData = { email: 'test@example.com', name: 'John' };
    
    // Act
    const result = await userService.createUser(userData);
    
    // Assert
    expect(result).toEqual(expect.objectContaining(userData));
  });
});
```

**Testing Policy**: Only create automated tests if explicitly requested by user

### Performance
- Use pagination for large datasets
- Cleanup event listeners/subscriptions
- Optimize algorithm complexity (avoid O(n¬≤))

### Security
- Sanitize all user inputs
- Use Zod schemas (TS) or validator packages (Go/Dart)
- Implement role-based access control (RBAC)

---

## üìã Quick Reference

### File Naming by Platform
| Platform | Type | Convention | Example |
|----------|------|------------|---------|
| Go | All files | snake_case | `exam_service.go` |
| TypeScript | Components | kebab-case | `exam-card.tsx` |
| TypeScript | Services | kebab-case | `exam.service.ts` |
| TypeScript | Hooks | kebab-case | `use-exam-data.ts` |
| Dart | All files | snake_case | `exam_card.dart` |

**üìñ See**: `architecture.mdc` for complete naming conventions

### Import Order
```typescript
// 1. External dependencies
import React from 'react';
import axios from 'axios';

// 2. Internal modules
import { UserService } from '@/services/user';
import { Button } from '@/components/ui';

// 3. Relative imports
import './styles.css';
```

### Error Messages
| Context | Language | Example |
|---------|----------|---------|
| User-facing | Vietnamese | `'Email kh√¥ng h·ª£p l·ªá'` |
| Developer | English | `'Database connection failed'` |

---

## ‚úÖ Pre-commit Checklist
- [ ] Functions < 20 lines, < 4 parameters
- [ ] No debug statements (console.log, fmt.Println, print in production code)
- [ ] All type errors resolved (Go, TypeScript, Dart)
- [ ] Tests written only if explicitly requested
- [ ] Error handling implemented
- [ ] Input validation added
- [ ] No magic numbers (use constants)
- [ ] Meaningful variable/function names

## üîç Code Review Checklist
- [ ] Single responsibility principle
- [ ] No deep nesting (< 3 levels)
- [ ] Proper error handling
- [ ] Security vulnerabilities checked
- [ ] Performance optimized
- [ ] Tests only if requested

---

## üî¥ Constants & Magic Numbers (Multi-language)

### TypeScript/JavaScript
```typescript
// ‚ùå BAD - Magic numbers
function validatePassword(password: string): boolean {
  return password.length >= 8 && password.length <= 128;
}

// ‚úÖ GOOD - Named constants
const VALIDATION_LIMITS = {
  PASSWORD_MIN_LENGTH: 8,
  PASSWORD_MAX_LENGTH: 128,
  USERNAME_MIN_LENGTH: 3,
  EMAIL_MAX_LENGTH: 255
} as const;
```

### Go
```go
// ‚ùå BAD - Magic numbers
func ValidatePassword(password string) bool {
    return len(password) >= 8 && len(password) <= 128
}

// ‚úÖ GOOD - Named constants
const (
    PasswordMinLength = 8
    PasswordMaxLength = 128
    UsernameMinLength = 3
    EmailMaxLength    = 255
)
```

### Dart (Flutter)
```dart
// ‚ùå BAD - Magic numbers
bool validatePassword(String password) {
  return password.length >= 8 && password.length <= 128;
}

// ‚úÖ GOOD - Named constants
class ValidationLimits {
  static const int passwordMinLength = 8;
  static const int passwordMaxLength = 128;
  static const int usernameMinLength = 3;
  static const int emailMaxLength = 255;
}
```

---

**Key Features:**
- ‚úÖ Multi-language support (Go, TypeScript, Dart)
- ‚úÖ gRPC-based architecture
- ‚úÖ Tests only when requested
- ‚úÖ Quick reference tables
- ‚úÖ Actionable checklists
