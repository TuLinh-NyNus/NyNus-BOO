---
alwaysApply: true
---
# Clean Code Standards - Exam Bank System
## Essential Coding Guidelines for All Languages (Go, TypeScript, Dart)

## 🎯 Priority Levels
- 🔴 **Critical**: Must follow (CI/CD will fail)
- 🟡 **High**: Should follow (Code review required)
- 🟢 **Medium**: Recommended (Best practice)

## 📁 Monorepo Architecture
```
exam-bank-system/
├── apps/
│   ├── backend/      # Go + gRPC backend
│   ├── frontend/     # Next.js 14 + TypeScript frontend
│   └── mobile/       # Flutter + Dart mobile app
├── packages/
│   └── proto/        # gRPC proto definitions
└── docs/             # Documentation & tracking
```

**✅ DO**: Feature-based organization, gRPC for communication, clear separation
**❌ DON'T**: Mix frontend/backend logic, duplicate code, circular dependencies

**📖 See**: `architecture.mdc` for detailed structure guidelines

---

## 🔴 Critical Rules

### Language Policy
- ✅ Vietnamese for business logic & UI
- ✅ English for technical implementation & comments

### Function Limits
- **Size**: < 20 lines
- **Parameters**: < 4 (use object parameter)
- **Nesting**: < 3 levels (use early returns)
- **Files**: < 300 lines
- **Classes**: < 200 lines

### Principles
- Single Responsibility: 1 function = 1 purpose
- Early returns instead of deep nesting
- Throw exceptions, don't return null
- Use object parameters for multiple params

---

## 🟡 High Priority Rules

### Naming Conventions
- Meaningful names (not: d, u, x)
- Clear purpose in name
- Use camelCase (variables), PascalCase (types/classes), SCREAMING_SNAKE_CASE (constants)

### Avoid Deep Nesting
- Use early returns for guard clauses
- Max 3 levels of nesting
- Throw errors early, don't nest validation

### Constants & Magic Numbers
- Define named constants for values
- Document why, not just what

---

## 🟢 Medium Priority Rules

### Testing (Only When Requested)
- Only create automated tests if explicitly requested
- When needed: Go testing (backend), Jest (frontend), Flutter test (mobile)

### Performance
- Use pagination for large datasets
- Optimize algorithm complexity (avoid O(n²))

### Security
- Sanitize user inputs
- Use Zod schemas (TS) or validator packages (Go/Dart)
- Implement role-based access control (RBAC)

---

## 📋 Quick Reference

### File Naming by Platform
| Platform | Type | Convention | Example |
|----------|------|------------|---------|
| Go | All files | snake_case | `exam_service.go` |
| TypeScript | Components | kebab-case | `exam-card.tsx` |
| TypeScript | Services | kebab-case | `exam.service.ts` |
| TypeScript | Hooks | kebab-case | `use-exam-data.ts` |
| Dart | All files | snake_case | `exam_card.dart` |

**📖 See**: `architecture.mdc` for complete naming conventions

### Import Order
```typescript
// 1. External dependencies
import React from 'react';
import axios from 'axios';

// 2. Internal modules
import { UserService } from '@/services/user';
import { Button } from '@/components/ui';

// 3. Relative imports
import './styles.css';
```

### Error Messages
| Context | Language | Example |
|---------|----------|---------|
| User-facing | Vietnamese | `'Email không hợp lệ'` |
| Developer | English | `'Database connection failed'` |

---

## ✅ Pre-commit Checklist
- [ ] Functions < 20 lines, < 4 parameters
- [ ] No debug statements (console.log, fmt.Println, print in production code)
- [ ] All type errors resolved (Go, TypeScript, Dart)
- [ ] Tests written only if explicitly requested
- [ ] Error handling implemented
- [ ] Input validation added
- [ ] No magic numbers (use constants)
- [ ] Meaningful variable/function names

## 🔍 Code Review Checklist
- [ ] Single responsibility principle
- [ ] No deep nesting (< 3 levels)
- [ ] Proper error handling
- [ ] Security vulnerabilities checked
- [ ] Performance optimized
- [ ] Tests only if requested

---

**Key Features:**
- ✅ Multi-language support (Go, TypeScript, Dart)
- ✅ gRPC-based architecture
- ✅ Tests only when requested
- ✅ Quick reference tables
- ✅ Actionable checklists
