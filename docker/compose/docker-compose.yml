# Base Docker Compose Configuration
# This file contains common service definitions for all environments
# Use docker-compose.override.yml for development-specific services
# Use docker-compose.prod.yml for production overrides

services:
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-exam_bank_postgres}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-exam_bank_db}
      POSTGRES_USER: ${POSTGRES_USER:-exam_bank_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-exam_bank_password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - ${POSTGRES_VOLUME:-postgres_data}:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - exam_bank_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-exam_bank_user} -d ${POSTGRES_DB:-exam_bank_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: ${REDIS_CONTAINER_NAME:-exam_bank_redis}
    command: redis-server --requirepass ${REDIS_PASSWORD:-exam_bank_redis_password} --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-exam_bank_redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - exam_bank_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-exam_bank_redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ../..
      dockerfile: ${BACKEND_DOCKERFILE:-docker/backend.Dockerfile}
    container_name: ${BACKEND_CONTAINER_NAME:-exam_bank_backend}
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-exam_bank_db}
      - DB_USER=${POSTGRES_USER:-exam_bank_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-exam_bank_password}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here}
      - JWT_ACCESS_TOKEN_EXPIRY=${JWT_ACCESS_EXPIRY:-15m}
      - JWT_REFRESH_TOKEN_EXPIRY=${JWT_REFRESH_EXPIRY:-7d}
      - HTTP_GATEWAY_ENABLED=${HTTP_GATEWAY_ENABLED:-true}
      - ENV=${APP_ENV:-development}
      # Redis Configuration (Phase 6 - Task 6.1.1)
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-exam_bank_redis_password}
      # Redis Pub/Sub Configuration
      - REDIS_PUBSUB_ENABLED=${REDIS_PUBSUB_ENABLED:-true}
      - REDIS_PUBSUB_CHANNEL_PREFIX=${REDIS_PUBSUB_CHANNEL_PREFIX:-exam_bank}
      - REDIS_MESSAGE_QUEUE_SIZE=${REDIS_MESSAGE_QUEUE_SIZE:-100}
      - REDIS_WORKER_POOL_SIZE=${REDIS_WORKER_POOL_SIZE:-10}
      # WebSocket Configuration
      - WEBSOCKET_PORT=${WEBSOCKET_PORT:-8081}
      - FRONTEND_URL=${FRONTEND_URL:-http://frontend:3000}
    ports:
      - "${BACKEND_GRPC_PORT:-50051}:50051"
      - "${BACKEND_HTTP_PORT:-8080}:8080"
      - "${WEBSOCKET_PORT:-8081}:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - exam_bank_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --quiet --tries=1 --spider http://localhost:8080/health && wget --quiet --tries=1 --spider http://localhost:8081/api/v1/ws/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ../../apps/frontend
      dockerfile: ${FRONTEND_DOCKERFILE:-Dockerfile}
    container_name: ${FRONTEND_CONTAINER_NAME:-exam_bank_frontend}
    environment:
      # Next.js Public Environment Variables
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      - NEXT_PUBLIC_GRPC_URL=${NEXT_PUBLIC_GRPC_URL:-http://localhost:8080}
      # WebSocket URL (Phase 6 - Task 6.1.1)
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8081/api/v1/ws/notifications}
      # NextAuth Configuration
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-nextauth-secret-here}
      # Prisma Database URL (required for Prisma Client)
      - DATABASE_URL=postgresql://${POSTGRES_USER:-exam_bank_user}:${POSTGRES_PASSWORD:-exam_bank_password}@postgres:5432/${POSTGRES_DB:-exam_bank_db}?schema=public&sslmode=disable
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - exam_bank_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  exam_bank_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
