# Production Environment Overrides
# Use this file with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
# Contains production-specific configurations and environment variables

services:
  # Production Postgres Configuration
  postgres:
    container_name: exam_bank_postgres_prod
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-exam_bank_password}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ../init/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Production Backend Configuration
  backend:
    build:
      dockerfile: docker/build/backend.prod.Dockerfile
    container_name: exam_bank_backend_prod
    environment:
      - DB_PASSWORD=${DB_PASSWORD:-exam_bank_password}
      - JWT_SECRET=${JWT_SECRET}
      - HTTP_GATEWAY_ENABLED=false
      - ENV=production
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      # Enhanced performance settings
      - MAX_CONCURRENT_STREAMS=2000
      - MAX_RECEIVE_MESSAGE_SIZE=8388608
      - MAX_SEND_MESSAGE_SIZE=8388608
      - CONNECTION_TIMEOUT=60
      - KEEPALIVE_TIME=30
      - KEEPALIVE_TIMEOUT=5
      # Enhanced rate limiting
      - ENABLE_RATE_LIMIT=true
      - RATE_LIMIT_RPS=200
      - RATE_LIMIT_BURST=500

  # Production Frontend Configuration
  frontend:
    build:
      dockerfile: docker/build/frontend.prod.Dockerfile
    container_name: exam_bank_frontend_prod
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_GRPC_URL=${NEXT_PUBLIC_GRPC_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}

volumes:
  postgres_data_prod:
