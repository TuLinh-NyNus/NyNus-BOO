# Docker Compose Configuration - Development Mode
# NyNus Exam Bank System - Development Services
# Backend API (Go) and Frontend Web (Next.js) run locally, NOT in Docker
#
# Usage:
#   docker-compose -f docker-compose.dev.yml up -d                    # Start all dev services
#   docker-compose -f docker-compose.dev.yml up -d postgres           # PostgreSQL only
#   docker-compose -f docker-compose.dev.yml up -d postgres redis     # PostgreSQL + Redis
#   docker-compose -f docker-compose.dev.yml down                     # Stop all services
#
# Services:
#   - postgres: PostgreSQL 15 database (required)
#   - redis: Redis 7.2 cache (optional)
#   - prisma-studio: Prisma Studio GUI (optional)
#
# Local connections:
#   - Backend: DB_HOST=localhost, DB_PORT=5433, REDIS_URL=redis://localhost:6379
#   - Frontend: DATABASE_URL=postgresql://exam_bank_user:exam_bank_password@localhost:5433/exam_bank_db

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-NyNus-postgres}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-exam_bank_db}
      POSTGRES_USER: ${POSTGRES_USER:-exam_bank_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-exam_bank_password}
    ports:
      # Port 5432 is used by local PostgreSQL, so we use 5433 for Docker
      - "${DB_PORT:-5433}:5432"
    volumes:
      - ${POSTGRES_VOLUME:-postgres_data}:/var/lib/postgresql/data
      - ../init/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - exam_bank_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-exam_bank_user} -d ${POSTGRES_DB:-exam_bank_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Resource limits to prevent excessive resource consumption
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis Cache Service (Required for WebSocket real-time notifications)
  redis:
    image: redis:7.2-alpine
    container_name: ${REDIS_CONTAINER_NAME:-NyNus-redis}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-exam_bank_redis_password}
    command: redis-server --requirepass ${REDIS_PASSWORD:-exam_bank_redis_password} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - exam_bank_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-exam_bank_redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Resource limits (Phase 6 - Task 6.1.3)
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    # Removed profiles - Redis now required for WebSocket

  # Prisma Studio GUI (Optional - for database management)
  # Uses Dockerfile with BuildKit cache for fast startup
  prisma-studio:
    build:
      context: ../..
      dockerfile: docker/prisma-studio.Dockerfile
    container_name: ${PRISMA_STUDIO_CONTAINER_NAME:-NyNus-prisma-studio}
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-exam_bank_user}:${POSTGRES_PASSWORD:-exam_bank_password}@postgres:5432/${POSTGRES_DB:-exam_bank_db}?schema=public&sslmode=disable
      - NODE_ENV=development
    ports:
      - "${PRISMA_STUDIO_PORT:-5555}:5555"
    networks:
      - exam_bank_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    profiles:
      - prisma
      - full

# Network configuration
networks:
  exam_bank_network:
    driver: bridge
    name: exam_bank_network

# Volume configuration
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

