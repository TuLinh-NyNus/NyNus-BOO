/**
 * NyNus - Create 10 Exams from Imported Questions
 * 
 * T·∫°o 10 exams v·ªõi c·∫•u tr√∫c ƒëa d·∫°ng t·ª´ questions ƒë√£ import
 * 
 * Usage: tsx prisma/create-exams.ts
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Helper function to generate UUID
function generateId(): string {
  return crypto.randomUUID();
}

// Exam configurations
const examConfigs = [
  {
    title: 'ƒê·ªÅ thi t·ªïng h·ª£p To√°n 10 - H·ªçc k·ª≥ 1',
    description: 'ƒê·ªÅ thi t·ªïng h·ª£p ki·∫øn th·ª©c To√°n l·ªõp 10 h·ªçc k·ª≥ 1',
    instructions: 'Th·ªùi gian l√†m b√†i: 90 ph√∫t. H·ªçc sinh l√†m b√†i tr√™n gi·∫•y thi. Kh√¥ng s·ª≠ d·ª•ng t√†i li·ªáu.',
    exam_type: 'generated',
    difficulty: 'MEDIUM',
    subject: 'To√°n',
    grade: 10,
    chapter: 'T·ªïng h·ª£p',
    duration_minutes: 90,
    pass_percentage: 50,
    tags: ['To√°n 10', 'H·ªçc k·ª≥ 1', 'T·ªïng h·ª£p'],
    questions: { MC: 20, TF: 15, SA: 10, ES: 5 }, // Total: 50 questions
  },
  {
    title: 'Ki·ªÉm tra 15 ph√∫t - To√°n 10 Ch∆∞∆°ng 1',
    description: 'B√†i ki·ªÉm tra 15 ph√∫t ki·∫øn th·ª©c c∆° b·∫£n Ch∆∞∆°ng 1',
    instructions: 'Th·ªùi gian l√†m b√†i: 15 ph√∫t. H·ªçc sinh l√†m b√†i tr√™n gi·∫•y thi.',
    exam_type: 'generated',
    difficulty: 'EASY',
    subject: 'To√°n',
    grade: 10,
    chapter: 'Ch∆∞∆°ng 1',
    duration_minutes: 15,
    pass_percentage: 60,
    tags: ['To√°n 10', 'Ki·ªÉm tra 15 ph√∫t', 'Ch∆∞∆°ng 1'],
    questions: { MC: 10, TF: 5 }, // Total: 15 questions
  },
  {
    title: 'ƒê·ªÅ thi h·ªçc sinh gi·ªèi To√°n 10',
    description: 'ƒê·ªÅ thi d√†nh cho h·ªçc sinh gi·ªèi, c√¢u h·ªèi n√¢ng cao',
    instructions: 'Th·ªùi gian l√†m b√†i: 120 ph√∫t. H·ªçc sinh l√†m b√†i tr√™n gi·∫•y thi. ƒê∆∞·ª£c s·ª≠ d·ª•ng m√°y t√≠nh c·∫ßm tay.',
    exam_type: 'official',
    difficulty: 'HARD',
    subject: 'To√°n',
    grade: 10,
    chapter: 'T·ªïng h·ª£p',
    duration_minutes: 120,
    pass_percentage: 70,
    tags: ['To√°n 10', 'H·ªçc sinh gi·ªèi', 'N√¢ng cao'],
    questions: { MC: 15, SA: 10, ES: 10 }, // Total: 35 questions
  },
  {
    title: 'ƒê·ªÅ thi gi·ªØa k·ª≥ 1 - To√°n 10',
    description: 'ƒê·ªÅ thi gi·ªØa h·ªçc k·ª≥ 1 m√¥n To√°n l·ªõp 10',
    instructions: 'Th·ªùi gian l√†m b√†i: 60 ph√∫t. H·ªçc sinh l√†m b√†i tr√™n gi·∫•y thi.',
    exam_type: 'official',
    difficulty: 'MEDIUM',
    subject: 'To√°n',
    grade: 10,
    chapter: 'Ch∆∞∆°ng 1-2',
    duration_minutes: 60,
    pass_percentage: 50,
    tags: ['To√°n 10', 'Gi·ªØa k·ª≥', 'Ch∆∞∆°ng 1-2'],
    questions: { MC: 15, TF: 10, SA: 5 }, // Total: 30 questions
  },
  {
    title: 'ƒê·ªÅ thi cu·ªëi k·ª≥ 1 - To√°n 10',
    description: 'ƒê·ªÅ thi cu·ªëi h·ªçc k·ª≥ 1 m√¥n To√°n l·ªõp 10',
    instructions: 'Th·ªùi gian l√†m b√†i: 90 ph√∫t. H·ªçc sinh l√†m b√†i tr√™n gi·∫•y thi.',
    exam_type: 'official',
    difficulty: 'MEDIUM',
    subject: 'To√°n',
    grade: 10,
    chapter: 'T·ªïng h·ª£p HK1',
    duration_minutes: 90,
    pass_percentage: 50,
    tags: ['To√°n 10', 'Cu·ªëi k·ª≥', 'H·ªçc k·ª≥ 1'],
    questions: { MC: 20, TF: 10, SA: 8, ES: 2 }, // Total: 40 questions
  },
  {
    title: 'ƒê·ªÅ luy·ªán t·∫≠p To√°n 10 - Ch∆∞∆°ng 2',
    description: 'ƒê·ªÅ luy·ªán t·∫≠p ki·∫øn th·ª©c Ch∆∞∆°ng 2',
    instructions: 'Th·ªùi gian l√†m b√†i: 45 ph√∫t. H·ªçc sinh l√†m b√†i tr√™n gi·∫•y thi.',
    exam_type: 'generated',
    difficulty: 'EASY',
    subject: 'To√°n',
    grade: 10,
    chapter: 'Ch∆∞∆°ng 2',
    duration_minutes: 45,
    pass_percentage: 60,
    tags: ['To√°n 10', 'Luy·ªán t·∫≠p', 'Ch∆∞∆°ng 2'],
    questions: { MC: 15, TF: 10, SA: 5 }, // Total: 30 questions
  },
  {
    title: 'ƒê·ªÅ thi th·ª≠ THPT Qu·ªëc gia - To√°n',
    description: 'ƒê·ªÅ thi th·ª≠ THPT Qu·ªëc gia m√¥n To√°n',
    instructions: 'Th·ªùi gian l√†m b√†i: 90 ph√∫t. H·ªçc sinh l√†m b√†i tr√™n gi·∫•y thi. ƒê∆∞·ª£c s·ª≠ d·ª•ng m√°y t√≠nh c·∫ßm tay.',
    exam_type: 'generated',
    difficulty: 'HARD',
    subject: 'To√°n',
    grade: 12,
    chapter: 'T·ªïng h·ª£p',
    duration_minutes: 90,
    pass_percentage: 50,
    tags: ['To√°n 12', 'THPT Qu·ªëc gia', 'Thi th·ª≠'],
    questions: { MC: 40, SA: 10 }, // Total: 50 questions
  },
  {
    title: 'Ki·ªÉm tra 45 ph√∫t - To√°n 10 Ch∆∞∆°ng 3',
    description: 'B√†i ki·ªÉm tra 45 ph√∫t Ch∆∞∆°ng 3',
    instructions: 'Th·ªùi gian l√†m b√†i: 45 ph√∫t. H·ªçc sinh l√†m b√†i tr√™n gi·∫•y thi.',
    exam_type: 'generated',
    difficulty: 'MEDIUM',
    subject: 'To√°n',
    grade: 10,
    chapter: 'Ch∆∞∆°ng 3',
    duration_minutes: 45,
    pass_percentage: 50,
    tags: ['To√°n 10', 'Ki·ªÉm tra 45 ph√∫t', 'Ch∆∞∆°ng 3'],
    questions: { MC: 12, TF: 8, SA: 5 }, // Total: 25 questions
  },
  {
    title: 'ƒê·ªÅ √¥n t·∫≠p h·ªçc k·ª≥ 2 - To√°n 10',
    description: 'ƒê·ªÅ √¥n t·∫≠p t·ªïng h·ª£p h·ªçc k·ª≥ 2',
    instructions: 'Th·ªùi gian l√†m b√†i: 90 ph√∫t. H·ªçc sinh l√†m b√†i tr√™n gi·∫•y thi.',
    exam_type: 'generated',
    difficulty: 'MEDIUM',
    subject: 'To√°n',
    grade: 10,
    chapter: 'T·ªïng h·ª£p HK2',
    duration_minutes: 90,
    pass_percentage: 50,
    tags: ['To√°n 10', '√în t·∫≠p', 'H·ªçc k·ª≥ 2'],
    questions: { MC: 25, TF: 15, SA: 10 }, // Total: 50 questions
  },
  {
    title: 'ƒê·ªÅ thi Olympic To√°n 10',
    description: 'ƒê·ªÅ thi Olympic To√°n l·ªõp 10 c·∫•p tr∆∞·ªùng',
    instructions: 'Th·ªùi gian l√†m b√†i: 150 ph√∫t. H·ªçc sinh l√†m b√†i tr√™n gi·∫•y thi. ƒê∆∞·ª£c s·ª≠ d·ª•ng m√°y t√≠nh c·∫ßm tay.',
    exam_type: 'official',
    difficulty: 'HARD',
    subject: 'To√°n',
    grade: 10,
    chapter: 'T·ªïng h·ª£p',
    duration_minutes: 150,
    pass_percentage: 70,
    tags: ['To√°n 10', 'Olympic', 'N√¢ng cao'],
    questions: { MC: 10, SA: 15, ES: 15 }, // Total: 40 questions
  },
];

async function main() {
  console.log('üìù Starting exam creation...\n');

  // Get first admin user for creator
  const adminUser = await prisma.users.findFirst({
    where: { role: 'ADMIN' }
  });

  if (!adminUser) {
    throw new Error('No admin user found in database');
  }

  console.log(`‚úÖ Found admin user: ${adminUser.email}\n`);

  // Track created exams
  const createdExams: any[] = [];
  let totalQuestionsUsed = 0;

  // Create each exam
  for (let i = 0; i < examConfigs.length; i++) {
    const config = examConfigs[i];
    const examNumber = i + 1;

    console.log(`üìã Creating Exam ${examNumber}/10: ${config.title}`);

    try {
      // Calculate total points
      const totalPoints = Object.entries(config.questions).reduce((sum, [type, count]) => {
        const pointsPerQuestion = type === 'ES' ? 3 : type === 'SA' ? 2 : 1;
        return sum + (count * pointsPerQuestion);
      }, 0);

      // Create exam
      const exam = await prisma.exams.create({
        data: {
          id: generateId(),
          title: config.title,
          description: config.description,
          instructions: config.instructions,
          exam_type: config.exam_type,
          status: 'ACTIVE',
          difficulty: config.difficulty,
          subject: config.subject,
          grade: config.grade,
          chapter: config.chapter,
          duration_minutes: config.duration_minutes,
          total_points: totalPoints,
          pass_percentage: config.pass_percentage,
          shuffle_questions: true,
          shuffle_answers: true,
          show_results: true,
          show_answers: config.exam_type === 'practice',
          allow_review: true,
          max_attempts: config.exam_type === 'practice' ? 3 : 2,
          tags: config.tags,
          created_by: adminUser.id,
          published_at: new Date(),
        },
      });

      // Add questions to exam
      let orderNumber = 1;
      let examQuestionsCount = 0;

      for (const [type, count] of Object.entries(config.questions)) {
        // Get questions of this type
        const questions = await prisma.question.findMany({
          where: {
            type: type,
            status: 'ACTIVE',
          },
          take: count,
          skip: totalQuestionsUsed, // Offset to avoid duplicates across exams
        });

        // Add questions to exam
        for (const question of questions) {
          const pointsPerQuestion = type === 'ES' ? 3 : type === 'SA' ? 2 : 1;

          await prisma.exam_questions.create({
            data: {
              id: generateId(),
              exam_id: exam.id,
              question_id: question.id,
              order_number: orderNumber,
              points: pointsPerQuestion,
              is_bonus: false,
            },
          });

          orderNumber++;
          examQuestionsCount++;
        }

        totalQuestionsUsed += questions.length;
      }

      createdExams.push({
        id: exam.id,
        title: exam.title,
        questions: examQuestionsCount,
        points: totalPoints,
      });

      console.log(`   ‚úÖ Created with ${examQuestionsCount} questions, ${totalPoints} points\n`);
    } catch (error) {
      console.error(`   ‚ùå Error creating exam ${examNumber}:`, error);
    }
  }

  console.log('\n‚úÖ Exam creation completed successfully!');
  console.log(`üìä Summary:`);
  console.log(`   - Total exams created: ${createdExams.length}`);
  console.log(`   - Total questions used: ${totalQuestionsUsed}\n`);

  console.log('üìã Created Exams:');
  createdExams.forEach((exam, index) => {
    console.log(`   ${index + 1}. ${exam.title}`);
    console.log(`      - Questions: ${exam.questions}, Points: ${exam.points}`);
  });
}

main()
  .catch((e) => {
    console.error('‚ùå Exam creation failed:', error);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

