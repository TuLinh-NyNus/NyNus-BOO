'use client';

import React from 'react';

import { Users, UserCheck, GraduationCap, BookOpen, HelpCircle } from 'lucide-react';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui";
import { StatCard } from './stat-card';
import { useAdminStats } from '@/contexts/admin-stats-context';

/**
 * Component hi·ªÉn th·ªã skeleton loading cho StatCard
 * S·ª≠ d·ª•ng khi ƒëang t·∫£i d·ªØ li·ªáu th·ªëng k√™
 */
function StatCardSkeleton() {
  return (
    <Card className="theme-bg theme-border">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <Skeleton className="h-4 w-[100px]" />
        <Skeleton className="h-4 w-4" />
      </CardHeader>
      <CardContent>
        <Skeleton className="h-8 w-[60px] mb-2" />
        <Skeleton className="h-3 w-[120px]" />
      </CardContent>
    </Card>
  );
}

/**
 * Component DashboardStats - Hi·ªÉn th·ªã c√°c th·ªëng k√™ t·ªïng quan c·ªßa h·ªá th·ªëng
 * Bao g·ªìm th·ªëng k√™ ng∆∞·ªùi d√πng, ph√¢n b·ªë vai tr√≤ v√† th·ªëng k√™ h·ªá th·ªëng
 *
 * ‚úÖ FIX: S·ª≠ d·ª•ng AdminStatsContext ƒë·ªÉ tr√°nh duplicate API calls v√† rate limit errors
 */
export function DashboardStats() {
  // ‚úÖ FIX: Use AdminStatsContext instead of direct API call
  const { stats, loading: isLoading, error } = useAdminStats();

  // Map stats to analytics data format
  const analyticsData = stats ? {
    overview: {
      totalUsers: stats.total_users || 0,
      activeUsers: stats.active_users || 0,
      newUsersToday: 0, // TODO: Add to backend
      totalSessions: stats.total_sessions || 0,
      totalCourses: 0, // TODO: Add to backend
      totalQuestions: 0, // TODO: Add to backend
      coursesCompletedToday: 0 // TODO: Add to backend
    }
  } : null;

  // Hi·ªÉn th·ªã skeleton loading khi ƒëang t·∫£i d·ªØ li·ªáu
  if (isLoading) {
    return (
      <div className="grid gap-5 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4">
        {Array.from({ length: 8 }).map((_, index) => (
          <StatCardSkeleton key={index} />
        ))}
      </div>
    );
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu
  if (error || !analyticsData) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>L·ªói t·∫£i d·ªØ li·ªáu</CardTitle>
          <CardDescription>{error || 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™'}</CardDescription>
        </CardHeader>
      </Card>
    );
  }

  // Destructure d·ªØ li·ªáu t·ª´ mockAnalytics ƒë·ªÉ s·ª≠ d·ª•ng
  const { overview } = analyticsData;

  return (
    <div className="space-y-8" suppressHydrationWarning>
      {/* Th·ªëng k√™ ng∆∞·ªùi d√πng t·ªïng quan */}
      <div suppressHydrationWarning>
        <div className="mb-6 p-6 rounded-2xl bg-gradient-to-r from-blue-500/10 via-cyan-500/10 to-purple-500/10 backdrop-blur-xl border border-white/10 shadow-lg">
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 rounded-2xl bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center shadow-2xl shadow-blue-500/50">
              <span className="text-2xl">üë•</span>
            </div>
            <div>
              <h3 className="text-2xl font-black bg-gradient-to-r from-blue-400 via-cyan-400 to-purple-400 bg-clip-text text-transparent">
                Th·ªëng k√™ ng∆∞·ªùi d√πng
              </h3>
              <p className="text-sm text-muted-foreground/80 mt-1 font-medium">T·ªïng quan v·ªÅ ng∆∞·ªùi d√πng v√† ho·∫°t ƒë·ªông trong h·ªá th·ªëng</p>
            </div>
          </div>
        </div>
        <div className="grid gap-6 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-4">
          <StatCard
            title="T·ªïng ng∆∞·ªùi d√πng"
            value={overview.totalUsers}
            description="T·∫•t c·∫£ t√†i kho·∫£n trong h·ªá th·ªëng"
            icon={<Users className="h-4 w-4" />}
            colorScheme="primary"
            trend={{
              value: overview.newUsersToday,
              label: "h√¥m nay",
              isPositive: true,
            }}
          />
          <StatCard
            title="ƒêang ho·∫°t ƒë·ªông"
            value={overview.activeUsers}
            description="Ng∆∞·ªùi d√πng ƒëang online"
            icon={<UserCheck className="h-4 w-4" />}
            colorScheme="success"
          />
          <StatCard
            title="ƒêƒÉng k√Ω m·ªõi"
            value={overview.newUsersToday}
            description="T√†i kho·∫£n m·ªõi h√¥m nay"
            icon={<Users className="h-4 w-4" />}
            colorScheme="accent"
          />
          <StatCard
            title="Phi√™n h·ªçc"
            value={overview.totalSessions}
            description="T·ªïng s·ªë phi√™n h·ªçc"
            icon={<GraduationCap className="h-4 w-4" />}
            colorScheme="education"
          />
        </div>
      </div>

      {/* Th·ªëng k√™ n·ªôi dung h·ªá th·ªëng */}
      <div>
        <div className="mb-6 p-6 rounded-2xl bg-gradient-to-r from-amber-500/10 via-orange-500/10 to-red-500/10 backdrop-blur-xl border border-white/10 shadow-lg">
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 rounded-2xl bg-gradient-to-br from-amber-500 to-orange-600 flex items-center justify-center shadow-2xl shadow-amber-500/50">
              <span className="text-2xl">üìö</span>
            </div>
            <div>
              <h3 className="text-2xl font-black bg-gradient-to-r from-amber-400 via-orange-400 to-red-400 bg-clip-text text-transparent">
                Th·ªëng k√™ n·ªôi dung
              </h3>
              <p className="text-sm text-muted-foreground/80 mt-1 font-medium">Kh√≥a h·ªçc, c√¢u h·ªèi v√† t√†i li·ªáu h·ªçc t·∫≠p</p>
            </div>
          </div>
        </div>
        <div className="grid gap-6 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-4">
          <StatCard
            title="Kh√≥a h·ªçc"
            value={overview.totalCourses}
            description="T·ªïng s·ªë kh√≥a h·ªçc"
            icon={<BookOpen className="h-4 w-4" />}
            colorScheme="primary"
          />
          <StatCard
            title="C√¢u h·ªèi"
            value={overview.totalQuestions}
            description="Ng√¢n h√†ng c√¢u h·ªèi"
            icon={<HelpCircle className="h-4 w-4" />}
            colorScheme="accent"
          />
          <StatCard
            title="Ho√†n th√†nh"
            value={overview.coursesCompletedToday}
            description="Kh√≥a h·ªçc ho√†n th√†nh h√¥m nay"
            icon={<GraduationCap className="h-4 w-4" />}
            colorScheme="education"
          />
          <StatCard
            title="T·ªïng phi√™n h·ªçc"
            value={overview.totalSessions}
            description="Phi√™n h·ªçc t·ªïng c·ªông"
            icon={<GraduationCap className="h-4 w-4" />}
            colorScheme="alert"
          />
        </div>
      </div>
    </div>
  );
}

