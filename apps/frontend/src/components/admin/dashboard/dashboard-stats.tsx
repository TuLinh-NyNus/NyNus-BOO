'use client';

import React from 'react';

import { Users, UserCheck, GraduationCap, BookOpen, HelpCircle } from 'lucide-react';
import { useState, useEffect } from 'react';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui";
import { StatCard } from './stat-card';
import { mockAnalytics } from '@/lib/mockdata';

/**
 * Component hi·ªÉn th·ªã skeleton loading cho StatCard
 * S·ª≠ d·ª•ng khi ƒëang t·∫£i d·ªØ li·ªáu th·ªëng k√™
 */
function StatCardSkeleton() {
  return (
    <Card className="theme-bg theme-border">
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <Skeleton className="h-4 w-[100px]" />
        <Skeleton className="h-4 w-4" />
      </CardHeader>
      <CardContent>
        <Skeleton className="h-8 w-[60px] mb-2" />
        <Skeleton className="h-3 w-[120px]" />
      </CardContent>
    </Card>
  );
}

/**
 * Component DashboardStats - Hi·ªÉn th·ªã c√°c th·ªëng k√™ t·ªïng quan c·ªßa h·ªá th·ªëng
 * Bao g·ªìm th·ªëng k√™ ng∆∞·ªùi d√πng, ph√¢n b·ªë vai tr√≤ v√† th·ªëng k√™ h·ªá th·ªëng
 */
export function DashboardStats() {
  // State qu·∫£n l√Ω d·ªØ li·ªáu th·ªëng k√™ t·ª´ mockdata
  const [analyticsData, setAnalyticsData] = useState(mockAnalytics);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Effect ƒë·ªÉ simulate vi·ªác fetch data t·ª´ API
  useEffect(() => {
    const fetchAnalyticsData = async () => {
      try {
        setIsLoading(true);
        
        // Simulate API call delay
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // S·ª≠ d·ª•ng mockdata t·ª´ analytics.ts
        setAnalyticsData(mockAnalytics);
        setError(null);
      } catch (err) {
        console.error('Error fetching analytics data:', err);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªëng k√™');
      } finally {
        setIsLoading(false);
      }
    };

    fetchAnalyticsData();
  }, []);

  // Hi·ªÉn th·ªã skeleton loading khi ƒëang t·∫£i d·ªØ li·ªáu
  if (isLoading) {
    return (
      <div className="grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
        {Array.from({ length: 8 }).map((_, index) => (
          <StatCardSkeleton key={index} />
        ))}
      </div>
    );
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu
  if (error || !analyticsData) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>L·ªói t·∫£i d·ªØ li·ªáu</CardTitle>
          <CardDescription>{error || 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™'}</CardDescription>
        </CardHeader>
      </Card>
    );
  }

  // Destructure d·ªØ li·ªáu t·ª´ mockAnalytics ƒë·ªÉ s·ª≠ d·ª•ng
  const { overview } = analyticsData;

  return (
    <div className="space-y-6">
      {/* Th·ªëng k√™ ng∆∞·ªùi d√πng t·ªïng quan */}
      <div>
        <h3 className="text-lg font-semibold mb-4 text-foreground">
          üë• Th·ªëng k√™ ng∆∞·ªùi d√πng
        </h3>
        <div className="grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          <StatCard
            title="T·ªïng ng∆∞·ªùi d√πng"
            value={overview.totalUsers}
            description="T·∫•t c·∫£ t√†i kho·∫£n trong h·ªá th·ªëng"
            icon={<Users className="h-4 w-4" />}
            colorScheme="primary"
            trend={{
              value: overview.newUsersToday,
              label: "h√¥m nay",
              isPositive: true,
            }}
          />
          <StatCard
            title="ƒêang ho·∫°t ƒë·ªông"
            value={overview.activeUsers}
            description="Ng∆∞·ªùi d√πng ƒëang online"
            icon={<UserCheck className="h-4 w-4" />}
            colorScheme="success"
          />
          <StatCard
            title="ƒêƒÉng k√Ω m·ªõi"
            value={overview.newUsersToday}
            description="T√†i kho·∫£n m·ªõi h√¥m nay"
            icon={<Users className="h-4 w-4" />}
            colorScheme="accent"
          />
          <StatCard
            title="Phi√™n h·ªçc"
            value={overview.totalSessions}
            description="T·ªïng s·ªë phi√™n h·ªçc"
            icon={<GraduationCap className="h-4 w-4" />}
            colorScheme="education"
          />
        </div>
      </div>

      {/* Th·ªëng k√™ n·ªôi dung h·ªá th·ªëng */}
      <div>
        <h3 className="text-lg font-semibold mb-4 text-foreground">
          üìö Th·ªëng k√™ n·ªôi dung
        </h3>
        <div className="grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          <StatCard
            title="Kh√≥a h·ªçc"
            value={overview.totalCourses}
            description="T·ªïng s·ªë kh√≥a h·ªçc"
            icon={<BookOpen className="h-4 w-4" />}
            colorScheme="primary"
          />
          <StatCard
            title="C√¢u h·ªèi"
            value={overview.totalQuestions}
            description="Ng√¢n h√†ng c√¢u h·ªèi"
            icon={<HelpCircle className="h-4 w-4" />}
            colorScheme="accent"
          />
          <StatCard
            title="Ho√†n th√†nh"
            value={overview.coursesCompletedToday}
            description="Kh√≥a h·ªçc ho√†n th√†nh h√¥m nay"
            icon={<GraduationCap className="h-4 w-4" />}
            colorScheme="education"
          />
          <StatCard
            title="T·ªïng phi√™n h·ªçc"
            value={overview.totalSessions}
            description="Phi√™n h·ªçc t·ªïng c·ªông"
            icon={<GraduationCap className="h-4 w-4" />}
            colorScheme="alert"
          />
        </div>
      </div>
    </div>
  );
}

