"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { FocusRoomService, type FocusRoom } from "@/services/grpc/focus-room.service";
import { RoomList } from "@/components/features/focus/room/RoomList";

/**
 * Browse Focus Rooms Page
 * Duy·ªát v√† t√¨m ki·∫øm ph√≤ng h·ªçc
 * Refactored: S·ª≠ d·ª•ng RoomList v√† RoomCard components
 */
export default function BrowseRoomsPage() {
  const [searchQuery, setSearchQuery] = useState("");
  const [roomTypeFilter, setRoomTypeFilter] = useState("all");
  const [rooms, setRooms] = useState<FocusRoom[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch rooms from API
  useEffect(() => {
    const fetchRooms = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const filters = {
          roomType: roomTypeFilter !== "all" ? roomTypeFilter : undefined,
          page: 1,
          pageSize: 20,
        };
        
        const result = await FocusRoomService.listRooms(filters);
        setRooms(result.rooms);
      } catch (err) {
        console.error("Failed to fetch rooms:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i sau.");
      } finally {
        setLoading(false);
      }
    };

    fetchRooms();
  }, [roomTypeFilter]);

  const filteredRooms = rooms.filter((room) => {
    const matchesSearch = room.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         room.description.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesSearch;
  });

  return (
    <div className="container mx-auto py-8 px-4 max-w-7xl">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold mb-2">üîç Duy·ªát Ph√≤ng H·ªçc</h1>
            <p className="text-muted-foreground">
              T√¨m v√† tham gia ph√≤ng h·ªçc ph√π h·ª£p v·ªõi b·∫°n
            </p>
          </div>
          <Link href="/focus-room/create">
            <Button>
              ‚ûï T·∫°o Ph√≤ng M·ªõi
            </Button>
          </Link>
        </div>

        {/* Filters */}
        <div className="flex gap-4 flex-wrap">
          <Input
            placeholder="üîé T√¨m ki·∫øm ph√≤ng..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="max-w-md"
          />
          
          <Select value={roomTypeFilter} onValueChange={setRoomTypeFilter}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Lo·∫°i ph√≤ng" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">T·∫•t c·∫£</SelectItem>
              <SelectItem value="public">C√¥ng khai</SelectItem>
              <SelectItem value="private">Ri√™ng t∆∞</SelectItem>
              <SelectItem value="class">L·ªõp h·ªçc</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Room List - Refactored to use RoomList component */}
      <RoomList
        rooms={filteredRooms}
        loading={loading}
        error={error}
        layout="grid"
        showCreateLink={true}
      />

      {/* Info Card */}
      {filteredRooms.length > 0 && (
        <Card className="mt-12">
          <CardHeader>
            <CardTitle>üí° M·∫πo S·ª≠ D·ª•ng</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="list-disc list-inside space-y-2 text-sm text-muted-foreground">
              <li>Ch·ªçn ph√≤ng c√≥ s·ªë ng∆∞·ªùi ph√π h·ª£p ƒë·ªÉ tr√°nh qu√° ƒë√¥ng ho·∫∑c qu√° v·∫Øng</li>
              <li>ƒê·ªçc m√¥ t·∫£ ph√≤ng ƒë·ªÉ hi·ªÉu m·ª•c ƒë√≠ch v√† quy t·∫Øc</li>
              <li>T√¥n tr·ªçng kh√¥ng gian y√™n tƒ©nh c·ªßa m·ªçi ng∆∞·ªùi</li>
              <li>S·ª≠ d·ª•ng chat ƒë·ªÉ giao ti·∫øp khi c·∫ßn thi·∫øt, nh∆∞ng ƒë·ª´ng spam</li>
            </ul>
          </CardContent>
        </Card>
      )}
    </div>
  );
}


