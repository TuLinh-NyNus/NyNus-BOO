/**
 * Question Types Constants
 * ƒê·ªãnh nghƒ©a 4 lo·∫°i c√¢u h·ªèi ch√≠nh
 * 
 * @author NyNus Development Team
 * @version 1.0.0
 * @created 2025-01-19
 */

import { ListChecks, SquareCheckBig, TextCursorInput, ScrollText } from 'lucide-react';

// ===== TYPES =====

/**
 * Question Type Data Interface
 * Complete question type information structure
 */
export interface QuestionTypeData {
  id: string;
  title: string;
  description: string;
  questionCount: number;
  icon: React.ComponentType<{ className?: string }>;
  /** CSS variable for accent color, e.g. 'var(--color-primary)' */
  accentVar: string;
  /** Optional legacy fields kept for compatibility (unused by new components) */
  color?: string;
  gradient?: string;
  emoji: string;
  keywords: string[];
}

/**
 * Question Type Filter Mapping
 * Mapping gi·ªØa type IDs v√† filter values
 */
export interface QuestionTypeMapping {
  [key: string]: string;
}

// ===== CONSTANTS =====

/**
 * Question Type Filter Mapping
 * Consistent mapping cho store integration
 */
export const QUESTION_TYPE_MAPPING: QuestionTypeMapping = {
  'multiple-choice': 'Tr·∫Øc nghi·ªám',
  'true-false': 'ƒê√∫ng sai',
  'short-answer': 'Tr·∫£ l·ªùi ng·∫Øn',
  'essay': 'T·ª± lu·∫≠n'
};

/**
 * Question Types Data
 * Complete type definitions v·ªõi enhanced information
 */
export const QUESTION_TYPES: QuestionTypeData[] = [
  {
    id: 'multiple-choice',
    title: 'C√¢u h·ªèi tr·∫Øc nghi·ªám',
    description: 'Ch·ªçn ƒë√°p √°n ƒë√∫ng t·ª´ c√°c l·ª±a ch·ªçn cho s·∫µn',
    questionCount: 3245,
    icon: ListChecks,
    accentVar: 'var(--color-primary)',
    emoji: '‚úÖ',
    keywords: ['tr·∫Øc nghi·ªám', 'l·ª±a ch·ªçn', 'ƒë√°p √°n', 'multiple choice', 'ABCD']
  },
  {
    id: 'true-false',
    title: 'C√¢u h·ªèi ƒë√∫ng sai',
    description: 'X√°c ƒë·ªãnh t√≠nh ƒë√∫ng sai c·ªßa m·ªánh ƒë·ªÅ',
    questionCount: 1567,
    icon: SquareCheckBig,
    accentVar: 'var(--color-success)',
    emoji: '‚úì‚úó',
    keywords: ['ƒë√∫ng sai', 'true false', 'm·ªánh ƒë·ªÅ', 'kh·∫≥ng ƒë·ªãnh', 'ph√°n ƒëo√°n']
  },
  {
    id: 'short-answer',
    title: 'C√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn',
    description: 'ƒêi·ªÅn ƒë√°p √°n ng·∫Øn g·ªçn, k·∫øt qu·∫£ s·ªë ho·∫∑c c√¥ng th·ª©c',
    questionCount: 1234,
    icon: TextCursorInput,
    accentVar: 'var(--color-accent)',
    emoji: 'üí¨',
    keywords: ['tr·∫£ l·ªùi ng·∫Øn', 'ƒëi·ªÅn ƒë√°p √°n', 'k·∫øt qu·∫£', 'short answer', 'ƒëi·ªÅn khuy·∫øt']
  },
  {
    id: 'essay',
    title: 'C√¢u h·ªèi t·ª± lu·∫≠n',
    description: 'Gi·∫£i chi ti·∫øt v·ªõi l·ªùi gi·∫£i ƒë·∫ßy ƒë·ªß',
    questionCount: 892,
    icon: ScrollText,
    accentVar: 'var(--color-secondary)',
    emoji: 'üìù',
    keywords: ['t·ª± lu·∫≠n', 'essay', 'gi·∫£i chi ti·∫øt', 'ch·ª©ng minh', 'l·ªùi gi·∫£i']
  }
];

// ===== UTILITY FUNCTIONS =====

/**
 * Get question type by ID
 * Retrieve type data by ID
 */
export function getQuestionTypeById(id: string): QuestionTypeData | undefined {
  return QUESTION_TYPES.find(type => type.id === id);
}

/**
 * Get question type filter value
 * Get filter value cho store integration
 */
export function getQuestionTypeFilterValue(id: string): string | undefined {
  return QUESTION_TYPE_MAPPING[id];
}

/**
 * Get all question type IDs
 * Get array of all type IDs
 */
export function getAllQuestionTypeIds(): string[] {
  return QUESTION_TYPES.map(type => type.id);
}

/**
 * Get question types by keyword
 * Search types by keywords
 */
export function getQuestionTypesByKeyword(keyword: string): QuestionTypeData[] {
  const lowerKeyword = keyword.toLowerCase();
  return QUESTION_TYPES.filter(type =>
    type.keywords.some(k => k.includes(lowerKeyword)) ||
    type.title.toLowerCase().includes(lowerKeyword) ||
    type.description.toLowerCase().includes(lowerKeyword)
  );
}

/**
 * Get total question count
 * Calculate total questions across all types
 */
export function getTotalQuestionCountByType(): number {
  return QUESTION_TYPES.reduce((total, type) => total + type.questionCount, 0);
}

// ===== EXPORTS =====

export default QUESTION_TYPES;