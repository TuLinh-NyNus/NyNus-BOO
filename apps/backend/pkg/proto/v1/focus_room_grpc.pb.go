// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: v1/focus_room.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FocusRoomService_CreateRoom_FullMethodName           = "/v1.FocusRoomService/CreateRoom"
	FocusRoomService_GetRoom_FullMethodName              = "/v1.FocusRoomService/GetRoom"
	FocusRoomService_ListRooms_FullMethodName            = "/v1.FocusRoomService/ListRooms"
	FocusRoomService_JoinRoom_FullMethodName             = "/v1.FocusRoomService/JoinRoom"
	FocusRoomService_LeaveRoom_FullMethodName            = "/v1.FocusRoomService/LeaveRoom"
	FocusRoomService_UpdateRoomSettings_FullMethodName   = "/v1.FocusRoomService/UpdateRoomSettings"
	FocusRoomService_StartFocusSession_FullMethodName    = "/v1.FocusRoomService/StartFocusSession"
	FocusRoomService_EndFocusSession_FullMethodName      = "/v1.FocusRoomService/EndFocusSession"
	FocusRoomService_PauseSession_FullMethodName         = "/v1.FocusRoomService/PauseSession"
	FocusRoomService_GetActiveSession_FullMethodName     = "/v1.FocusRoomService/GetActiveSession"
	FocusRoomService_GetUserStats_FullMethodName         = "/v1.FocusRoomService/GetUserStats"
	FocusRoomService_GetDailyStats_FullMethodName        = "/v1.FocusRoomService/GetDailyStats"
	FocusRoomService_GetWeeklyStats_FullMethodName       = "/v1.FocusRoomService/GetWeeklyStats"
	FocusRoomService_GetMonthlyStats_FullMethodName      = "/v1.FocusRoomService/GetMonthlyStats"
	FocusRoomService_GetStreak_FullMethodName            = "/v1.FocusRoomService/GetStreak"
	FocusRoomService_GetContributionGraph_FullMethodName = "/v1.FocusRoomService/GetContributionGraph"
	FocusRoomService_GetLeaderboard_FullMethodName       = "/v1.FocusRoomService/GetLeaderboard"
	FocusRoomService_GetUserRank_FullMethodName          = "/v1.FocusRoomService/GetUserRank"
	FocusRoomService_CreateTask_FullMethodName           = "/v1.FocusRoomService/CreateTask"
	FocusRoomService_UpdateTask_FullMethodName           = "/v1.FocusRoomService/UpdateTask"
	FocusRoomService_DeleteTask_FullMethodName           = "/v1.FocusRoomService/DeleteTask"
	FocusRoomService_ListTasks_FullMethodName            = "/v1.FocusRoomService/ListTasks"
	FocusRoomService_CompleteTask_FullMethodName         = "/v1.FocusRoomService/CompleteTask"
	FocusRoomService_GetAchievements_FullMethodName      = "/v1.FocusRoomService/GetAchievements"
)

// FocusRoomServiceClient is the client API for FocusRoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FocusRoomServiceClient interface {
	// ===== Room Management =====
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*Room, error)
	ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRoomSettings(ctx context.Context, in *UpdateRoomSettingsRequest, opts ...grpc.CallOption) (*Room, error)
	// ===== Session Management =====
	StartFocusSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*FocusSession, error)
	EndFocusSession(ctx context.Context, in *EndSessionRequest, opts ...grpc.CallOption) (*SessionStats, error)
	PauseSession(ctx context.Context, in *PauseSessionRequest, opts ...grpc.CallOption) (*FocusSession, error)
	GetActiveSession(ctx context.Context, in *GetActiveSessionRequest, opts ...grpc.CallOption) (*FocusSession, error)
	// ===== Analytics =====
	GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*UserStats, error)
	GetDailyStats(ctx context.Context, in *GetDailyStatsRequest, opts ...grpc.CallOption) (*DailyStatsResponse, error)
	GetWeeklyStats(ctx context.Context, in *GetWeeklyStatsRequest, opts ...grpc.CallOption) (*WeeklyStatsResponse, error)
	GetMonthlyStats(ctx context.Context, in *GetMonthlyStatsRequest, opts ...grpc.CallOption) (*MonthlyStatsResponse, error)
	GetStreak(ctx context.Context, in *GetStreakRequest, opts ...grpc.CallOption) (*StreakInfo, error)
	GetContributionGraph(ctx context.Context, in *GetContributionGraphRequest, opts ...grpc.CallOption) (*GetContributionGraphResponse, error)
	// ===== Leaderboard =====
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error)
	GetUserRank(ctx context.Context, in *GetUserRankRequest, opts ...grpc.CallOption) (*UserRankResponse, error)
	// ===== Tasks =====
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*Task, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	CompleteTask(ctx context.Context, in *CompleteTaskRequest, opts ...grpc.CallOption) (*Task, error)
	// ===== Achievements =====
	GetAchievements(ctx context.Context, in *GetAchievementsRequest, opts ...grpc.CallOption) (*GetAchievementsResponse, error)
}

type focusRoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFocusRoomServiceClient(cc grpc.ClientConnInterface) FocusRoomServiceClient {
	return &focusRoomServiceClient{cc}
}

func (c *focusRoomServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Room)
	err := c.cc.Invoke(ctx, FocusRoomService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Room)
	err := c.cc.Invoke(ctx, FocusRoomService_GetRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, FocusRoomService_ListRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, FocusRoomService_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FocusRoomService_LeaveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) UpdateRoomSettings(ctx context.Context, in *UpdateRoomSettingsRequest, opts ...grpc.CallOption) (*Room, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Room)
	err := c.cc.Invoke(ctx, FocusRoomService_UpdateRoomSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) StartFocusSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*FocusSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FocusSession)
	err := c.cc.Invoke(ctx, FocusRoomService_StartFocusSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) EndFocusSession(ctx context.Context, in *EndSessionRequest, opts ...grpc.CallOption) (*SessionStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionStats)
	err := c.cc.Invoke(ctx, FocusRoomService_EndFocusSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) PauseSession(ctx context.Context, in *PauseSessionRequest, opts ...grpc.CallOption) (*FocusSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FocusSession)
	err := c.cc.Invoke(ctx, FocusRoomService_PauseSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetActiveSession(ctx context.Context, in *GetActiveSessionRequest, opts ...grpc.CallOption) (*FocusSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FocusSession)
	err := c.cc.Invoke(ctx, FocusRoomService_GetActiveSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*UserStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStats)
	err := c.cc.Invoke(ctx, FocusRoomService_GetUserStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetDailyStats(ctx context.Context, in *GetDailyStatsRequest, opts ...grpc.CallOption) (*DailyStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyStatsResponse)
	err := c.cc.Invoke(ctx, FocusRoomService_GetDailyStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetWeeklyStats(ctx context.Context, in *GetWeeklyStatsRequest, opts ...grpc.CallOption) (*WeeklyStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeeklyStatsResponse)
	err := c.cc.Invoke(ctx, FocusRoomService_GetWeeklyStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetMonthlyStats(ctx context.Context, in *GetMonthlyStatsRequest, opts ...grpc.CallOption) (*MonthlyStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonthlyStatsResponse)
	err := c.cc.Invoke(ctx, FocusRoomService_GetMonthlyStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetStreak(ctx context.Context, in *GetStreakRequest, opts ...grpc.CallOption) (*StreakInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreakInfo)
	err := c.cc.Invoke(ctx, FocusRoomService_GetStreak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetContributionGraph(ctx context.Context, in *GetContributionGraphRequest, opts ...grpc.CallOption) (*GetContributionGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContributionGraphResponse)
	err := c.cc.Invoke(ctx, FocusRoomService_GetContributionGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaderboardResponse)
	err := c.cc.Invoke(ctx, FocusRoomService_GetLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetUserRank(ctx context.Context, in *GetUserRankRequest, opts ...grpc.CallOption) (*UserRankResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRankResponse)
	err := c.cc.Invoke(ctx, FocusRoomService_GetUserRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, FocusRoomService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, FocusRoomService_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FocusRoomService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, FocusRoomService_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) CompleteTask(ctx context.Context, in *CompleteTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, FocusRoomService_CompleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *focusRoomServiceClient) GetAchievements(ctx context.Context, in *GetAchievementsRequest, opts ...grpc.CallOption) (*GetAchievementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAchievementsResponse)
	err := c.cc.Invoke(ctx, FocusRoomService_GetAchievements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FocusRoomServiceServer is the server API for FocusRoomService service.
// All implementations must embed UnimplementedFocusRoomServiceServer
// for forward compatibility.
type FocusRoomServiceServer interface {
	// ===== Room Management =====
	CreateRoom(context.Context, *CreateRoomRequest) (*Room, error)
	GetRoom(context.Context, *GetRoomRequest) (*Room, error)
	ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	LeaveRoom(context.Context, *LeaveRoomRequest) (*emptypb.Empty, error)
	UpdateRoomSettings(context.Context, *UpdateRoomSettingsRequest) (*Room, error)
	// ===== Session Management =====
	StartFocusSession(context.Context, *StartSessionRequest) (*FocusSession, error)
	EndFocusSession(context.Context, *EndSessionRequest) (*SessionStats, error)
	PauseSession(context.Context, *PauseSessionRequest) (*FocusSession, error)
	GetActiveSession(context.Context, *GetActiveSessionRequest) (*FocusSession, error)
	// ===== Analytics =====
	GetUserStats(context.Context, *GetUserStatsRequest) (*UserStats, error)
	GetDailyStats(context.Context, *GetDailyStatsRequest) (*DailyStatsResponse, error)
	GetWeeklyStats(context.Context, *GetWeeklyStatsRequest) (*WeeklyStatsResponse, error)
	GetMonthlyStats(context.Context, *GetMonthlyStatsRequest) (*MonthlyStatsResponse, error)
	GetStreak(context.Context, *GetStreakRequest) (*StreakInfo, error)
	GetContributionGraph(context.Context, *GetContributionGraphRequest) (*GetContributionGraphResponse, error)
	// ===== Leaderboard =====
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*LeaderboardResponse, error)
	GetUserRank(context.Context, *GetUserRankRequest) (*UserRankResponse, error)
	// ===== Tasks =====
	CreateTask(context.Context, *CreateTaskRequest) (*Task, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*Task, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error)
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	CompleteTask(context.Context, *CompleteTaskRequest) (*Task, error)
	// ===== Achievements =====
	GetAchievements(context.Context, *GetAchievementsRequest) (*GetAchievementsResponse, error)
	mustEmbedUnimplementedFocusRoomServiceServer()
}

// UnimplementedFocusRoomServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFocusRoomServiceServer struct{}

func (UnimplementedFocusRoomServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetRoom(context.Context, *GetRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedFocusRoomServiceServer) ListRooms(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRooms not implemented")
}
func (UnimplementedFocusRoomServiceServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedFocusRoomServiceServer) LeaveRoom(context.Context, *LeaveRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedFocusRoomServiceServer) UpdateRoomSettings(context.Context, *UpdateRoomSettingsRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoomSettings not implemented")
}
func (UnimplementedFocusRoomServiceServer) StartFocusSession(context.Context, *StartSessionRequest) (*FocusSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFocusSession not implemented")
}
func (UnimplementedFocusRoomServiceServer) EndFocusSession(context.Context, *EndSessionRequest) (*SessionStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndFocusSession not implemented")
}
func (UnimplementedFocusRoomServiceServer) PauseSession(context.Context, *PauseSessionRequest) (*FocusSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSession not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetActiveSession(context.Context, *GetActiveSessionRequest) (*FocusSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSession not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetUserStats(context.Context, *GetUserStatsRequest) (*UserStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetDailyStats(context.Context, *GetDailyStatsRequest) (*DailyStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyStats not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetWeeklyStats(context.Context, *GetWeeklyStatsRequest) (*WeeklyStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyStats not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetMonthlyStats(context.Context, *GetMonthlyStatsRequest) (*MonthlyStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyStats not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetStreak(context.Context, *GetStreakRequest) (*StreakInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreak not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetContributionGraph(context.Context, *GetContributionGraphRequest) (*GetContributionGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContributionGraph not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetLeaderboard(context.Context, *GetLeaderboardRequest) (*LeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetUserRank(context.Context, *GetUserRankRequest) (*UserRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRank not implemented")
}
func (UnimplementedFocusRoomServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedFocusRoomServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedFocusRoomServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedFocusRoomServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedFocusRoomServiceServer) CompleteTask(context.Context, *CompleteTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}
func (UnimplementedFocusRoomServiceServer) GetAchievements(context.Context, *GetAchievementsRequest) (*GetAchievementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievements not implemented")
}
func (UnimplementedFocusRoomServiceServer) mustEmbedUnimplementedFocusRoomServiceServer() {}
func (UnimplementedFocusRoomServiceServer) testEmbeddedByValue()                          {}

// UnsafeFocusRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FocusRoomServiceServer will
// result in compilation errors.
type UnsafeFocusRoomServiceServer interface {
	mustEmbedUnimplementedFocusRoomServiceServer()
}

func RegisterFocusRoomServiceServer(s grpc.ServiceRegistrar, srv FocusRoomServiceServer) {
	// If the following call pancis, it indicates UnimplementedFocusRoomServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FocusRoomService_ServiceDesc, srv)
}

func _FocusRoomService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_ListRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).ListRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_ListRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).ListRooms(ctx, req.(*ListRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).LeaveRoom(ctx, req.(*LeaveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_UpdateRoomSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).UpdateRoomSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_UpdateRoomSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).UpdateRoomSettings(ctx, req.(*UpdateRoomSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_StartFocusSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).StartFocusSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_StartFocusSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).StartFocusSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_EndFocusSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).EndFocusSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_EndFocusSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).EndFocusSession(ctx, req.(*EndSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_PauseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).PauseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_PauseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).PauseSession(ctx, req.(*PauseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetActiveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetActiveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetActiveSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetActiveSession(ctx, req.(*GetActiveSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetUserStats(ctx, req.(*GetUserStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetDailyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetDailyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetDailyStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetDailyStats(ctx, req.(*GetDailyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetWeeklyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeeklyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetWeeklyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetWeeklyStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetWeeklyStats(ctx, req.(*GetWeeklyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetMonthlyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetMonthlyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetMonthlyStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetMonthlyStats(ctx, req.(*GetMonthlyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetStreak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetStreak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetStreak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetStreak(ctx, req.(*GetStreakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetContributionGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContributionGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetContributionGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetContributionGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetContributionGraph(ctx, req.(*GetContributionGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetUserRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetUserRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetUserRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetUserRank(ctx, req.(*GetUserRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_CompleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).CompleteTask(ctx, req.(*CompleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FocusRoomService_GetAchievements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAchievementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FocusRoomServiceServer).GetAchievements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FocusRoomService_GetAchievements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FocusRoomServiceServer).GetAchievements(ctx, req.(*GetAchievementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FocusRoomService_ServiceDesc is the grpc.ServiceDesc for FocusRoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FocusRoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FocusRoomService",
	HandlerType: (*FocusRoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _FocusRoomService_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _FocusRoomService_GetRoom_Handler,
		},
		{
			MethodName: "ListRooms",
			Handler:    _FocusRoomService_ListRooms_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _FocusRoomService_JoinRoom_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _FocusRoomService_LeaveRoom_Handler,
		},
		{
			MethodName: "UpdateRoomSettings",
			Handler:    _FocusRoomService_UpdateRoomSettings_Handler,
		},
		{
			MethodName: "StartFocusSession",
			Handler:    _FocusRoomService_StartFocusSession_Handler,
		},
		{
			MethodName: "EndFocusSession",
			Handler:    _FocusRoomService_EndFocusSession_Handler,
		},
		{
			MethodName: "PauseSession",
			Handler:    _FocusRoomService_PauseSession_Handler,
		},
		{
			MethodName: "GetActiveSession",
			Handler:    _FocusRoomService_GetActiveSession_Handler,
		},
		{
			MethodName: "GetUserStats",
			Handler:    _FocusRoomService_GetUserStats_Handler,
		},
		{
			MethodName: "GetDailyStats",
			Handler:    _FocusRoomService_GetDailyStats_Handler,
		},
		{
			MethodName: "GetWeeklyStats",
			Handler:    _FocusRoomService_GetWeeklyStats_Handler,
		},
		{
			MethodName: "GetMonthlyStats",
			Handler:    _FocusRoomService_GetMonthlyStats_Handler,
		},
		{
			MethodName: "GetStreak",
			Handler:    _FocusRoomService_GetStreak_Handler,
		},
		{
			MethodName: "GetContributionGraph",
			Handler:    _FocusRoomService_GetContributionGraph_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _FocusRoomService_GetLeaderboard_Handler,
		},
		{
			MethodName: "GetUserRank",
			Handler:    _FocusRoomService_GetUserRank_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _FocusRoomService_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _FocusRoomService_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _FocusRoomService_DeleteTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _FocusRoomService_ListTasks_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _FocusRoomService_CompleteTask_Handler,
		},
		{
			MethodName: "GetAchievements",
			Handler:    _FocusRoomService_GetAchievements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/focus_room.proto",
}
