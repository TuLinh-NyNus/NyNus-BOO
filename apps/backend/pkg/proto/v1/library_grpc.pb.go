// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/library.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LibraryService_ListItems_FullMethodName            = "/v1.LibraryService/ListItems"
	LibraryService_GetItem_FullMethodName              = "/v1.LibraryService/GetItem"
	LibraryService_CreateItem_FullMethodName           = "/v1.LibraryService/CreateItem"
	LibraryService_UpdateItem_FullMethodName           = "/v1.LibraryService/UpdateItem"
	LibraryService_ApproveItem_FullMethodName          = "/v1.LibraryService/ApproveItem"
	LibraryService_RateItem_FullMethodName             = "/v1.LibraryService/RateItem"
	LibraryService_BookmarkItem_FullMethodName         = "/v1.LibraryService/BookmarkItem"
	LibraryService_DownloadItem_FullMethodName         = "/v1.LibraryService/DownloadItem"
	LibraryService_SearchItems_FullMethodName          = "/v1.LibraryService/SearchItems"
	LibraryService_CreateTag_FullMethodName            = "/v1.LibraryService/CreateTag"
	LibraryService_GetTag_FullMethodName               = "/v1.LibraryService/GetTag"
	LibraryService_ListTags_FullMethodName             = "/v1.LibraryService/ListTags"
	LibraryService_UpdateTag_FullMethodName            = "/v1.LibraryService/UpdateTag"
	LibraryService_DeleteTag_FullMethodName            = "/v1.LibraryService/DeleteTag"
	LibraryService_GetPopularTags_FullMethodName       = "/v1.LibraryService/GetPopularTags"
	LibraryService_GetAnalytics_FullMethodName         = "/v1.LibraryService/GetAnalytics"
	LibraryService_GetTopDownloaded_FullMethodName     = "/v1.LibraryService/GetTopDownloaded"
	LibraryService_GetTopRated_FullMethodName          = "/v1.LibraryService/GetTopRated"
	LibraryService_GetSearchSuggestions_FullMethodName = "/v1.LibraryService/GetSearchSuggestions"
)

// LibraryServiceClient is the client API for LibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service orchestrating library operations.
type LibraryServiceClient interface {
	ListItems(ctx context.Context, in *ListLibraryItemsRequest, opts ...grpc.CallOption) (*ListLibraryItemsResponse, error)
	GetItem(ctx context.Context, in *GetLibraryItemRequest, opts ...grpc.CallOption) (*GetLibraryItemResponse, error)
	CreateItem(ctx context.Context, in *CreateLibraryItemRequest, opts ...grpc.CallOption) (*CreateLibraryItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateLibraryItemRequest, opts ...grpc.CallOption) (*UpdateLibraryItemResponse, error)
	ApproveItem(ctx context.Context, in *ApproveLibraryItemRequest, opts ...grpc.CallOption) (*ApproveLibraryItemResponse, error)
	RateItem(ctx context.Context, in *RateLibraryItemRequest, opts ...grpc.CallOption) (*RateLibraryItemResponse, error)
	BookmarkItem(ctx context.Context, in *BookmarkLibraryItemRequest, opts ...grpc.CallOption) (*BookmarkLibraryItemResponse, error)
	DownloadItem(ctx context.Context, in *DownloadLibraryItemRequest, opts ...grpc.CallOption) (*DownloadLibraryItemResponse, error)
	SearchItems(ctx context.Context, in *SearchLibraryItemsRequest, opts ...grpc.CallOption) (*SearchLibraryItemsResponse, error)
	// Tags Management
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
	GetPopularTags(ctx context.Context, in *GetPopularTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	// Analytics
	GetAnalytics(ctx context.Context, in *GetAnalyticsRequest, opts ...grpc.CallOption) (*AnalyticsResponse, error)
	GetTopDownloaded(ctx context.Context, in *GetTopItemsRequest, opts ...grpc.CallOption) (*TopItemsResponse, error)
	GetTopRated(ctx context.Context, in *GetTopItemsRequest, opts ...grpc.CallOption) (*TopItemsResponse, error)
	// Search Suggestions
	GetSearchSuggestions(ctx context.Context, in *SearchSuggestionsRequest, opts ...grpc.CallOption) (*SearchSuggestionsResponse, error)
}

type libraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryServiceClient(cc grpc.ClientConnInterface) LibraryServiceClient {
	return &libraryServiceClient{cc}
}

func (c *libraryServiceClient) ListItems(ctx context.Context, in *ListLibraryItemsRequest, opts ...grpc.CallOption) (*ListLibraryItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLibraryItemsResponse)
	err := c.cc.Invoke(ctx, LibraryService_ListItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetItem(ctx context.Context, in *GetLibraryItemRequest, opts ...grpc.CallOption) (*GetLibraryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLibraryItemResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) CreateItem(ctx context.Context, in *CreateLibraryItemRequest, opts ...grpc.CallOption) (*CreateLibraryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLibraryItemResponse)
	err := c.cc.Invoke(ctx, LibraryService_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) UpdateItem(ctx context.Context, in *UpdateLibraryItemRequest, opts ...grpc.CallOption) (*UpdateLibraryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLibraryItemResponse)
	err := c.cc.Invoke(ctx, LibraryService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) ApproveItem(ctx context.Context, in *ApproveLibraryItemRequest, opts ...grpc.CallOption) (*ApproveLibraryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveLibraryItemResponse)
	err := c.cc.Invoke(ctx, LibraryService_ApproveItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) RateItem(ctx context.Context, in *RateLibraryItemRequest, opts ...grpc.CallOption) (*RateLibraryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RateLibraryItemResponse)
	err := c.cc.Invoke(ctx, LibraryService_RateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) BookmarkItem(ctx context.Context, in *BookmarkLibraryItemRequest, opts ...grpc.CallOption) (*BookmarkLibraryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookmarkLibraryItemResponse)
	err := c.cc.Invoke(ctx, LibraryService_BookmarkItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) DownloadItem(ctx context.Context, in *DownloadLibraryItemRequest, opts ...grpc.CallOption) (*DownloadLibraryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadLibraryItemResponse)
	err := c.cc.Invoke(ctx, LibraryService_DownloadItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) SearchItems(ctx context.Context, in *SearchLibraryItemsRequest, opts ...grpc.CallOption) (*SearchLibraryItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchLibraryItemsResponse)
	err := c.cc.Invoke(ctx, LibraryService_SearchItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, LibraryService_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, LibraryService_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, LibraryService_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, LibraryService_DeleteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetPopularTags(ctx context.Context, in *GetPopularTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetPopularTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetAnalytics(ctx context.Context, in *GetAnalyticsRequest, opts ...grpc.CallOption) (*AnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyticsResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetTopDownloaded(ctx context.Context, in *GetTopItemsRequest, opts ...grpc.CallOption) (*TopItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopItemsResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetTopDownloaded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetTopRated(ctx context.Context, in *GetTopItemsRequest, opts ...grpc.CallOption) (*TopItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopItemsResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetTopRated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryServiceClient) GetSearchSuggestions(ctx context.Context, in *SearchSuggestionsRequest, opts ...grpc.CallOption) (*SearchSuggestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSuggestionsResponse)
	err := c.cc.Invoke(ctx, LibraryService_GetSearchSuggestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibraryServiceServer is the server API for LibraryService service.
// All implementations should embed UnimplementedLibraryServiceServer
// for forward compatibility.
//
// Service orchestrating library operations.
type LibraryServiceServer interface {
	ListItems(context.Context, *ListLibraryItemsRequest) (*ListLibraryItemsResponse, error)
	GetItem(context.Context, *GetLibraryItemRequest) (*GetLibraryItemResponse, error)
	CreateItem(context.Context, *CreateLibraryItemRequest) (*CreateLibraryItemResponse, error)
	UpdateItem(context.Context, *UpdateLibraryItemRequest) (*UpdateLibraryItemResponse, error)
	ApproveItem(context.Context, *ApproveLibraryItemRequest) (*ApproveLibraryItemResponse, error)
	RateItem(context.Context, *RateLibraryItemRequest) (*RateLibraryItemResponse, error)
	BookmarkItem(context.Context, *BookmarkLibraryItemRequest) (*BookmarkLibraryItemResponse, error)
	DownloadItem(context.Context, *DownloadLibraryItemRequest) (*DownloadLibraryItemResponse, error)
	SearchItems(context.Context, *SearchLibraryItemsRequest) (*SearchLibraryItemsResponse, error)
	// Tags Management
	CreateTag(context.Context, *CreateTagRequest) (*TagResponse, error)
	GetTag(context.Context, *GetTagRequest) (*TagResponse, error)
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*TagResponse, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
	GetPopularTags(context.Context, *GetPopularTagsRequest) (*ListTagsResponse, error)
	// Analytics
	GetAnalytics(context.Context, *GetAnalyticsRequest) (*AnalyticsResponse, error)
	GetTopDownloaded(context.Context, *GetTopItemsRequest) (*TopItemsResponse, error)
	GetTopRated(context.Context, *GetTopItemsRequest) (*TopItemsResponse, error)
	// Search Suggestions
	GetSearchSuggestions(context.Context, *SearchSuggestionsRequest) (*SearchSuggestionsResponse, error)
}

// UnimplementedLibraryServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLibraryServiceServer struct{}

func (UnimplementedLibraryServiceServer) ListItems(context.Context, *ListLibraryItemsRequest) (*ListLibraryItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedLibraryServiceServer) GetItem(context.Context, *GetLibraryItemRequest) (*GetLibraryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedLibraryServiceServer) CreateItem(context.Context, *CreateLibraryItemRequest) (*CreateLibraryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedLibraryServiceServer) UpdateItem(context.Context, *UpdateLibraryItemRequest) (*UpdateLibraryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedLibraryServiceServer) ApproveItem(context.Context, *ApproveLibraryItemRequest) (*ApproveLibraryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveItem not implemented")
}
func (UnimplementedLibraryServiceServer) RateItem(context.Context, *RateLibraryItemRequest) (*RateLibraryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateItem not implemented")
}
func (UnimplementedLibraryServiceServer) BookmarkItem(context.Context, *BookmarkLibraryItemRequest) (*BookmarkLibraryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkItem not implemented")
}
func (UnimplementedLibraryServiceServer) DownloadItem(context.Context, *DownloadLibraryItemRequest) (*DownloadLibraryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadItem not implemented")
}
func (UnimplementedLibraryServiceServer) SearchItems(context.Context, *SearchLibraryItemsRequest) (*SearchLibraryItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItems not implemented")
}
func (UnimplementedLibraryServiceServer) CreateTag(context.Context, *CreateTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedLibraryServiceServer) GetTag(context.Context, *GetTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedLibraryServiceServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedLibraryServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedLibraryServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedLibraryServiceServer) GetPopularTags(context.Context, *GetPopularTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularTags not implemented")
}
func (UnimplementedLibraryServiceServer) GetAnalytics(context.Context, *GetAnalyticsRequest) (*AnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalytics not implemented")
}
func (UnimplementedLibraryServiceServer) GetTopDownloaded(context.Context, *GetTopItemsRequest) (*TopItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopDownloaded not implemented")
}
func (UnimplementedLibraryServiceServer) GetTopRated(context.Context, *GetTopItemsRequest) (*TopItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopRated not implemented")
}
func (UnimplementedLibraryServiceServer) GetSearchSuggestions(context.Context, *SearchSuggestionsRequest) (*SearchSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchSuggestions not implemented")
}
func (UnimplementedLibraryServiceServer) testEmbeddedByValue() {}

// UnsafeLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServiceServer will
// result in compilation errors.
type UnsafeLibraryServiceServer interface {
	mustEmbedUnimplementedLibraryServiceServer()
}

func RegisterLibraryServiceServer(s grpc.ServiceRegistrar, srv LibraryServiceServer) {
	// If the following call pancis, it indicates UnimplementedLibraryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LibraryService_ServiceDesc, srv)
}

func _LibraryService_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLibraryItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).ListItems(ctx, req.(*ListLibraryItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLibraryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetItem(ctx, req.(*GetLibraryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLibraryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).CreateItem(ctx, req.(*CreateLibraryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLibraryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).UpdateItem(ctx, req.(*UpdateLibraryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_ApproveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLibraryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).ApproveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_ApproveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).ApproveItem(ctx, req.(*ApproveLibraryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_RateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLibraryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).RateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_RateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).RateItem(ctx, req.(*RateLibraryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_BookmarkItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkLibraryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).BookmarkItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_BookmarkItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).BookmarkItem(ctx, req.(*BookmarkLibraryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_DownloadItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadLibraryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).DownloadItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_DownloadItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).DownloadItem(ctx, req.(*DownloadLibraryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_SearchItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLibraryItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).SearchItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_SearchItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).SearchItems(ctx, req.(*SearchLibraryItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetPopularTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPopularTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetPopularTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetPopularTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetPopularTags(ctx, req.(*GetPopularTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetAnalytics(ctx, req.(*GetAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetTopDownloaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetTopDownloaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetTopDownloaded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetTopDownloaded(ctx, req.(*GetTopItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetTopRated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetTopRated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetTopRated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetTopRated(ctx, req.(*GetTopItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibraryService_GetSearchSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServiceServer).GetSearchSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibraryService_GetSearchSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServiceServer).GetSearchSuggestions(ctx, req.(*SearchSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibraryService_ServiceDesc is the grpc.ServiceDesc for LibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.LibraryService",
	HandlerType: (*LibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListItems",
			Handler:    _LibraryService_ListItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _LibraryService_GetItem_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _LibraryService_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _LibraryService_UpdateItem_Handler,
		},
		{
			MethodName: "ApproveItem",
			Handler:    _LibraryService_ApproveItem_Handler,
		},
		{
			MethodName: "RateItem",
			Handler:    _LibraryService_RateItem_Handler,
		},
		{
			MethodName: "BookmarkItem",
			Handler:    _LibraryService_BookmarkItem_Handler,
		},
		{
			MethodName: "DownloadItem",
			Handler:    _LibraryService_DownloadItem_Handler,
		},
		{
			MethodName: "SearchItems",
			Handler:    _LibraryService_SearchItems_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _LibraryService_CreateTag_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _LibraryService_GetTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _LibraryService_ListTags_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _LibraryService_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _LibraryService_DeleteTag_Handler,
		},
		{
			MethodName: "GetPopularTags",
			Handler:    _LibraryService_GetPopularTags_Handler,
		},
		{
			MethodName: "GetAnalytics",
			Handler:    _LibraryService_GetAnalytics_Handler,
		},
		{
			MethodName: "GetTopDownloaded",
			Handler:    _LibraryService_GetTopDownloaded_Handler,
		},
		{
			MethodName: "GetTopRated",
			Handler:    _LibraryService_GetTopRated_Handler,
		},
		{
			MethodName: "GetSearchSuggestions",
			Handler:    _LibraryService_GetSearchSuggestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/library.proto",
}
