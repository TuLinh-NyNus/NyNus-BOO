// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: v1/exam.proto

package v1

import (
	common "exam-bank-system/apps/backend/pkg/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Exam status enum (aligned with ExamSystem.md design)
type ExamStatus int32

const (
	ExamStatus_EXAM_STATUS_UNSPECIFIED ExamStatus = 0
	ExamStatus_EXAM_STATUS_ACTIVE      ExamStatus = 1 // ÄÃ£ xuáº¥t báº£n, students cÃ³ thá»ƒ lÃ m
	ExamStatus_EXAM_STATUS_PENDING     ExamStatus = 2 // Äang soáº¡n tháº£o, chá» review
	ExamStatus_EXAM_STATUS_INACTIVE    ExamStatus = 3 // Táº¡m ngÆ°ng
	ExamStatus_EXAM_STATUS_ARCHIVED    ExamStatus = 4 // ÄÃ£ lÆ°u trá»¯
)

// Enum value maps for ExamStatus.
var (
	ExamStatus_name = map[int32]string{
		0: "EXAM_STATUS_UNSPECIFIED",
		1: "EXAM_STATUS_ACTIVE",
		2: "EXAM_STATUS_PENDING",
		3: "EXAM_STATUS_INACTIVE",
		4: "EXAM_STATUS_ARCHIVED",
	}
	ExamStatus_value = map[string]int32{
		"EXAM_STATUS_UNSPECIFIED": 0,
		"EXAM_STATUS_ACTIVE":      1,
		"EXAM_STATUS_PENDING":     2,
		"EXAM_STATUS_INACTIVE":    3,
		"EXAM_STATUS_ARCHIVED":    4,
	}
)

func (x ExamStatus) Enum() *ExamStatus {
	p := new(ExamStatus)
	*p = x
	return p
}

func (x ExamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_exam_proto_enumTypes[0].Descriptor()
}

func (ExamStatus) Type() protoreflect.EnumType {
	return &file_v1_exam_proto_enumTypes[0]
}

func (x ExamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamStatus.Descriptor instead.
func (ExamStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{0}
}

// Exam type enum (aligned with ExamSystem.md design)
type ExamType int32

const (
	ExamType_EXAM_TYPE_UNSPECIFIED ExamType = 0
	ExamType_EXAM_TYPE_GENERATED   ExamType = 1 // Äá» thi táº¡o tá»« ngÃ¢n hÃ ng cÃ¢u há»i
	ExamType_EXAM_TYPE_OFFICIAL    ExamType = 2 // Äá» thi tháº­t tá»« trÆ°á»ng/sá»Ÿ
)

// Enum value maps for ExamType.
var (
	ExamType_name = map[int32]string{
		0: "EXAM_TYPE_UNSPECIFIED",
		1: "EXAM_TYPE_GENERATED",
		2: "EXAM_TYPE_OFFICIAL",
	}
	ExamType_value = map[string]int32{
		"EXAM_TYPE_UNSPECIFIED": 0,
		"EXAM_TYPE_GENERATED":   1,
		"EXAM_TYPE_OFFICIAL":    2,
	}
)

func (x ExamType) Enum() *ExamType {
	p := new(ExamType)
	*p = x
	return p
}

func (x ExamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_exam_proto_enumTypes[1].Descriptor()
}

func (ExamType) Type() protoreflect.EnumType {
	return &file_v1_exam_proto_enumTypes[1]
}

func (x ExamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamType.Descriptor instead.
func (ExamType) EnumDescriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{1}
}

// Difficulty enum (aligned with Question system)
type Difficulty int32

const (
	Difficulty_DIFFICULTY_UNSPECIFIED Difficulty = 0
	Difficulty_DIFFICULTY_EASY        Difficulty = 1 // Dá»…
	Difficulty_DIFFICULTY_MEDIUM      Difficulty = 2 // Trung bÃ¬nh
	Difficulty_DIFFICULTY_HARD        Difficulty = 3 // KhÃ³
	Difficulty_DIFFICULTY_EXPERT      Difficulty = 4 // Ráº¥t khÃ³
)

// Enum value maps for Difficulty.
var (
	Difficulty_name = map[int32]string{
		0: "DIFFICULTY_UNSPECIFIED",
		1: "DIFFICULTY_EASY",
		2: "DIFFICULTY_MEDIUM",
		3: "DIFFICULTY_HARD",
		4: "DIFFICULTY_EXPERT",
	}
	Difficulty_value = map[string]int32{
		"DIFFICULTY_UNSPECIFIED": 0,
		"DIFFICULTY_EASY":        1,
		"DIFFICULTY_MEDIUM":      2,
		"DIFFICULTY_HARD":        3,
		"DIFFICULTY_EXPERT":      4,
	}
)

func (x Difficulty) Enum() *Difficulty {
	p := new(Difficulty)
	*p = x
	return p
}

func (x Difficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Difficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_exam_proto_enumTypes[2].Descriptor()
}

func (Difficulty) Type() protoreflect.EnumType {
	return &file_v1_exam_proto_enumTypes[2]
}

func (x Difficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Difficulty.Descriptor instead.
func (Difficulty) EnumDescriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{2}
}

// Attempt status enum
type AttemptStatus int32

const (
	AttemptStatus_ATTEMPT_STATUS_UNSPECIFIED AttemptStatus = 0
	AttemptStatus_ATTEMPT_STATUS_IN_PROGRESS AttemptStatus = 1 // Äang lÃ m bÃ i
	AttemptStatus_ATTEMPT_STATUS_SUBMITTED   AttemptStatus = 2 // ÄÃ£ ná»™p bÃ i
	AttemptStatus_ATTEMPT_STATUS_GRADED      AttemptStatus = 3 // ÄÃ£ cháº¥m Ä‘iá»ƒm
	AttemptStatus_ATTEMPT_STATUS_CANCELLED   AttemptStatus = 4 // ÄÃ£ há»§y
)

// Enum value maps for AttemptStatus.
var (
	AttemptStatus_name = map[int32]string{
		0: "ATTEMPT_STATUS_UNSPECIFIED",
		1: "ATTEMPT_STATUS_IN_PROGRESS",
		2: "ATTEMPT_STATUS_SUBMITTED",
		3: "ATTEMPT_STATUS_GRADED",
		4: "ATTEMPT_STATUS_CANCELLED",
	}
	AttemptStatus_value = map[string]int32{
		"ATTEMPT_STATUS_UNSPECIFIED": 0,
		"ATTEMPT_STATUS_IN_PROGRESS": 1,
		"ATTEMPT_STATUS_SUBMITTED":   2,
		"ATTEMPT_STATUS_GRADED":      3,
		"ATTEMPT_STATUS_CANCELLED":   4,
	}
)

func (x AttemptStatus) Enum() *AttemptStatus {
	p := new(AttemptStatus)
	*p = x
	return p
}

func (x AttemptStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttemptStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_exam_proto_enumTypes[3].Descriptor()
}

func (AttemptStatus) Type() protoreflect.EnumType {
	return &file_v1_exam_proto_enumTypes[3]
}

func (x AttemptStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttemptStatus.Descriptor instead.
func (AttemptStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{3}
}

// Exam message (updated with proper enums and fields)
type Exam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Instructions    string     `protobuf:"bytes,4,opt,name=instructions,proto3" json:"instructions,omitempty"`
	DurationMinutes int32      `protobuf:"varint,5,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"`
	TotalPoints     int32      `protobuf:"varint,6,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	PassPercentage  int32      `protobuf:"varint,7,opt,name=pass_percentage,json=passPercentage,proto3" json:"pass_percentage,omitempty"`
	ExamType        ExamType   `protobuf:"varint,8,opt,name=exam_type,json=examType,proto3,enum=v1.ExamType" json:"exam_type,omitempty"`
	Status          ExamStatus `protobuf:"varint,9,opt,name=status,proto3,enum=v1.ExamStatus" json:"status,omitempty"`
	// Academic Classification
	Subject    string     `protobuf:"bytes,10,opt,name=subject,proto3" json:"subject,omitempty"`
	Grade      int32      `protobuf:"varint,11,opt,name=grade,proto3" json:"grade,omitempty"`
	Difficulty Difficulty `protobuf:"varint,12,opt,name=difficulty,proto3,enum=v1.Difficulty" json:"difficulty,omitempty"`
	Tags       []string   `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	// Settings
	ShuffleQuestions bool  `protobuf:"varint,14,opt,name=shuffle_questions,json=shuffleQuestions,proto3" json:"shuffle_questions,omitempty"`
	ShuffleAnswers   bool  `protobuf:"varint,15,opt,name=shuffle_answers,json=shuffleAnswers,proto3" json:"shuffle_answers,omitempty"`
	ShowResults      bool  `protobuf:"varint,16,opt,name=show_results,json=showResults,proto3" json:"show_results,omitempty"`
	ShowAnswers      bool  `protobuf:"varint,17,opt,name=show_answers,json=showAnswers,proto3" json:"show_answers,omitempty"`
	AllowReview      bool  `protobuf:"varint,18,opt,name=allow_review,json=allowReview,proto3" json:"allow_review,omitempty"`
	MaxAttempts      int32 `protobuf:"varint,19,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	// Official exam fields
	SourceInstitution string `protobuf:"bytes,20,opt,name=source_institution,json=sourceInstitution,proto3" json:"source_institution,omitempty"`
	ExamYear          int32  `protobuf:"varint,21,opt,name=exam_year,json=examYear,proto3" json:"exam_year,omitempty"`
	ExamCode          string `protobuf:"bytes,22,opt,name=exam_code,json=examCode,proto3" json:"exam_code,omitempty"`
	FileUrl           string `protobuf:"bytes,23,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	// Metadata
	Version     int32                  `protobuf:"varint,24,opt,name=version,proto3" json:"version,omitempty"`
	QuestionIds []string               `protobuf:"bytes,25,rep,name=question_ids,json=questionIds,proto3" json:"question_ids,omitempty"`
	CreatedBy   string                 `protobuf:"bytes,26,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy   string                 `protobuf:"bytes,27,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	PublishedAt *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Relations
	Questions []*ExamQuestion `protobuf:"bytes,31,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *Exam) Reset() {
	*x = Exam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exam) ProtoMessage() {}

func (x *Exam) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exam.ProtoReflect.Descriptor instead.
func (*Exam) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{0}
}

func (x *Exam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Exam) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Exam) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Exam) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *Exam) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *Exam) GetTotalPoints() int32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *Exam) GetPassPercentage() int32 {
	if x != nil {
		return x.PassPercentage
	}
	return 0
}

func (x *Exam) GetExamType() ExamType {
	if x != nil {
		return x.ExamType
	}
	return ExamType_EXAM_TYPE_UNSPECIFIED
}

func (x *Exam) GetStatus() ExamStatus {
	if x != nil {
		return x.Status
	}
	return ExamStatus_EXAM_STATUS_UNSPECIFIED
}

func (x *Exam) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Exam) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *Exam) GetDifficulty() Difficulty {
	if x != nil {
		return x.Difficulty
	}
	return Difficulty_DIFFICULTY_UNSPECIFIED
}

func (x *Exam) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Exam) GetShuffleQuestions() bool {
	if x != nil {
		return x.ShuffleQuestions
	}
	return false
}

func (x *Exam) GetShuffleAnswers() bool {
	if x != nil {
		return x.ShuffleAnswers
	}
	return false
}

func (x *Exam) GetShowResults() bool {
	if x != nil {
		return x.ShowResults
	}
	return false
}

func (x *Exam) GetShowAnswers() bool {
	if x != nil {
		return x.ShowAnswers
	}
	return false
}

func (x *Exam) GetAllowReview() bool {
	if x != nil {
		return x.AllowReview
	}
	return false
}

func (x *Exam) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *Exam) GetSourceInstitution() string {
	if x != nil {
		return x.SourceInstitution
	}
	return ""
}

func (x *Exam) GetExamYear() int32 {
	if x != nil {
		return x.ExamYear
	}
	return 0
}

func (x *Exam) GetExamCode() string {
	if x != nil {
		return x.ExamCode
	}
	return ""
}

func (x *Exam) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *Exam) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Exam) GetQuestionIds() []string {
	if x != nil {
		return x.QuestionIds
	}
	return nil
}

func (x *Exam) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Exam) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Exam) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *Exam) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Exam) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Exam) GetQuestions() []*ExamQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

// Exam attempt (updated with proper enum and fields)
type ExamAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExamId        string        `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	UserId        string        `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AttemptNumber int32         `protobuf:"varint,4,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
	Status        AttemptStatus `protobuf:"varint,5,opt,name=status,proto3,enum=v1.AttemptStatus" json:"status,omitempty"`
	// Scoring
	Score       float64 `protobuf:"fixed64,6,opt,name=score,proto3" json:"score,omitempty"`
	TotalPoints int32   `protobuf:"varint,7,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	Percentage  float64 `protobuf:"fixed64,8,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Passed      bool    `protobuf:"varint,9,opt,name=passed,proto3" json:"passed,omitempty"`
	// Timing
	StartedAt        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	SubmittedAt      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	TimeSpentSeconds int32                  `protobuf:"varint,12,opt,name=time_spent_seconds,json=timeSpentSeconds,proto3" json:"time_spent_seconds,omitempty"`
	// Additional
	IpAddress string `protobuf:"bytes,13,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	UserAgent string `protobuf:"bytes,14,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Notes     string `protobuf:"bytes,15,opt,name=notes,proto3" json:"notes,omitempty"`
	// Timestamps
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ExamAttempt) Reset() {
	*x = ExamAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamAttempt) ProtoMessage() {}

func (x *ExamAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamAttempt.ProtoReflect.Descriptor instead.
func (*ExamAttempt) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{1}
}

func (x *ExamAttempt) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExamAttempt) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ExamAttempt) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ExamAttempt) GetAttemptNumber() int32 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

func (x *ExamAttempt) GetStatus() AttemptStatus {
	if x != nil {
		return x.Status
	}
	return AttemptStatus_ATTEMPT_STATUS_UNSPECIFIED
}

func (x *ExamAttempt) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ExamAttempt) GetTotalPoints() int32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *ExamAttempt) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *ExamAttempt) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

func (x *ExamAttempt) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ExamAttempt) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *ExamAttempt) GetTimeSpentSeconds() int32 {
	if x != nil {
		return x.TimeSpentSeconds
	}
	return 0
}

func (x *ExamAttempt) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ExamAttempt) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *ExamAttempt) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ExamAttempt) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExamAttempt) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Exam management
type CreateExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description     string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Instructions    string   `protobuf:"bytes,3,opt,name=instructions,proto3" json:"instructions,omitempty"`
	DurationMinutes int32    `protobuf:"varint,4,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"`
	PassPercentage  int32    `protobuf:"varint,5,opt,name=pass_percentage,json=passPercentage,proto3" json:"pass_percentage,omitempty"`
	ExamType        ExamType `protobuf:"varint,6,opt,name=exam_type,json=examType,proto3,enum=v1.ExamType" json:"exam_type,omitempty"`
	// Academic Classification
	Subject    string     `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	Grade      int32      `protobuf:"varint,8,opt,name=grade,proto3" json:"grade,omitempty"`
	Difficulty Difficulty `protobuf:"varint,9,opt,name=difficulty,proto3,enum=v1.Difficulty" json:"difficulty,omitempty"`
	Tags       []string   `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	// Settings
	ShuffleQuestions bool  `protobuf:"varint,11,opt,name=shuffle_questions,json=shuffleQuestions,proto3" json:"shuffle_questions,omitempty"`
	ShuffleAnswers   bool  `protobuf:"varint,12,opt,name=shuffle_answers,json=shuffleAnswers,proto3" json:"shuffle_answers,omitempty"`
	ShowResults      bool  `protobuf:"varint,13,opt,name=show_results,json=showResults,proto3" json:"show_results,omitempty"`
	ShowAnswers      bool  `protobuf:"varint,14,opt,name=show_answers,json=showAnswers,proto3" json:"show_answers,omitempty"`
	AllowReview      bool  `protobuf:"varint,15,opt,name=allow_review,json=allowReview,proto3" json:"allow_review,omitempty"`
	MaxAttempts      int32 `protobuf:"varint,16,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	// Official exam fields (optional)
	SourceInstitution string   `protobuf:"bytes,17,opt,name=source_institution,json=sourceInstitution,proto3" json:"source_institution,omitempty"`
	ExamYear          int32    `protobuf:"varint,18,opt,name=exam_year,json=examYear,proto3" json:"exam_year,omitempty"`
	ExamCode          string   `protobuf:"bytes,19,opt,name=exam_code,json=examCode,proto3" json:"exam_code,omitempty"`
	FileUrl           string   `protobuf:"bytes,20,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	QuestionIds       []string `protobuf:"bytes,21,rep,name=question_ids,json=questionIds,proto3" json:"question_ids,omitempty"`
}

func (x *CreateExamRequest) Reset() {
	*x = CreateExamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExamRequest) ProtoMessage() {}

func (x *CreateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExamRequest.ProtoReflect.Descriptor instead.
func (*CreateExamRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{2}
}

func (x *CreateExamRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateExamRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateExamRequest) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *CreateExamRequest) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *CreateExamRequest) GetPassPercentage() int32 {
	if x != nil {
		return x.PassPercentage
	}
	return 0
}

func (x *CreateExamRequest) GetExamType() ExamType {
	if x != nil {
		return x.ExamType
	}
	return ExamType_EXAM_TYPE_UNSPECIFIED
}

func (x *CreateExamRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CreateExamRequest) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *CreateExamRequest) GetDifficulty() Difficulty {
	if x != nil {
		return x.Difficulty
	}
	return Difficulty_DIFFICULTY_UNSPECIFIED
}

func (x *CreateExamRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateExamRequest) GetShuffleQuestions() bool {
	if x != nil {
		return x.ShuffleQuestions
	}
	return false
}

func (x *CreateExamRequest) GetShuffleAnswers() bool {
	if x != nil {
		return x.ShuffleAnswers
	}
	return false
}

func (x *CreateExamRequest) GetShowResults() bool {
	if x != nil {
		return x.ShowResults
	}
	return false
}

func (x *CreateExamRequest) GetShowAnswers() bool {
	if x != nil {
		return x.ShowAnswers
	}
	return false
}

func (x *CreateExamRequest) GetAllowReview() bool {
	if x != nil {
		return x.AllowReview
	}
	return false
}

func (x *CreateExamRequest) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *CreateExamRequest) GetSourceInstitution() string {
	if x != nil {
		return x.SourceInstitution
	}
	return ""
}

func (x *CreateExamRequest) GetExamYear() int32 {
	if x != nil {
		return x.ExamYear
	}
	return 0
}

func (x *CreateExamRequest) GetExamCode() string {
	if x != nil {
		return x.ExamCode
	}
	return ""
}

func (x *CreateExamRequest) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *CreateExamRequest) GetQuestionIds() []string {
	if x != nil {
		return x.QuestionIds
	}
	return nil
}

type CreateExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Exam     *Exam            `protobuf:"bytes,2,opt,name=exam,proto3" json:"exam,omitempty"`
}

func (x *CreateExamResponse) Reset() {
	*x = CreateExamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExamResponse) ProtoMessage() {}

func (x *CreateExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExamResponse.ProtoReflect.Descriptor instead.
func (*CreateExamResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{3}
}

func (x *CreateExamResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateExamResponse) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

type GetExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetExamRequest) Reset() {
	*x = GetExamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamRequest) ProtoMessage() {}

func (x *GetExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamRequest.ProtoReflect.Descriptor instead.
func (*GetExamRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{4}
}

func (x *GetExamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Exam     *Exam            `protobuf:"bytes,2,opt,name=exam,proto3" json:"exam,omitempty"`
}

func (x *GetExamResponse) Reset() {
	*x = GetExamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamResponse) ProtoMessage() {}

func (x *GetExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamResponse.ProtoReflect.Descriptor instead.
func (*GetExamResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{5}
}

func (x *GetExamResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetExamResponse) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

// Update exam
type UpdateExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Instructions    string `protobuf:"bytes,4,opt,name=instructions,proto3" json:"instructions,omitempty"`
	DurationMinutes int32  `protobuf:"varint,5,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"`
	PassPercentage  int32  `protobuf:"varint,6,opt,name=pass_percentage,json=passPercentage,proto3" json:"pass_percentage,omitempty"`
	// Academic Classification
	Subject    string     `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	Grade      int32      `protobuf:"varint,8,opt,name=grade,proto3" json:"grade,omitempty"`
	Difficulty Difficulty `protobuf:"varint,9,opt,name=difficulty,proto3,enum=v1.Difficulty" json:"difficulty,omitempty"`
	Tags       []string   `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	// Settings
	ShuffleQuestions bool  `protobuf:"varint,11,opt,name=shuffle_questions,json=shuffleQuestions,proto3" json:"shuffle_questions,omitempty"`
	ShuffleAnswers   bool  `protobuf:"varint,12,opt,name=shuffle_answers,json=shuffleAnswers,proto3" json:"shuffle_answers,omitempty"`
	ShowResults      bool  `protobuf:"varint,13,opt,name=show_results,json=showResults,proto3" json:"show_results,omitempty"`
	ShowAnswers      bool  `protobuf:"varint,14,opt,name=show_answers,json=showAnswers,proto3" json:"show_answers,omitempty"`
	AllowReview      bool  `protobuf:"varint,15,opt,name=allow_review,json=allowReview,proto3" json:"allow_review,omitempty"`
	MaxAttempts      int32 `protobuf:"varint,16,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	// Official exam fields (optional)
	SourceInstitution string `protobuf:"bytes,17,opt,name=source_institution,json=sourceInstitution,proto3" json:"source_institution,omitempty"`
	ExamYear          int32  `protobuf:"varint,18,opt,name=exam_year,json=examYear,proto3" json:"exam_year,omitempty"`
	ExamCode          string `protobuf:"bytes,19,opt,name=exam_code,json=examCode,proto3" json:"exam_code,omitempty"`
	FileUrl           string `protobuf:"bytes,20,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
}

func (x *UpdateExamRequest) Reset() {
	*x = UpdateExamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExamRequest) ProtoMessage() {}

func (x *UpdateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExamRequest.ProtoReflect.Descriptor instead.
func (*UpdateExamRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateExamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateExamRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateExamRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateExamRequest) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *UpdateExamRequest) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *UpdateExamRequest) GetPassPercentage() int32 {
	if x != nil {
		return x.PassPercentage
	}
	return 0
}

func (x *UpdateExamRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *UpdateExamRequest) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *UpdateExamRequest) GetDifficulty() Difficulty {
	if x != nil {
		return x.Difficulty
	}
	return Difficulty_DIFFICULTY_UNSPECIFIED
}

func (x *UpdateExamRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateExamRequest) GetShuffleQuestions() bool {
	if x != nil {
		return x.ShuffleQuestions
	}
	return false
}

func (x *UpdateExamRequest) GetShuffleAnswers() bool {
	if x != nil {
		return x.ShuffleAnswers
	}
	return false
}

func (x *UpdateExamRequest) GetShowResults() bool {
	if x != nil {
		return x.ShowResults
	}
	return false
}

func (x *UpdateExamRequest) GetShowAnswers() bool {
	if x != nil {
		return x.ShowAnswers
	}
	return false
}

func (x *UpdateExamRequest) GetAllowReview() bool {
	if x != nil {
		return x.AllowReview
	}
	return false
}

func (x *UpdateExamRequest) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *UpdateExamRequest) GetSourceInstitution() string {
	if x != nil {
		return x.SourceInstitution
	}
	return ""
}

func (x *UpdateExamRequest) GetExamYear() int32 {
	if x != nil {
		return x.ExamYear
	}
	return 0
}

func (x *UpdateExamRequest) GetExamCode() string {
	if x != nil {
		return x.ExamCode
	}
	return ""
}

func (x *UpdateExamRequest) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

type UpdateExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Exam     *Exam            `protobuf:"bytes,2,opt,name=exam,proto3" json:"exam,omitempty"`
}

func (x *UpdateExamResponse) Reset() {
	*x = UpdateExamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExamResponse) ProtoMessage() {}

func (x *UpdateExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExamResponse.ProtoReflect.Descriptor instead.
func (*UpdateExamResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateExamResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UpdateExamResponse) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

// Delete exam
type DeleteExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteExamRequest) Reset() {
	*x = DeleteExamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExamRequest) ProtoMessage() {}

func (x *DeleteExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExamRequest.ProtoReflect.Descriptor instead.
func (*DeleteExamRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteExamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteExamResponse) Reset() {
	*x = DeleteExamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExamResponse) ProtoMessage() {}

func (x *DeleteExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExamResponse.ProtoReflect.Descriptor instead.
func (*DeleteExamResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteExamResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// Publish exam
type PublishExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId string `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
}

func (x *PublishExamRequest) Reset() {
	*x = PublishExamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishExamRequest) ProtoMessage() {}

func (x *PublishExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishExamRequest.ProtoReflect.Descriptor instead.
func (*PublishExamRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{10}
}

func (x *PublishExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type PublishExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Exam     *Exam            `protobuf:"bytes,2,opt,name=exam,proto3" json:"exam,omitempty"`
}

func (x *PublishExamResponse) Reset() {
	*x = PublishExamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishExamResponse) ProtoMessage() {}

func (x *PublishExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishExamResponse.ProtoReflect.Descriptor instead.
func (*PublishExamResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{11}
}

func (x *PublishExamResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *PublishExamResponse) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

// Archive exam
type ArchiveExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId string `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
}

func (x *ArchiveExamRequest) Reset() {
	*x = ArchiveExamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveExamRequest) ProtoMessage() {}

func (x *ArchiveExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveExamRequest.ProtoReflect.Descriptor instead.
func (*ArchiveExamRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{12}
}

func (x *ArchiveExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type ArchiveExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Exam     *Exam            `protobuf:"bytes,2,opt,name=exam,proto3" json:"exam,omitempty"`
}

func (x *ArchiveExamResponse) Reset() {
	*x = ArchiveExamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveExamResponse) ProtoMessage() {}

func (x *ArchiveExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveExamResponse.ProtoReflect.Descriptor instead.
func (*ArchiveExamResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{13}
}

func (x *ArchiveExamResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ArchiveExamResponse) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

// Question management
type AddQuestionToExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId     string `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	QuestionId string `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Points     int32  `protobuf:"varint,3,opt,name=points,proto3" json:"points,omitempty"`
	Order      int32  `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *AddQuestionToExamRequest) Reset() {
	*x = AddQuestionToExamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddQuestionToExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQuestionToExamRequest) ProtoMessage() {}

func (x *AddQuestionToExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQuestionToExamRequest.ProtoReflect.Descriptor instead.
func (*AddQuestionToExamRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{14}
}

func (x *AddQuestionToExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *AddQuestionToExamRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *AddQuestionToExamRequest) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *AddQuestionToExamRequest) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type AddQuestionToExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *AddQuestionToExamResponse) Reset() {
	*x = AddQuestionToExamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddQuestionToExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQuestionToExamResponse) ProtoMessage() {}

func (x *AddQuestionToExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQuestionToExamResponse.ProtoReflect.Descriptor instead.
func (*AddQuestionToExamResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{15}
}

func (x *AddQuestionToExamResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type RemoveQuestionFromExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId     string `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	QuestionId string `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
}

func (x *RemoveQuestionFromExamRequest) Reset() {
	*x = RemoveQuestionFromExamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveQuestionFromExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveQuestionFromExamRequest) ProtoMessage() {}

func (x *RemoveQuestionFromExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveQuestionFromExamRequest.ProtoReflect.Descriptor instead.
func (*RemoveQuestionFromExamRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveQuestionFromExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *RemoveQuestionFromExamRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

type RemoveQuestionFromExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *RemoveQuestionFromExamResponse) Reset() {
	*x = RemoveQuestionFromExamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveQuestionFromExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveQuestionFromExamResponse) ProtoMessage() {}

func (x *RemoveQuestionFromExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveQuestionFromExamResponse.ProtoReflect.Descriptor instead.
func (*RemoveQuestionFromExamResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveQuestionFromExamResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ReorderExamQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId         string           `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	QuestionOrders []*QuestionOrder `protobuf:"bytes,2,rep,name=question_orders,json=questionOrders,proto3" json:"question_orders,omitempty"`
}

func (x *ReorderExamQuestionsRequest) Reset() {
	*x = ReorderExamQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReorderExamQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReorderExamQuestionsRequest) ProtoMessage() {}

func (x *ReorderExamQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReorderExamQuestionsRequest.ProtoReflect.Descriptor instead.
func (*ReorderExamQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{18}
}

func (x *ReorderExamQuestionsRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ReorderExamQuestionsRequest) GetQuestionOrders() []*QuestionOrder {
	if x != nil {
		return x.QuestionOrders
	}
	return nil
}

type QuestionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId string `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Order      int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *QuestionOrder) Reset() {
	*x = QuestionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionOrder) ProtoMessage() {}

func (x *QuestionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionOrder.ProtoReflect.Descriptor instead.
func (*QuestionOrder) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{19}
}

func (x *QuestionOrder) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionOrder) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ReorderExamQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ReorderExamQuestionsResponse) Reset() {
	*x = ReorderExamQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReorderExamQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReorderExamQuestionsResponse) ProtoMessage() {}

func (x *ReorderExamQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReorderExamQuestionsResponse.ProtoReflect.Descriptor instead.
func (*ReorderExamQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{20}
}

func (x *ReorderExamQuestionsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetExamQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId string `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
}

func (x *GetExamQuestionsRequest) Reset() {
	*x = GetExamQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExamQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamQuestionsRequest) ProtoMessage() {}

func (x *GetExamQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamQuestionsRequest.ProtoReflect.Descriptor instead.
func (*GetExamQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{21}
}

func (x *GetExamQuestionsRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type GetExamQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response  *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Questions []*ExamQuestion  `protobuf:"bytes,2,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *GetExamQuestionsResponse) Reset() {
	*x = GetExamQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExamQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamQuestionsResponse) ProtoMessage() {}

func (x *GetExamQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamQuestionsResponse.ProtoReflect.Descriptor instead.
func (*GetExamQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{22}
}

func (x *GetExamQuestionsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetExamQuestionsResponse) GetQuestions() []*ExamQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

// ExamQuestion message for junction table
type ExamQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExamId      string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	QuestionId  string                 `protobuf:"bytes,3,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	OrderNumber int32                  `protobuf:"varint,4,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	Points      int32                  `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
	IsBonus     bool                   `protobuf:"varint,6,opt,name=is_bonus,json=isBonus,proto3" json:"is_bonus,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ExamQuestion) Reset() {
	*x = ExamQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamQuestion) ProtoMessage() {}

func (x *ExamQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamQuestion.ProtoReflect.Descriptor instead.
func (*ExamQuestion) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{23}
}

func (x *ExamQuestion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExamQuestion) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ExamQuestion) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *ExamQuestion) GetOrderNumber() int32 {
	if x != nil {
		return x.OrderNumber
	}
	return 0
}

func (x *ExamQuestion) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *ExamQuestion) GetIsBonus() bool {
	if x != nil {
		return x.IsBonus
	}
	return false
}

func (x *ExamQuestion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Exam taking
type StartExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId string `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
}

func (x *StartExamRequest) Reset() {
	*x = StartExamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartExamRequest) ProtoMessage() {}

func (x *StartExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartExamRequest.ProtoReflect.Descriptor instead.
func (*StartExamRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{24}
}

func (x *StartExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type StartExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response    *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Attempt     *ExamAttempt     `protobuf:"bytes,2,opt,name=attempt,proto3" json:"attempt,omitempty"`
	QuestionIds []string         `protobuf:"bytes,3,rep,name=question_ids,json=questionIds,proto3" json:"question_ids,omitempty"`
}

func (x *StartExamResponse) Reset() {
	*x = StartExamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartExamResponse) ProtoMessage() {}

func (x *StartExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartExamResponse.ProtoReflect.Descriptor instead.
func (*StartExamResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{25}
}

func (x *StartExamResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StartExamResponse) GetAttempt() *ExamAttempt {
	if x != nil {
		return x.Attempt
	}
	return nil
}

func (x *StartExamResponse) GetQuestionIds() []string {
	if x != nil {
		return x.QuestionIds
	}
	return nil
}

type SubmitAnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttemptId  string `protobuf:"bytes,1,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
	QuestionId string `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	AnswerData string `protobuf:"bytes,3,opt,name=answer_data,json=answerData,proto3" json:"answer_data,omitempty"` // JSON format
}

func (x *SubmitAnswerRequest) Reset() {
	*x = SubmitAnswerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerRequest) ProtoMessage() {}

func (x *SubmitAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerRequest.ProtoReflect.Descriptor instead.
func (*SubmitAnswerRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{26}
}

func (x *SubmitAnswerRequest) GetAttemptId() string {
	if x != nil {
		return x.AttemptId
	}
	return ""
}

func (x *SubmitAnswerRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *SubmitAnswerRequest) GetAnswerData() string {
	if x != nil {
		return x.AnswerData
	}
	return ""
}

type SubmitAnswerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SubmitAnswerResponse) Reset() {
	*x = SubmitAnswerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerResponse) ProtoMessage() {}

func (x *SubmitAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerResponse.ProtoReflect.Descriptor instead.
func (*SubmitAnswerResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{27}
}

func (x *SubmitAnswerResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type SubmitExamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttemptId string `protobuf:"bytes,1,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
}

func (x *SubmitExamRequest) Reset() {
	*x = SubmitExamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExamRequest) ProtoMessage() {}

func (x *SubmitExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExamRequest.ProtoReflect.Descriptor instead.
func (*SubmitExamRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{28}
}

func (x *SubmitExamRequest) GetAttemptId() string {
	if x != nil {
		return x.AttemptId
	}
	return ""
}

type SubmitExamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Result   *ExamResult      `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SubmitExamResponse) Reset() {
	*x = SubmitExamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExamResponse) ProtoMessage() {}

func (x *SubmitExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExamResponse.ProtoReflect.Descriptor instead.
func (*SubmitExamResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{29}
}

func (x *SubmitExamResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubmitExamResponse) GetResult() *ExamResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetExamAttemptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttemptId string `protobuf:"bytes,1,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
}

func (x *GetExamAttemptRequest) Reset() {
	*x = GetExamAttemptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExamAttemptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamAttemptRequest) ProtoMessage() {}

func (x *GetExamAttemptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamAttemptRequest.ProtoReflect.Descriptor instead.
func (*GetExamAttemptRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{30}
}

func (x *GetExamAttemptRequest) GetAttemptId() string {
	if x != nil {
		return x.AttemptId
	}
	return ""
}

type GetExamAttemptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Attempt  *ExamAttempt     `protobuf:"bytes,2,opt,name=attempt,proto3" json:"attempt,omitempty"`
	Answers  []*ExamAnswer    `protobuf:"bytes,3,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *GetExamAttemptResponse) Reset() {
	*x = GetExamAttemptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExamAttemptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamAttemptResponse) ProtoMessage() {}

func (x *GetExamAttemptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamAttemptResponse.ProtoReflect.Descriptor instead.
func (*GetExamAttemptResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{31}
}

func (x *GetExamAttemptResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetExamAttemptResponse) GetAttempt() *ExamAttempt {
	if x != nil {
		return x.Attempt
	}
	return nil
}

func (x *GetExamAttemptResponse) GetAnswers() []*ExamAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

// ExamAnswer message
type ExamAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AttemptId    string                 `protobuf:"bytes,2,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
	QuestionId   string                 `protobuf:"bytes,3,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	AnswerData   string                 `protobuf:"bytes,4,opt,name=answer_data,json=answerData,proto3" json:"answer_data,omitempty"` // JSON format
	IsCorrect    bool                   `protobuf:"varint,5,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
	PointsEarned int32                  `protobuf:"varint,6,opt,name=points_earned,json=pointsEarned,proto3" json:"points_earned,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ExamAnswer) Reset() {
	*x = ExamAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamAnswer) ProtoMessage() {}

func (x *ExamAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamAnswer.ProtoReflect.Descriptor instead.
func (*ExamAnswer) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{32}
}

func (x *ExamAnswer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExamAnswer) GetAttemptId() string {
	if x != nil {
		return x.AttemptId
	}
	return ""
}

func (x *ExamAnswer) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *ExamAnswer) GetAnswerData() string {
	if x != nil {
		return x.AnswerData
	}
	return ""
}

func (x *ExamAnswer) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

func (x *ExamAnswer) GetPointsEarned() int32 {
	if x != nil {
		return x.PointsEarned
	}
	return 0
}

func (x *ExamAnswer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExamAnswer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// ExamResult message
type ExamResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AttemptId   string                 `protobuf:"bytes,2,opt,name=attempt_id,json=attemptId,proto3" json:"attempt_id,omitempty"`
	Score       float64                `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	TotalPoints int32                  `protobuf:"varint,4,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	Percentage  float64                `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Passed      bool                   `protobuf:"varint,6,opt,name=passed,proto3" json:"passed,omitempty"`
	Feedback    string                 `protobuf:"bytes,7,opt,name=feedback,proto3" json:"feedback,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ExamResult) Reset() {
	*x = ExamResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamResult) ProtoMessage() {}

func (x *ExamResult) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamResult.ProtoReflect.Descriptor instead.
func (*ExamResult) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{33}
}

func (x *ExamResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExamResult) GetAttemptId() string {
	if x != nil {
		return x.AttemptId
	}
	return ""
}

func (x *ExamResult) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ExamResult) GetTotalPoints() int32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *ExamResult) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *ExamResult) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

func (x *ExamResult) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

func (x *ExamResult) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Results and analytics
type GetExamResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId     string                    `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	Pagination *common.PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetExamResultsRequest) Reset() {
	*x = GetExamResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExamResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamResultsRequest) ProtoMessage() {}

func (x *GetExamResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamResultsRequest.ProtoReflect.Descriptor instead.
func (*GetExamResultsRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{34}
}

func (x *GetExamResultsRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *GetExamResultsRequest) GetPagination() *common.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetExamResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *common.Response           `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Results    []*ExamResult              `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	Pagination *common.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetExamResultsResponse) Reset() {
	*x = GetExamResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExamResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamResultsResponse) ProtoMessage() {}

func (x *GetExamResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamResultsResponse.ProtoReflect.Descriptor instead.
func (*GetExamResultsResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{35}
}

func (x *GetExamResultsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetExamResultsResponse) GetResults() []*ExamResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GetExamResultsResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetExamStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamId string `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
}

func (x *GetExamStatisticsRequest) Reset() {
	*x = GetExamStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExamStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamStatisticsRequest) ProtoMessage() {}

func (x *GetExamStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetExamStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{36}
}

func (x *GetExamStatisticsRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type GetExamStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Statistics *ExamStatistics  `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *GetExamStatisticsResponse) Reset() {
	*x = GetExamStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExamStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamStatisticsResponse) ProtoMessage() {}

func (x *GetExamStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetExamStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{37}
}

func (x *GetExamStatisticsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetExamStatisticsResponse) GetStatistics() *ExamStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type ExamStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAttempts     int32                 `protobuf:"varint,1,opt,name=total_attempts,json=totalAttempts,proto3" json:"total_attempts,omitempty"`
	CompletedAttempts int32                 `protobuf:"varint,2,opt,name=completed_attempts,json=completedAttempts,proto3" json:"completed_attempts,omitempty"`
	AverageScore      float32               `protobuf:"fixed32,3,opt,name=average_score,json=averageScore,proto3" json:"average_score,omitempty"`
	PassRate          float32               `protobuf:"fixed32,4,opt,name=pass_rate,json=passRate,proto3" json:"pass_rate,omitempty"`
	AverageTimeSpent  int32                 `protobuf:"varint,5,opt,name=average_time_spent,json=averageTimeSpent,proto3" json:"average_time_spent,omitempty"`
	QuestionStats     []*QuestionStatistics `protobuf:"bytes,6,rep,name=question_stats,json=questionStats,proto3" json:"question_stats,omitempty"`
}

func (x *ExamStatistics) Reset() {
	*x = ExamStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamStatistics) ProtoMessage() {}

func (x *ExamStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamStatistics.ProtoReflect.Descriptor instead.
func (*ExamStatistics) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{38}
}

func (x *ExamStatistics) GetTotalAttempts() int32 {
	if x != nil {
		return x.TotalAttempts
	}
	return 0
}

func (x *ExamStatistics) GetCompletedAttempts() int32 {
	if x != nil {
		return x.CompletedAttempts
	}
	return 0
}

func (x *ExamStatistics) GetAverageScore() float32 {
	if x != nil {
		return x.AverageScore
	}
	return 0
}

func (x *ExamStatistics) GetPassRate() float32 {
	if x != nil {
		return x.PassRate
	}
	return 0
}

func (x *ExamStatistics) GetAverageTimeSpent() int32 {
	if x != nil {
		return x.AverageTimeSpent
	}
	return 0
}

func (x *ExamStatistics) GetQuestionStats() []*QuestionStatistics {
	if x != nil {
		return x.QuestionStats
	}
	return nil
}

type QuestionStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId       string  `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	TotalAnswers     int32   `protobuf:"varint,2,opt,name=total_answers,json=totalAnswers,proto3" json:"total_answers,omitempty"`
	CorrectAnswers   int32   `protobuf:"varint,3,opt,name=correct_answers,json=correctAnswers,proto3" json:"correct_answers,omitempty"`
	CorrectRate      float32 `protobuf:"fixed32,4,opt,name=correct_rate,json=correctRate,proto3" json:"correct_rate,omitempty"`
	AverageTimeSpent float32 `protobuf:"fixed32,5,opt,name=average_time_spent,json=averageTimeSpent,proto3" json:"average_time_spent,omitempty"`
}

func (x *QuestionStatistics) Reset() {
	*x = QuestionStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionStatistics) ProtoMessage() {}

func (x *QuestionStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionStatistics.ProtoReflect.Descriptor instead.
func (*QuestionStatistics) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{39}
}

func (x *QuestionStatistics) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionStatistics) GetTotalAnswers() int32 {
	if x != nil {
		return x.TotalAnswers
	}
	return 0
}

func (x *QuestionStatistics) GetCorrectAnswers() int32 {
	if x != nil {
		return x.CorrectAnswers
	}
	return 0
}

func (x *QuestionStatistics) GetCorrectRate() float32 {
	if x != nil {
		return x.CorrectRate
	}
	return 0
}

func (x *QuestionStatistics) GetAverageTimeSpent() float32 {
	if x != nil {
		return x.AverageTimeSpent
	}
	return 0
}

type GetUserPerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExamId string `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
}

func (x *GetUserPerformanceRequest) Reset() {
	*x = GetUserPerformanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPerformanceRequest) ProtoMessage() {}

func (x *GetUserPerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPerformanceRequest.ProtoReflect.Descriptor instead.
func (*GetUserPerformanceRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{40}
}

func (x *GetUserPerformanceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserPerformanceRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type GetUserPerformanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response    *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Performance *UserPerformance `protobuf:"bytes,2,opt,name=performance,proto3" json:"performance,omitempty"`
}

func (x *GetUserPerformanceResponse) Reset() {
	*x = GetUserPerformanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPerformanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPerformanceResponse) ProtoMessage() {}

func (x *GetUserPerformanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPerformanceResponse.ProtoReflect.Descriptor instead.
func (*GetUserPerformanceResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{41}
}

func (x *GetUserPerformanceResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetUserPerformanceResponse) GetPerformance() *UserPerformance {
	if x != nil {
		return x.Performance
	}
	return nil
}

type UserPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string         `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExamId         string         `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	AttemptsCount  int32          `protobuf:"varint,3,opt,name=attempts_count,json=attemptsCount,proto3" json:"attempts_count,omitempty"`
	BestScore      float32        `protobuf:"fixed32,4,opt,name=best_score,json=bestScore,proto3" json:"best_score,omitempty"`
	AverageScore   float32        `protobuf:"fixed32,5,opt,name=average_score,json=averageScore,proto3" json:"average_score,omitempty"`
	TotalTimeSpent int32          `protobuf:"varint,6,opt,name=total_time_spent,json=totalTimeSpent,proto3" json:"total_time_spent,omitempty"`
	Attempts       []*ExamAttempt `protobuf:"bytes,7,rep,name=attempts,proto3" json:"attempts,omitempty"`
}

func (x *UserPerformance) Reset() {
	*x = UserPerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPerformance) ProtoMessage() {}

func (x *UserPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPerformance.ProtoReflect.Descriptor instead.
func (*UserPerformance) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{42}
}

func (x *UserPerformance) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPerformance) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *UserPerformance) GetAttemptsCount() int32 {
	if x != nil {
		return x.AttemptsCount
	}
	return 0
}

func (x *UserPerformance) GetBestScore() float32 {
	if x != nil {
		return x.BestScore
	}
	return 0
}

func (x *UserPerformance) GetAverageScore() float32 {
	if x != nil {
		return x.AverageScore
	}
	return 0
}

func (x *UserPerformance) GetTotalTimeSpent() int32 {
	if x != nil {
		return x.TotalTimeSpent
	}
	return 0
}

func (x *UserPerformance) GetAttempts() []*ExamAttempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

type ListExamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *common.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListExamsRequest) Reset() {
	*x = ListExamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamsRequest) ProtoMessage() {}

func (x *ListExamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamsRequest.ProtoReflect.Descriptor instead.
func (*ListExamsRequest) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{43}
}

func (x *ListExamsRequest) GetPagination() *common.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListExamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *common.Response           `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Exams      []*Exam                    `protobuf:"bytes,2,rep,name=exams,proto3" json:"exams,omitempty"`
	Pagination *common.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListExamsResponse) Reset() {
	*x = ListExamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_exam_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamsResponse) ProtoMessage() {}

func (x *ListExamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_exam_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamsResponse.ProtoReflect.Descriptor instead.
func (*ListExamsResponse) Descriptor() ([]byte, []int) {
	return file_v1_exam_proto_rawDescGZIP(), []int{44}
}

func (x *ListExamsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListExamsResponse) GetExams() []*Exam {
	if x != nil {
		return x.Exams
	}
	return nil
}

func (x *ListExamsResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_v1_exam_proto protoreflect.FileDescriptor

var file_v1_exam_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x76, 0x31, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x08, 0x0a, 0x04, 0x45, 0x78,
	0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f,
	0x77, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x84, 0x05, 0x0a, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xeb, 0x05, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x29, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x68, 0x6f, 0x77, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x60, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x65,
	0x78, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04,
	0x65, 0x78, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x22, 0xad, 0x05, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x60, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x22, 0x23, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x42, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78,
	0x61, 0x6d, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x65, 0x78, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x22, 0x2d, 0x0a, 0x12, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x13, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x65,
	0x78, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x41, 0x64,
	0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x49,
	0x0a, 0x19, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x1d, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x1b, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45,
	0x78, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x46, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x4c, 0x0a, 0x1c, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d,
	0x49, 0x64, 0x22, 0x78, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe9, 0x01, 0x0a,
	0x0c, 0x45, 0x78, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2b, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x76, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x44, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x12, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x22, 0x9b, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x0a,
	0x45, 0x78, 0x61, 0x6d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6b, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0e,
	0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x70, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x85, 0x02,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x62, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x52, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x8e, 0x01, 0x0a, 0x0a, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x41, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x56, 0x0a, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x58, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x80, 0x01,
	0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x16,
	0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x46, 0x46,
	0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x45, 0x41, 0x53, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c,
	0x54, 0x59, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x46,
	0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x54, 0x10, 0x04,
	0x2a, 0xa6, 0x01, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0x82, 0x0a, 0x0a, 0x0b, 0x45, 0x78,
	0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x12, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x73, 0x12, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x16, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x16, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x45,
	0x78, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x14, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x67,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x45, 0x78, 0x61, 0x6d, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x65, 0x78, 0x61, 0x6d, 0x2d, 0x62, 0x61, 0x6e, 0x6b,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58, 0xaa, 0x02, 0x02, 0x56, 0x31, 0xca, 0x02, 0x02, 0x56,
	0x31, 0xe2, 0x02, 0x0e, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x02, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_exam_proto_rawDescOnce sync.Once
	file_v1_exam_proto_rawDescData = file_v1_exam_proto_rawDesc
)

func file_v1_exam_proto_rawDescGZIP() []byte {
	file_v1_exam_proto_rawDescOnce.Do(func() {
		file_v1_exam_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_exam_proto_rawDescData)
	})
	return file_v1_exam_proto_rawDescData
}

var file_v1_exam_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_v1_exam_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_v1_exam_proto_goTypes = []interface{}{
	(ExamStatus)(0),                        // 0: v1.ExamStatus
	(ExamType)(0),                          // 1: v1.ExamType
	(Difficulty)(0),                        // 2: v1.Difficulty
	(AttemptStatus)(0),                     // 3: v1.AttemptStatus
	(*Exam)(nil),                           // 4: v1.Exam
	(*ExamAttempt)(nil),                    // 5: v1.ExamAttempt
	(*CreateExamRequest)(nil),              // 6: v1.CreateExamRequest
	(*CreateExamResponse)(nil),             // 7: v1.CreateExamResponse
	(*GetExamRequest)(nil),                 // 8: v1.GetExamRequest
	(*GetExamResponse)(nil),                // 9: v1.GetExamResponse
	(*UpdateExamRequest)(nil),              // 10: v1.UpdateExamRequest
	(*UpdateExamResponse)(nil),             // 11: v1.UpdateExamResponse
	(*DeleteExamRequest)(nil),              // 12: v1.DeleteExamRequest
	(*DeleteExamResponse)(nil),             // 13: v1.DeleteExamResponse
	(*PublishExamRequest)(nil),             // 14: v1.PublishExamRequest
	(*PublishExamResponse)(nil),            // 15: v1.PublishExamResponse
	(*ArchiveExamRequest)(nil),             // 16: v1.ArchiveExamRequest
	(*ArchiveExamResponse)(nil),            // 17: v1.ArchiveExamResponse
	(*AddQuestionToExamRequest)(nil),       // 18: v1.AddQuestionToExamRequest
	(*AddQuestionToExamResponse)(nil),      // 19: v1.AddQuestionToExamResponse
	(*RemoveQuestionFromExamRequest)(nil),  // 20: v1.RemoveQuestionFromExamRequest
	(*RemoveQuestionFromExamResponse)(nil), // 21: v1.RemoveQuestionFromExamResponse
	(*ReorderExamQuestionsRequest)(nil),    // 22: v1.ReorderExamQuestionsRequest
	(*QuestionOrder)(nil),                  // 23: v1.QuestionOrder
	(*ReorderExamQuestionsResponse)(nil),   // 24: v1.ReorderExamQuestionsResponse
	(*GetExamQuestionsRequest)(nil),        // 25: v1.GetExamQuestionsRequest
	(*GetExamQuestionsResponse)(nil),       // 26: v1.GetExamQuestionsResponse
	(*ExamQuestion)(nil),                   // 27: v1.ExamQuestion
	(*StartExamRequest)(nil),               // 28: v1.StartExamRequest
	(*StartExamResponse)(nil),              // 29: v1.StartExamResponse
	(*SubmitAnswerRequest)(nil),            // 30: v1.SubmitAnswerRequest
	(*SubmitAnswerResponse)(nil),           // 31: v1.SubmitAnswerResponse
	(*SubmitExamRequest)(nil),              // 32: v1.SubmitExamRequest
	(*SubmitExamResponse)(nil),             // 33: v1.SubmitExamResponse
	(*GetExamAttemptRequest)(nil),          // 34: v1.GetExamAttemptRequest
	(*GetExamAttemptResponse)(nil),         // 35: v1.GetExamAttemptResponse
	(*ExamAnswer)(nil),                     // 36: v1.ExamAnswer
	(*ExamResult)(nil),                     // 37: v1.ExamResult
	(*GetExamResultsRequest)(nil),          // 38: v1.GetExamResultsRequest
	(*GetExamResultsResponse)(nil),         // 39: v1.GetExamResultsResponse
	(*GetExamStatisticsRequest)(nil),       // 40: v1.GetExamStatisticsRequest
	(*GetExamStatisticsResponse)(nil),      // 41: v1.GetExamStatisticsResponse
	(*ExamStatistics)(nil),                 // 42: v1.ExamStatistics
	(*QuestionStatistics)(nil),             // 43: v1.QuestionStatistics
	(*GetUserPerformanceRequest)(nil),      // 44: v1.GetUserPerformanceRequest
	(*GetUserPerformanceResponse)(nil),     // 45: v1.GetUserPerformanceResponse
	(*UserPerformance)(nil),                // 46: v1.UserPerformance
	(*ListExamsRequest)(nil),               // 47: v1.ListExamsRequest
	(*ListExamsResponse)(nil),              // 48: v1.ListExamsResponse
	(*timestamppb.Timestamp)(nil),          // 49: google.protobuf.Timestamp
	(*common.Response)(nil),                // 50: common.Response
	(*common.PaginationRequest)(nil),       // 51: common.PaginationRequest
	(*common.PaginationResponse)(nil),      // 52: common.PaginationResponse
}
var file_v1_exam_proto_depIdxs = []int32{
	1,  // 0: v1.Exam.exam_type:type_name -> v1.ExamType
	0,  // 1: v1.Exam.status:type_name -> v1.ExamStatus
	2,  // 2: v1.Exam.difficulty:type_name -> v1.Difficulty
	49, // 3: v1.Exam.published_at:type_name -> google.protobuf.Timestamp
	49, // 4: v1.Exam.created_at:type_name -> google.protobuf.Timestamp
	49, // 5: v1.Exam.updated_at:type_name -> google.protobuf.Timestamp
	27, // 6: v1.Exam.questions:type_name -> v1.ExamQuestion
	3,  // 7: v1.ExamAttempt.status:type_name -> v1.AttemptStatus
	49, // 8: v1.ExamAttempt.started_at:type_name -> google.protobuf.Timestamp
	49, // 9: v1.ExamAttempt.submitted_at:type_name -> google.protobuf.Timestamp
	49, // 10: v1.ExamAttempt.created_at:type_name -> google.protobuf.Timestamp
	49, // 11: v1.ExamAttempt.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 12: v1.CreateExamRequest.exam_type:type_name -> v1.ExamType
	2,  // 13: v1.CreateExamRequest.difficulty:type_name -> v1.Difficulty
	50, // 14: v1.CreateExamResponse.response:type_name -> common.Response
	4,  // 15: v1.CreateExamResponse.exam:type_name -> v1.Exam
	50, // 16: v1.GetExamResponse.response:type_name -> common.Response
	4,  // 17: v1.GetExamResponse.exam:type_name -> v1.Exam
	2,  // 18: v1.UpdateExamRequest.difficulty:type_name -> v1.Difficulty
	50, // 19: v1.UpdateExamResponse.response:type_name -> common.Response
	4,  // 20: v1.UpdateExamResponse.exam:type_name -> v1.Exam
	50, // 21: v1.DeleteExamResponse.response:type_name -> common.Response
	50, // 22: v1.PublishExamResponse.response:type_name -> common.Response
	4,  // 23: v1.PublishExamResponse.exam:type_name -> v1.Exam
	50, // 24: v1.ArchiveExamResponse.response:type_name -> common.Response
	4,  // 25: v1.ArchiveExamResponse.exam:type_name -> v1.Exam
	50, // 26: v1.AddQuestionToExamResponse.response:type_name -> common.Response
	50, // 27: v1.RemoveQuestionFromExamResponse.response:type_name -> common.Response
	23, // 28: v1.ReorderExamQuestionsRequest.question_orders:type_name -> v1.QuestionOrder
	50, // 29: v1.ReorderExamQuestionsResponse.response:type_name -> common.Response
	50, // 30: v1.GetExamQuestionsResponse.response:type_name -> common.Response
	27, // 31: v1.GetExamQuestionsResponse.questions:type_name -> v1.ExamQuestion
	49, // 32: v1.ExamQuestion.created_at:type_name -> google.protobuf.Timestamp
	50, // 33: v1.StartExamResponse.response:type_name -> common.Response
	5,  // 34: v1.StartExamResponse.attempt:type_name -> v1.ExamAttempt
	50, // 35: v1.SubmitAnswerResponse.response:type_name -> common.Response
	50, // 36: v1.SubmitExamResponse.response:type_name -> common.Response
	37, // 37: v1.SubmitExamResponse.result:type_name -> v1.ExamResult
	50, // 38: v1.GetExamAttemptResponse.response:type_name -> common.Response
	5,  // 39: v1.GetExamAttemptResponse.attempt:type_name -> v1.ExamAttempt
	36, // 40: v1.GetExamAttemptResponse.answers:type_name -> v1.ExamAnswer
	49, // 41: v1.ExamAnswer.created_at:type_name -> google.protobuf.Timestamp
	49, // 42: v1.ExamAnswer.updated_at:type_name -> google.protobuf.Timestamp
	49, // 43: v1.ExamResult.created_at:type_name -> google.protobuf.Timestamp
	51, // 44: v1.GetExamResultsRequest.pagination:type_name -> common.PaginationRequest
	50, // 45: v1.GetExamResultsResponse.response:type_name -> common.Response
	37, // 46: v1.GetExamResultsResponse.results:type_name -> v1.ExamResult
	52, // 47: v1.GetExamResultsResponse.pagination:type_name -> common.PaginationResponse
	50, // 48: v1.GetExamStatisticsResponse.response:type_name -> common.Response
	42, // 49: v1.GetExamStatisticsResponse.statistics:type_name -> v1.ExamStatistics
	43, // 50: v1.ExamStatistics.question_stats:type_name -> v1.QuestionStatistics
	50, // 51: v1.GetUserPerformanceResponse.response:type_name -> common.Response
	46, // 52: v1.GetUserPerformanceResponse.performance:type_name -> v1.UserPerformance
	5,  // 53: v1.UserPerformance.attempts:type_name -> v1.ExamAttempt
	51, // 54: v1.ListExamsRequest.pagination:type_name -> common.PaginationRequest
	50, // 55: v1.ListExamsResponse.response:type_name -> common.Response
	4,  // 56: v1.ListExamsResponse.exams:type_name -> v1.Exam
	52, // 57: v1.ListExamsResponse.pagination:type_name -> common.PaginationResponse
	6,  // 58: v1.ExamService.CreateExam:input_type -> v1.CreateExamRequest
	10, // 59: v1.ExamService.UpdateExam:input_type -> v1.UpdateExamRequest
	12, // 60: v1.ExamService.DeleteExam:input_type -> v1.DeleteExamRequest
	8,  // 61: v1.ExamService.GetExam:input_type -> v1.GetExamRequest
	47, // 62: v1.ExamService.ListExams:input_type -> v1.ListExamsRequest
	14, // 63: v1.ExamService.PublishExam:input_type -> v1.PublishExamRequest
	16, // 64: v1.ExamService.ArchiveExam:input_type -> v1.ArchiveExamRequest
	18, // 65: v1.ExamService.AddQuestionToExam:input_type -> v1.AddQuestionToExamRequest
	20, // 66: v1.ExamService.RemoveQuestionFromExam:input_type -> v1.RemoveQuestionFromExamRequest
	22, // 67: v1.ExamService.ReorderExamQuestions:input_type -> v1.ReorderExamQuestionsRequest
	25, // 68: v1.ExamService.GetExamQuestions:input_type -> v1.GetExamQuestionsRequest
	28, // 69: v1.ExamService.StartExam:input_type -> v1.StartExamRequest
	30, // 70: v1.ExamService.SubmitAnswer:input_type -> v1.SubmitAnswerRequest
	32, // 71: v1.ExamService.SubmitExam:input_type -> v1.SubmitExamRequest
	34, // 72: v1.ExamService.GetExamAttempt:input_type -> v1.GetExamAttemptRequest
	38, // 73: v1.ExamService.GetExamResults:input_type -> v1.GetExamResultsRequest
	40, // 74: v1.ExamService.GetExamStatistics:input_type -> v1.GetExamStatisticsRequest
	44, // 75: v1.ExamService.GetUserPerformance:input_type -> v1.GetUserPerformanceRequest
	7,  // 76: v1.ExamService.CreateExam:output_type -> v1.CreateExamResponse
	11, // 77: v1.ExamService.UpdateExam:output_type -> v1.UpdateExamResponse
	13, // 78: v1.ExamService.DeleteExam:output_type -> v1.DeleteExamResponse
	9,  // 79: v1.ExamService.GetExam:output_type -> v1.GetExamResponse
	48, // 80: v1.ExamService.ListExams:output_type -> v1.ListExamsResponse
	15, // 81: v1.ExamService.PublishExam:output_type -> v1.PublishExamResponse
	17, // 82: v1.ExamService.ArchiveExam:output_type -> v1.ArchiveExamResponse
	19, // 83: v1.ExamService.AddQuestionToExam:output_type -> v1.AddQuestionToExamResponse
	21, // 84: v1.ExamService.RemoveQuestionFromExam:output_type -> v1.RemoveQuestionFromExamResponse
	24, // 85: v1.ExamService.ReorderExamQuestions:output_type -> v1.ReorderExamQuestionsResponse
	26, // 86: v1.ExamService.GetExamQuestions:output_type -> v1.GetExamQuestionsResponse
	29, // 87: v1.ExamService.StartExam:output_type -> v1.StartExamResponse
	31, // 88: v1.ExamService.SubmitAnswer:output_type -> v1.SubmitAnswerResponse
	33, // 89: v1.ExamService.SubmitExam:output_type -> v1.SubmitExamResponse
	35, // 90: v1.ExamService.GetExamAttempt:output_type -> v1.GetExamAttemptResponse
	39, // 91: v1.ExamService.GetExamResults:output_type -> v1.GetExamResultsResponse
	41, // 92: v1.ExamService.GetExamStatistics:output_type -> v1.GetExamStatisticsResponse
	45, // 93: v1.ExamService.GetUserPerformance:output_type -> v1.GetUserPerformanceResponse
	76, // [76:94] is the sub-list for method output_type
	58, // [58:76] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_v1_exam_proto_init() }
func file_v1_exam_proto_init() {
	if File_v1_exam_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_exam_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishExamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishExamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveExamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveExamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQuestionToExamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQuestionToExamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveQuestionFromExamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveQuestionFromExamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReorderExamQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReorderExamQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExamQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExamQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartExamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartExamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitAnswerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitAnswerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitExamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitExamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExamAttemptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExamAttemptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExamResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExamResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExamStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExamStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPerformanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPerformanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_exam_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_exam_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_exam_proto_goTypes,
		DependencyIndexes: file_v1_exam_proto_depIdxs,
		EnumInfos:         file_v1_exam_proto_enumTypes,
		MessageInfos:      file_v1_exam_proto_msgTypes,
	}.Build()
	File_v1_exam_proto = out.File
	file_v1_exam_proto_rawDesc = nil
	file_v1_exam_proto_goTypes = nil
	file_v1_exam_proto_depIdxs = nil
}
