// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: v1/question_filter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuestionFilterService_ListQuestionsByFilter_FullMethodName      = "/v1.QuestionFilterService/ListQuestionsByFilter"
	QuestionFilterService_SearchQuestions_FullMethodName            = "/v1.QuestionFilterService/SearchQuestions"
	QuestionFilterService_GetQuestionsByQuestionCode_FullMethodName = "/v1.QuestionFilterService/GetQuestionsByQuestionCode"
)

// QuestionFilterServiceClient is the client API for QuestionFilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// QuestionFilterService handles advanced question filtering operations
type QuestionFilterServiceClient interface {
	// ListQuestionsByFilter lists questions with comprehensive filtering
	ListQuestionsByFilter(ctx context.Context, in *ListQuestionsByFilterRequest, opts ...grpc.CallOption) (*ListQuestionsByFilterResponse, error)
	// SearchQuestions performs full-text search with filters
	SearchQuestions(ctx context.Context, in *SearchQuestionsRequest, opts ...grpc.CallOption) (*SearchQuestionsResponse, error)
	// GetQuestionsByQuestionCode gets questions by QuestionCode components
	GetQuestionsByQuestionCode(ctx context.Context, in *GetQuestionsByQuestionCodeRequest, opts ...grpc.CallOption) (*GetQuestionsByQuestionCodeResponse, error)
}

type questionFilterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionFilterServiceClient(cc grpc.ClientConnInterface) QuestionFilterServiceClient {
	return &questionFilterServiceClient{cc}
}

func (c *questionFilterServiceClient) ListQuestionsByFilter(ctx context.Context, in *ListQuestionsByFilterRequest, opts ...grpc.CallOption) (*ListQuestionsByFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuestionsByFilterResponse)
	err := c.cc.Invoke(ctx, QuestionFilterService_ListQuestionsByFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionFilterServiceClient) SearchQuestions(ctx context.Context, in *SearchQuestionsRequest, opts ...grpc.CallOption) (*SearchQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionFilterService_SearchQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionFilterServiceClient) GetQuestionsByQuestionCode(ctx context.Context, in *GetQuestionsByQuestionCodeRequest, opts ...grpc.CallOption) (*GetQuestionsByQuestionCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsByQuestionCodeResponse)
	err := c.cc.Invoke(ctx, QuestionFilterService_GetQuestionsByQuestionCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionFilterServiceServer is the server API for QuestionFilterService service.
// All implementations must embed UnimplementedQuestionFilterServiceServer
// for forward compatibility.
//
// QuestionFilterService handles advanced question filtering operations
type QuestionFilterServiceServer interface {
	// ListQuestionsByFilter lists questions with comprehensive filtering
	ListQuestionsByFilter(context.Context, *ListQuestionsByFilterRequest) (*ListQuestionsByFilterResponse, error)
	// SearchQuestions performs full-text search with filters
	SearchQuestions(context.Context, *SearchQuestionsRequest) (*SearchQuestionsResponse, error)
	// GetQuestionsByQuestionCode gets questions by QuestionCode components
	GetQuestionsByQuestionCode(context.Context, *GetQuestionsByQuestionCodeRequest) (*GetQuestionsByQuestionCodeResponse, error)
	mustEmbedUnimplementedQuestionFilterServiceServer()
}

// UnimplementedQuestionFilterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionFilterServiceServer struct{}

func (UnimplementedQuestionFilterServiceServer) ListQuestionsByFilter(context.Context, *ListQuestionsByFilterRequest) (*ListQuestionsByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestionsByFilter not implemented")
}
func (UnimplementedQuestionFilterServiceServer) SearchQuestions(context.Context, *SearchQuestionsRequest) (*SearchQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQuestions not implemented")
}
func (UnimplementedQuestionFilterServiceServer) GetQuestionsByQuestionCode(context.Context, *GetQuestionsByQuestionCodeRequest) (*GetQuestionsByQuestionCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionsByQuestionCode not implemented")
}
func (UnimplementedQuestionFilterServiceServer) mustEmbedUnimplementedQuestionFilterServiceServer() {}
func (UnimplementedQuestionFilterServiceServer) testEmbeddedByValue()                               {}

// UnsafeQuestionFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionFilterServiceServer will
// result in compilation errors.
type UnsafeQuestionFilterServiceServer interface {
	mustEmbedUnimplementedQuestionFilterServiceServer()
}

func RegisterQuestionFilterServiceServer(s grpc.ServiceRegistrar, srv QuestionFilterServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuestionFilterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuestionFilterService_ServiceDesc, srv)
}

func _QuestionFilterService_ListQuestionsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionFilterServiceServer).ListQuestionsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionFilterService_ListQuestionsByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionFilterServiceServer).ListQuestionsByFilter(ctx, req.(*ListQuestionsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionFilterService_SearchQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionFilterServiceServer).SearchQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionFilterService_SearchQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionFilterServiceServer).SearchQuestions(ctx, req.(*SearchQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionFilterService_GetQuestionsByQuestionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsByQuestionCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionFilterServiceServer).GetQuestionsByQuestionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionFilterService_GetQuestionsByQuestionCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionFilterServiceServer).GetQuestionsByQuestionCode(ctx, req.(*GetQuestionsByQuestionCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionFilterService_ServiceDesc is the grpc.ServiceDesc for QuestionFilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionFilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.QuestionFilterService",
	HandlerType: (*QuestionFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListQuestionsByFilter",
			Handler:    _QuestionFilterService_ListQuestionsByFilter_Handler,
		},
		{
			MethodName: "SearchQuestions",
			Handler:    _QuestionFilterService_SearchQuestions_Handler,
		},
		{
			MethodName: "GetQuestionsByQuestionCode",
			Handler:    _QuestionFilterService_GetQuestionsByQuestionCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/question_filter.proto",
}
