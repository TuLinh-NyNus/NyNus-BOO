// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/faq.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FAQService_ListFAQs_FullMethodName              = "/v1.FAQService/ListFAQs"
	FAQService_GetFAQ_FullMethodName                = "/v1.FAQService/GetFAQ"
	FAQService_CreateFAQ_FullMethodName             = "/v1.FAQService/CreateFAQ"
	FAQService_UpdateFAQ_FullMethodName             = "/v1.FAQService/UpdateFAQ"
	FAQService_DeleteFAQ_FullMethodName             = "/v1.FAQService/DeleteFAQ"
	FAQService_IncrementViewCount_FullMethodName    = "/v1.FAQService/IncrementViewCount"
	FAQService_IncrementHelpfulCount_FullMethodName = "/v1.FAQService/IncrementHelpfulCount"
)

// FAQServiceClient is the client API for FAQService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FAQ service definition
type FAQServiceClient interface {
	// List FAQs with filters and pagination
	ListFAQs(ctx context.Context, in *ListFAQsRequest, opts ...grpc.CallOption) (*ListFAQsResponse, error)
	// Get single FAQ
	GetFAQ(ctx context.Context, in *GetFAQRequest, opts ...grpc.CallOption) (*GetFAQResponse, error)
	// Create new FAQ (admin only)
	CreateFAQ(ctx context.Context, in *CreateFAQRequest, opts ...grpc.CallOption) (*CreateFAQResponse, error)
	// Update FAQ (admin only)
	UpdateFAQ(ctx context.Context, in *UpdateFAQRequest, opts ...grpc.CallOption) (*UpdateFAQResponse, error)
	// Delete FAQ (admin only)
	DeleteFAQ(ctx context.Context, in *DeleteFAQRequest, opts ...grpc.CallOption) (*DeleteFAQResponse, error)
	// Increment view count (public)
	IncrementViewCount(ctx context.Context, in *IncrementViewCountRequest, opts ...grpc.CallOption) (*IncrementViewCountResponse, error)
	// Increment helpful count (public)
	IncrementHelpfulCount(ctx context.Context, in *IncrementHelpfulCountRequest, opts ...grpc.CallOption) (*IncrementHelpfulCountResponse, error)
}

type fAQServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFAQServiceClient(cc grpc.ClientConnInterface) FAQServiceClient {
	return &fAQServiceClient{cc}
}

func (c *fAQServiceClient) ListFAQs(ctx context.Context, in *ListFAQsRequest, opts ...grpc.CallOption) (*ListFAQsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFAQsResponse)
	err := c.cc.Invoke(ctx, FAQService_ListFAQs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fAQServiceClient) GetFAQ(ctx context.Context, in *GetFAQRequest, opts ...grpc.CallOption) (*GetFAQResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFAQResponse)
	err := c.cc.Invoke(ctx, FAQService_GetFAQ_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fAQServiceClient) CreateFAQ(ctx context.Context, in *CreateFAQRequest, opts ...grpc.CallOption) (*CreateFAQResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFAQResponse)
	err := c.cc.Invoke(ctx, FAQService_CreateFAQ_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fAQServiceClient) UpdateFAQ(ctx context.Context, in *UpdateFAQRequest, opts ...grpc.CallOption) (*UpdateFAQResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFAQResponse)
	err := c.cc.Invoke(ctx, FAQService_UpdateFAQ_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fAQServiceClient) DeleteFAQ(ctx context.Context, in *DeleteFAQRequest, opts ...grpc.CallOption) (*DeleteFAQResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFAQResponse)
	err := c.cc.Invoke(ctx, FAQService_DeleteFAQ_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fAQServiceClient) IncrementViewCount(ctx context.Context, in *IncrementViewCountRequest, opts ...grpc.CallOption) (*IncrementViewCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncrementViewCountResponse)
	err := c.cc.Invoke(ctx, FAQService_IncrementViewCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fAQServiceClient) IncrementHelpfulCount(ctx context.Context, in *IncrementHelpfulCountRequest, opts ...grpc.CallOption) (*IncrementHelpfulCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncrementHelpfulCountResponse)
	err := c.cc.Invoke(ctx, FAQService_IncrementHelpfulCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FAQServiceServer is the server API for FAQService service.
// All implementations should embed UnimplementedFAQServiceServer
// for forward compatibility.
//
// FAQ service definition
type FAQServiceServer interface {
	// List FAQs with filters and pagination
	ListFAQs(context.Context, *ListFAQsRequest) (*ListFAQsResponse, error)
	// Get single FAQ
	GetFAQ(context.Context, *GetFAQRequest) (*GetFAQResponse, error)
	// Create new FAQ (admin only)
	CreateFAQ(context.Context, *CreateFAQRequest) (*CreateFAQResponse, error)
	// Update FAQ (admin only)
	UpdateFAQ(context.Context, *UpdateFAQRequest) (*UpdateFAQResponse, error)
	// Delete FAQ (admin only)
	DeleteFAQ(context.Context, *DeleteFAQRequest) (*DeleteFAQResponse, error)
	// Increment view count (public)
	IncrementViewCount(context.Context, *IncrementViewCountRequest) (*IncrementViewCountResponse, error)
	// Increment helpful count (public)
	IncrementHelpfulCount(context.Context, *IncrementHelpfulCountRequest) (*IncrementHelpfulCountResponse, error)
}

// UnimplementedFAQServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFAQServiceServer struct{}

func (UnimplementedFAQServiceServer) ListFAQs(context.Context, *ListFAQsRequest) (*ListFAQsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFAQs not implemented")
}
func (UnimplementedFAQServiceServer) GetFAQ(context.Context, *GetFAQRequest) (*GetFAQResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFAQ not implemented")
}
func (UnimplementedFAQServiceServer) CreateFAQ(context.Context, *CreateFAQRequest) (*CreateFAQResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFAQ not implemented")
}
func (UnimplementedFAQServiceServer) UpdateFAQ(context.Context, *UpdateFAQRequest) (*UpdateFAQResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFAQ not implemented")
}
func (UnimplementedFAQServiceServer) DeleteFAQ(context.Context, *DeleteFAQRequest) (*DeleteFAQResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFAQ not implemented")
}
func (UnimplementedFAQServiceServer) IncrementViewCount(context.Context, *IncrementViewCountRequest) (*IncrementViewCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementViewCount not implemented")
}
func (UnimplementedFAQServiceServer) IncrementHelpfulCount(context.Context, *IncrementHelpfulCountRequest) (*IncrementHelpfulCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementHelpfulCount not implemented")
}
func (UnimplementedFAQServiceServer) testEmbeddedByValue() {}

// UnsafeFAQServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FAQServiceServer will
// result in compilation errors.
type UnsafeFAQServiceServer interface {
	mustEmbedUnimplementedFAQServiceServer()
}

func RegisterFAQServiceServer(s grpc.ServiceRegistrar, srv FAQServiceServer) {
	// If the following call pancis, it indicates UnimplementedFAQServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FAQService_ServiceDesc, srv)
}

func _FAQService_ListFAQs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFAQsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FAQServiceServer).ListFAQs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FAQService_ListFAQs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FAQServiceServer).ListFAQs(ctx, req.(*ListFAQsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FAQService_GetFAQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFAQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FAQServiceServer).GetFAQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FAQService_GetFAQ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FAQServiceServer).GetFAQ(ctx, req.(*GetFAQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FAQService_CreateFAQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFAQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FAQServiceServer).CreateFAQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FAQService_CreateFAQ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FAQServiceServer).CreateFAQ(ctx, req.(*CreateFAQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FAQService_UpdateFAQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFAQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FAQServiceServer).UpdateFAQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FAQService_UpdateFAQ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FAQServiceServer).UpdateFAQ(ctx, req.(*UpdateFAQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FAQService_DeleteFAQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFAQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FAQServiceServer).DeleteFAQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FAQService_DeleteFAQ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FAQServiceServer).DeleteFAQ(ctx, req.(*DeleteFAQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FAQService_IncrementViewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementViewCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FAQServiceServer).IncrementViewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FAQService_IncrementViewCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FAQServiceServer).IncrementViewCount(ctx, req.(*IncrementViewCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FAQService_IncrementHelpfulCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementHelpfulCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FAQServiceServer).IncrementHelpfulCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FAQService_IncrementHelpfulCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FAQServiceServer).IncrementHelpfulCount(ctx, req.(*IncrementHelpfulCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FAQService_ServiceDesc is the grpc.ServiceDesc for FAQService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FAQService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FAQService",
	HandlerType: (*FAQServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFAQs",
			Handler:    _FAQService_ListFAQs_Handler,
		},
		{
			MethodName: "GetFAQ",
			Handler:    _FAQService_GetFAQ_Handler,
		},
		{
			MethodName: "CreateFAQ",
			Handler:    _FAQService_CreateFAQ_Handler,
		},
		{
			MethodName: "UpdateFAQ",
			Handler:    _FAQService_UpdateFAQ_Handler,
		},
		{
			MethodName: "DeleteFAQ",
			Handler:    _FAQService_DeleteFAQ_Handler,
		},
		{
			MethodName: "IncrementViewCount",
			Handler:    _FAQService_IncrementViewCount_Handler,
		},
		{
			MethodName: "IncrementHelpfulCount",
			Handler:    _FAQService_IncrementHelpfulCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/faq.proto",
}
