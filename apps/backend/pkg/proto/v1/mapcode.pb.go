// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v6.31.1
// source: v1/mapcode.proto

package v1

import (
	common "exam-bank-system/apps/backend/pkg/proto/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MapCode Version
type MapCodeVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version     string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                      // e.g., "v2025-09-22"
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                            // Display name
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`              // Version description
	FilePath    string                 `protobuf:"bytes,5,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`    // Path to MapCode file
	IsActive    bool                   `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`   // Whether this is active version
	CreatedBy   string                 `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"` // User who created this version
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *MapCodeVersion) Reset() {
	*x = MapCodeVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapCodeVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapCodeVersion) ProtoMessage() {}

func (x *MapCodeVersion) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapCodeVersion.ProtoReflect.Descriptor instead.
func (*MapCodeVersion) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{0}
}

func (x *MapCodeVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MapCodeVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MapCodeVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapCodeVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MapCodeVersion) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *MapCodeVersion) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *MapCodeVersion) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *MapCodeVersion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MapCodeVersion) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Translation result
type MapCodeTranslation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionCode string `protobuf:"bytes,1,opt,name=question_code,json=questionCode,proto3" json:"question_code,omitempty"` // Original question code
	Translation  string `protobuf:"bytes,2,opt,name=translation,proto3" json:"translation,omitempty"`                       // Human-readable translation
	Grade        string `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`                                   // Parsed grade
	Subject      string `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`                               // Parsed subject
	Chapter      string `protobuf:"bytes,5,opt,name=chapter,proto3" json:"chapter,omitempty"`                               // Parsed chapter
	Level        string `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`                                   // Parsed level
	Lesson       string `protobuf:"bytes,7,opt,name=lesson,proto3" json:"lesson,omitempty"`                                 // Parsed lesson
	Form         string `protobuf:"bytes,8,opt,name=form,proto3" json:"form,omitempty"`                                     // Parsed form (optional)
}

func (x *MapCodeTranslation) Reset() {
	*x = MapCodeTranslation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapCodeTranslation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapCodeTranslation) ProtoMessage() {}

func (x *MapCodeTranslation) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapCodeTranslation.ProtoReflect.Descriptor instead.
func (*MapCodeTranslation) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{1}
}

func (x *MapCodeTranslation) GetQuestionCode() string {
	if x != nil {
		return x.QuestionCode
	}
	return ""
}

func (x *MapCodeTranslation) GetTranslation() string {
	if x != nil {
		return x.Translation
	}
	return ""
}

func (x *MapCodeTranslation) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *MapCodeTranslation) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *MapCodeTranslation) GetChapter() string {
	if x != nil {
		return x.Chapter
	}
	return ""
}

func (x *MapCodeTranslation) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *MapCodeTranslation) GetLesson() string {
	if x != nil {
		return x.Lesson
	}
	return ""
}

func (x *MapCodeTranslation) GetForm() string {
	if x != nil {
		return x.Form
	}
	return ""
}

// Hierarchy navigation
type HierarchyNavigation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionCode string          `protobuf:"bytes,1,opt,name=question_code,json=questionCode,proto3" json:"question_code,omitempty"`
	Grade        *HierarchyLevel `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"`
	Subject      *HierarchyLevel `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	Chapter      *HierarchyLevel `protobuf:"bytes,4,opt,name=chapter,proto3" json:"chapter,omitempty"`
	Level        *HierarchyLevel `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	Lesson       *HierarchyLevel `protobuf:"bytes,6,opt,name=lesson,proto3" json:"lesson,omitempty"`
	Form         *HierarchyLevel `protobuf:"bytes,7,opt,name=form,proto3" json:"form,omitempty"` // Optional for ID6 format
	Breadcrumbs  []string        `protobuf:"bytes,8,rep,name=breadcrumbs,proto3" json:"breadcrumbs,omitempty"`
}

func (x *HierarchyNavigation) Reset() {
	*x = HierarchyNavigation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchyNavigation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchyNavigation) ProtoMessage() {}

func (x *HierarchyNavigation) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchyNavigation.ProtoReflect.Descriptor instead.
func (*HierarchyNavigation) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{2}
}

func (x *HierarchyNavigation) GetQuestionCode() string {
	if x != nil {
		return x.QuestionCode
	}
	return ""
}

func (x *HierarchyNavigation) GetGrade() *HierarchyLevel {
	if x != nil {
		return x.Grade
	}
	return nil
}

func (x *HierarchyNavigation) GetSubject() *HierarchyLevel {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *HierarchyNavigation) GetChapter() *HierarchyLevel {
	if x != nil {
		return x.Chapter
	}
	return nil
}

func (x *HierarchyNavigation) GetLevel() *HierarchyLevel {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *HierarchyNavigation) GetLesson() *HierarchyLevel {
	if x != nil {
		return x.Lesson
	}
	return nil
}

func (x *HierarchyNavigation) GetForm() *HierarchyLevel {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *HierarchyNavigation) GetBreadcrumbs() []string {
	if x != nil {
		return x.Breadcrumbs
	}
	return nil
}

type HierarchyLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`               // Single character code
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               // Display name
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"` // Full description
}

func (x *HierarchyLevel) Reset() {
	*x = HierarchyLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchyLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchyLevel) ProtoMessage() {}

func (x *HierarchyLevel) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchyLevel.ProtoReflect.Descriptor instead.
func (*HierarchyLevel) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{3}
}

func (x *HierarchyLevel) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *HierarchyLevel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HierarchyLevel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Storage information
type StorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalVersions  int32  `protobuf:"varint,1,opt,name=total_versions,json=totalVersions,proto3" json:"total_versions,omitempty"`
	MaxVersions    int32  `protobuf:"varint,2,opt,name=max_versions,json=maxVersions,proto3" json:"max_versions,omitempty"`
	AvailableSlots int32  `protobuf:"varint,3,opt,name=available_slots,json=availableSlots,proto3" json:"available_slots,omitempty"`
	WarningLevel   int32  `protobuf:"varint,4,opt,name=warning_level,json=warningLevel,proto3" json:"warning_level,omitempty"`
	IsNearLimit    bool   `protobuf:"varint,5,opt,name=is_near_limit,json=isNearLimit,proto3" json:"is_near_limit,omitempty"`
	IsAtLimit      bool   `protobuf:"varint,6,opt,name=is_at_limit,json=isAtLimit,proto3" json:"is_at_limit,omitempty"`
	WarningMessage string `protobuf:"bytes,7,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
}

func (x *StorageInfo) Reset() {
	*x = StorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageInfo) ProtoMessage() {}

func (x *StorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageInfo.ProtoReflect.Descriptor instead.
func (*StorageInfo) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{4}
}

func (x *StorageInfo) GetTotalVersions() int32 {
	if x != nil {
		return x.TotalVersions
	}
	return 0
}

func (x *StorageInfo) GetMaxVersions() int32 {
	if x != nil {
		return x.MaxVersions
	}
	return 0
}

func (x *StorageInfo) GetAvailableSlots() int32 {
	if x != nil {
		return x.AvailableSlots
	}
	return 0
}

func (x *StorageInfo) GetWarningLevel() int32 {
	if x != nil {
		return x.WarningLevel
	}
	return 0
}

func (x *StorageInfo) GetIsNearLimit() bool {
	if x != nil {
		return x.IsNearLimit
	}
	return false
}

func (x *StorageInfo) GetIsAtLimit() bool {
	if x != nil {
		return x.IsAtLimit
	}
	return false
}

func (x *StorageInfo) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

// Version Management
type CreateVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`                      // Version identifier
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            // Display name
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`              // Version description
	CreatedBy   string `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"` // User creating the version
	Content     string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                      // MapCode file content (optional - for upload)
}

func (x *CreateVersionRequest) Reset() {
	*x = CreateVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVersionRequest) ProtoMessage() {}

func (x *CreateVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVersionRequest.ProtoReflect.Descriptor instead.
func (*CreateVersionRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{5}
}

func (x *CreateVersionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateVersionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVersionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateVersionRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateVersionRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CreateVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *common.Response `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Version *MapCodeVersion  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CreateVersionResponse) Reset() {
	*x = CreateVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVersionResponse) ProtoMessage() {}

func (x *CreateVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVersionResponse.ProtoReflect.Descriptor instead.
func (*CreateVersionResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{6}
}

func (x *CreateVersionResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateVersionResponse) GetVersion() *MapCodeVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type GetVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetVersionsRequest) Reset() {
	*x = GetVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionsRequest) ProtoMessage() {}

func (x *GetVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionsRequest.ProtoReflect.Descriptor instead.
func (*GetVersionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{7}
}

func (x *GetVersionsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetVersionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *common.Response           `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Versions   []*MapCodeVersion          `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	Pagination *common.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetVersionsResponse) Reset() {
	*x = GetVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionsResponse) ProtoMessage() {}

func (x *GetVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionsResponse.ProtoReflect.Descriptor instead.
func (*GetVersionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{8}
}

func (x *GetVersionsResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetVersionsResponse) GetVersions() []*MapCodeVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *GetVersionsResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetActiveVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetActiveVersionRequest) Reset() {
	*x = GetActiveVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveVersionRequest) ProtoMessage() {}

func (x *GetActiveVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveVersionRequest.ProtoReflect.Descriptor instead.
func (*GetActiveVersionRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{9}
}

type GetActiveVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *common.Response `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Version *MapCodeVersion  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetActiveVersionResponse) Reset() {
	*x = GetActiveVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveVersionResponse) ProtoMessage() {}

func (x *GetActiveVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveVersionResponse.ProtoReflect.Descriptor instead.
func (*GetActiveVersionResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{10}
}

func (x *GetActiveVersionResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetActiveVersionResponse) GetVersion() *MapCodeVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

type SetActiveVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *SetActiveVersionRequest) Reset() {
	*x = SetActiveVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActiveVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveVersionRequest) ProtoMessage() {}

func (x *SetActiveVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveVersionRequest.ProtoReflect.Descriptor instead.
func (*SetActiveVersionRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{11}
}

func (x *SetActiveVersionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type SetActiveVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *common.Response `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SetActiveVersionResponse) Reset() {
	*x = SetActiveVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActiveVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveVersionResponse) ProtoMessage() {}

func (x *SetActiveVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveVersionResponse.ProtoReflect.Descriptor instead.
func (*SetActiveVersionResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{12}
}

func (x *SetActiveVersionResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SetActiveVersionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *DeleteVersionRequest) Reset() {
	*x = DeleteVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVersionRequest) ProtoMessage() {}

func (x *DeleteVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVersionRequest.ProtoReflect.Descriptor instead.
func (*DeleteVersionRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteVersionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type DeleteVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *common.Response `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteVersionResponse) Reset() {
	*x = DeleteVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVersionResponse) ProtoMessage() {}

func (x *DeleteVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVersionResponse.ProtoReflect.Descriptor instead.
func (*DeleteVersionResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteVersionResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeleteVersionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Translation Services
type TranslateCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionCode string `protobuf:"bytes,1,opt,name=question_code,json=questionCode,proto3" json:"question_code,omitempty"`
}

func (x *TranslateCodeRequest) Reset() {
	*x = TranslateCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateCodeRequest) ProtoMessage() {}

func (x *TranslateCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateCodeRequest.ProtoReflect.Descriptor instead.
func (*TranslateCodeRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{15}
}

func (x *TranslateCodeRequest) GetQuestionCode() string {
	if x != nil {
		return x.QuestionCode
	}
	return ""
}

type TranslateCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      *common.Response    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Translation *MapCodeTranslation `protobuf:"bytes,2,opt,name=translation,proto3" json:"translation,omitempty"`
}

func (x *TranslateCodeResponse) Reset() {
	*x = TranslateCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateCodeResponse) ProtoMessage() {}

func (x *TranslateCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateCodeResponse.ProtoReflect.Descriptor instead.
func (*TranslateCodeResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{16}
}

func (x *TranslateCodeResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TranslateCodeResponse) GetTranslation() *MapCodeTranslation {
	if x != nil {
		return x.Translation
	}
	return nil
}

type TranslateCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionCodes []string `protobuf:"bytes,1,rep,name=question_codes,json=questionCodes,proto3" json:"question_codes,omitempty"`
}

func (x *TranslateCodesRequest) Reset() {
	*x = TranslateCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateCodesRequest) ProtoMessage() {}

func (x *TranslateCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateCodesRequest.ProtoReflect.Descriptor instead.
func (*TranslateCodesRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{17}
}

func (x *TranslateCodesRequest) GetQuestionCodes() []string {
	if x != nil {
		return x.QuestionCodes
	}
	return nil
}

type TranslateCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       *common.Response  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Translations map[string]string `protobuf:"bytes,2,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // question_code -> translation
}

func (x *TranslateCodesResponse) Reset() {
	*x = TranslateCodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateCodesResponse) ProtoMessage() {}

func (x *TranslateCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateCodesResponse.ProtoReflect.Descriptor instead.
func (*TranslateCodesResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{18}
}

func (x *TranslateCodesResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TranslateCodesResponse) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

type GetHierarchyNavigationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionCode string `protobuf:"bytes,1,opt,name=question_code,json=questionCode,proto3" json:"question_code,omitempty"`
}

func (x *GetHierarchyNavigationRequest) Reset() {
	*x = GetHierarchyNavigationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHierarchyNavigationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHierarchyNavigationRequest) ProtoMessage() {}

func (x *GetHierarchyNavigationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHierarchyNavigationRequest.ProtoReflect.Descriptor instead.
func (*GetHierarchyNavigationRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{19}
}

func (x *GetHierarchyNavigationRequest) GetQuestionCode() string {
	if x != nil {
		return x.QuestionCode
	}
	return ""
}

type GetHierarchyNavigationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *common.Response     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Navigation *HierarchyNavigation `protobuf:"bytes,2,opt,name=navigation,proto3" json:"navigation,omitempty"`
}

func (x *GetHierarchyNavigationResponse) Reset() {
	*x = GetHierarchyNavigationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHierarchyNavigationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHierarchyNavigationResponse) ProtoMessage() {}

func (x *GetHierarchyNavigationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHierarchyNavigationResponse.ProtoReflect.Descriptor instead.
func (*GetHierarchyNavigationResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{20}
}

func (x *GetHierarchyNavigationResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetHierarchyNavigationResponse) GetNavigation() *HierarchyNavigation {
	if x != nil {
		return x.Navigation
	}
	return nil
}

// Storage Management
type GetStorageInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStorageInfoRequest) Reset() {
	*x = GetStorageInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStorageInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStorageInfoRequest) ProtoMessage() {}

func (x *GetStorageInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStorageInfoRequest.ProtoReflect.Descriptor instead.
func (*GetStorageInfoRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{21}
}

type GetStorageInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *common.Response `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Storage *StorageInfo     `protobuf:"bytes,2,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *GetStorageInfoResponse) Reset() {
	*x = GetStorageInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStorageInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStorageInfoResponse) ProtoMessage() {}

func (x *GetStorageInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStorageInfoResponse.ProtoReflect.Descriptor instead.
func (*GetStorageInfoResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{22}
}

func (x *GetStorageInfoResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetStorageInfoResponse) GetStorage() *StorageInfo {
	if x != nil {
		return x.Storage
	}
	return nil
}

// Configuration Access
type GetMapCodeConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"` // Optional: specific version, if empty use active
}

func (x *GetMapCodeConfigRequest) Reset() {
	*x = GetMapCodeConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMapCodeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMapCodeConfigRequest) ProtoMessage() {}

func (x *GetMapCodeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMapCodeConfigRequest.ProtoReflect.Descriptor instead.
func (*GetMapCodeConfigRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{23}
}

func (x *GetMapCodeConfigRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type GetMapCodeConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *common.Response `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Config *MapCodeConfig   `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetMapCodeConfigResponse) Reset() {
	*x = GetMapCodeConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMapCodeConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMapCodeConfigResponse) ProtoMessage() {}

func (x *GetMapCodeConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMapCodeConfigResponse.ProtoReflect.Descriptor instead.
func (*GetMapCodeConfigResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{24}
}

func (x *GetMapCodeConfigResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetMapCodeConfigResponse) GetConfig() *MapCodeConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type MapCodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  string            `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Grades   map[string]string `protobuf:"bytes,2,rep,name=grades,proto3" json:"grades,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Subjects map[string]string `protobuf:"bytes,3,rep,name=subjects,proto3" json:"subjects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Chapters map[string]string `protobuf:"bytes,4,rep,name=chapters,proto3" json:"chapters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Levels   map[string]string `protobuf:"bytes,5,rep,name=levels,proto3" json:"levels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Lessons  map[string]string `protobuf:"bytes,6,rep,name=lessons,proto3" json:"lessons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Forms    map[string]string `protobuf:"bytes,7,rep,name=forms,proto3" json:"forms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapCodeConfig) Reset() {
	*x = MapCodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapCodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapCodeConfig) ProtoMessage() {}

func (x *MapCodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapCodeConfig.ProtoReflect.Descriptor instead.
func (*MapCodeConfig) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{25}
}

func (x *MapCodeConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MapCodeConfig) GetGrades() map[string]string {
	if x != nil {
		return x.Grades
	}
	return nil
}

func (x *MapCodeConfig) GetSubjects() map[string]string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *MapCodeConfig) GetChapters() map[string]string {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *MapCodeConfig) GetLevels() map[string]string {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *MapCodeConfig) GetLessons() map[string]string {
	if x != nil {
		return x.Lessons
	}
	return nil
}

func (x *MapCodeConfig) GetForms() map[string]string {
	if x != nil {
		return x.Forms
	}
	return nil
}

// Metrics Management
type GetMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMetricsRequest) Reset() {
	*x = GetMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsRequest) ProtoMessage() {}

func (x *GetMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetMetricsRequest) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{26}
}

type GetMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *common.Response `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Metrics *MapCodeMetrics  `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *GetMetricsResponse) Reset() {
	*x = GetMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsResponse) ProtoMessage() {}

func (x *GetMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetMetricsResponse) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{27}
}

func (x *GetMetricsResponse) GetStatus() *common.Response {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetMetricsResponse) GetMetrics() *MapCodeMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type MapCodeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTranslations    int64                  `protobuf:"varint,1,opt,name=total_translations,json=totalTranslations,proto3" json:"total_translations,omitempty"`
	CacheHits            int64                  `protobuf:"varint,2,opt,name=cache_hits,json=cacheHits,proto3" json:"cache_hits,omitempty"`
	CacheMisses          int64                  `protobuf:"varint,3,opt,name=cache_misses,json=cacheMisses,proto3" json:"cache_misses,omitempty"`
	CacheHitRate         float64                `protobuf:"fixed64,4,opt,name=cache_hit_rate,json=cacheHitRate,proto3" json:"cache_hit_rate,omitempty"`
	AvgTranslationTimeMs int64                  `protobuf:"varint,5,opt,name=avg_translation_time_ms,json=avgTranslationTimeMs,proto3" json:"avg_translation_time_ms,omitempty"`
	ActiveVersionId      string                 `protobuf:"bytes,6,opt,name=active_version_id,json=activeVersionId,proto3" json:"active_version_id,omitempty"`
	LastVersionSwitch    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_version_switch,json=lastVersionSwitch,proto3" json:"last_version_switch,omitempty"`
	TranslationErrors    int64                  `protobuf:"varint,8,opt,name=translation_errors,json=translationErrors,proto3" json:"translation_errors,omitempty"`
}

func (x *MapCodeMetrics) Reset() {
	*x = MapCodeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_mapcode_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapCodeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapCodeMetrics) ProtoMessage() {}

func (x *MapCodeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_v1_mapcode_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapCodeMetrics.ProtoReflect.Descriptor instead.
func (*MapCodeMetrics) Descriptor() ([]byte, []int) {
	return file_v1_mapcode_proto_rawDescGZIP(), []int{28}
}

func (x *MapCodeMetrics) GetTotalTranslations() int64 {
	if x != nil {
		return x.TotalTranslations
	}
	return 0
}

func (x *MapCodeMetrics) GetCacheHits() int64 {
	if x != nil {
		return x.CacheHits
	}
	return 0
}

func (x *MapCodeMetrics) GetCacheMisses() int64 {
	if x != nil {
		return x.CacheMisses
	}
	return 0
}

func (x *MapCodeMetrics) GetCacheHitRate() float64 {
	if x != nil {
		return x.CacheHitRate
	}
	return 0
}

func (x *MapCodeMetrics) GetAvgTranslationTimeMs() int64 {
	if x != nil {
		return x.AvgTranslationTimeMs
	}
	return 0
}

func (x *MapCodeMetrics) GetActiveVersionId() string {
	if x != nil {
		return x.ActiveVersionId
	}
	return ""
}

func (x *MapCodeMetrics) GetLastVersionSwitch() *timestamppb.Timestamp {
	if x != nil {
		return x.LastVersionSwitch
	}
	return nil
}

func (x *MapCodeMetrics) GetTranslationErrors() int64 {
	if x != nil {
		return x.TranslationErrors
	}
	return 0
}

var File_v1_mapcode_proto protoreflect.FileDescriptor

var file_v1_mapcode_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x0e, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe7, 0x01, 0x0a,
	0x12, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x73, 0x73,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xe0, 0x02, 0x0a, 0x13, 0x48, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x65, 0x61, 0x64,
	0x63, 0x72, 0x75, 0x6d, 0x62, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72,
	0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x73, 0x22, 0x5a, 0x0a, 0x0e, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x38, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x5b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3b, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x15,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x15, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x44, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x6f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0xe5, 0x05, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a,
	0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x05, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38,
	0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x85, 0x03, 0x0a, 0x0e,
	0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x76, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x76, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x32, 0x8c, 0x0a, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x60, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x1a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x12, 0x73, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x2a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x65, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x7d, 0x12, 0x73, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x2f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x2f, 0x7b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x12, 0x68, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x65, 0x78, 0x61, 0x6d, 0x2d, 0x62, 0x61, 0x6e, 0x6b, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_mapcode_proto_rawDescOnce sync.Once
	file_v1_mapcode_proto_rawDescData = file_v1_mapcode_proto_rawDesc
)

func file_v1_mapcode_proto_rawDescGZIP() []byte {
	file_v1_mapcode_proto_rawDescOnce.Do(func() {
		file_v1_mapcode_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_mapcode_proto_rawDescData)
	})
	return file_v1_mapcode_proto_rawDescData
}

var file_v1_mapcode_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_v1_mapcode_proto_goTypes = []interface{}{
	(*MapCodeVersion)(nil),                 // 0: v1.MapCodeVersion
	(*MapCodeTranslation)(nil),             // 1: v1.MapCodeTranslation
	(*HierarchyNavigation)(nil),            // 2: v1.HierarchyNavigation
	(*HierarchyLevel)(nil),                 // 3: v1.HierarchyLevel
	(*StorageInfo)(nil),                    // 4: v1.StorageInfo
	(*CreateVersionRequest)(nil),           // 5: v1.CreateVersionRequest
	(*CreateVersionResponse)(nil),          // 6: v1.CreateVersionResponse
	(*GetVersionsRequest)(nil),             // 7: v1.GetVersionsRequest
	(*GetVersionsResponse)(nil),            // 8: v1.GetVersionsResponse
	(*GetActiveVersionRequest)(nil),        // 9: v1.GetActiveVersionRequest
	(*GetActiveVersionResponse)(nil),       // 10: v1.GetActiveVersionResponse
	(*SetActiveVersionRequest)(nil),        // 11: v1.SetActiveVersionRequest
	(*SetActiveVersionResponse)(nil),       // 12: v1.SetActiveVersionResponse
	(*DeleteVersionRequest)(nil),           // 13: v1.DeleteVersionRequest
	(*DeleteVersionResponse)(nil),          // 14: v1.DeleteVersionResponse
	(*TranslateCodeRequest)(nil),           // 15: v1.TranslateCodeRequest
	(*TranslateCodeResponse)(nil),          // 16: v1.TranslateCodeResponse
	(*TranslateCodesRequest)(nil),          // 17: v1.TranslateCodesRequest
	(*TranslateCodesResponse)(nil),         // 18: v1.TranslateCodesResponse
	(*GetHierarchyNavigationRequest)(nil),  // 19: v1.GetHierarchyNavigationRequest
	(*GetHierarchyNavigationResponse)(nil), // 20: v1.GetHierarchyNavigationResponse
	(*GetStorageInfoRequest)(nil),          // 21: v1.GetStorageInfoRequest
	(*GetStorageInfoResponse)(nil),         // 22: v1.GetStorageInfoResponse
	(*GetMapCodeConfigRequest)(nil),        // 23: v1.GetMapCodeConfigRequest
	(*GetMapCodeConfigResponse)(nil),       // 24: v1.GetMapCodeConfigResponse
	(*MapCodeConfig)(nil),                  // 25: v1.MapCodeConfig
	(*GetMetricsRequest)(nil),              // 26: v1.GetMetricsRequest
	(*GetMetricsResponse)(nil),             // 27: v1.GetMetricsResponse
	(*MapCodeMetrics)(nil),                 // 28: v1.MapCodeMetrics
	nil,                                    // 29: v1.TranslateCodesResponse.TranslationsEntry
	nil,                                    // 30: v1.MapCodeConfig.GradesEntry
	nil,                                    // 31: v1.MapCodeConfig.SubjectsEntry
	nil,                                    // 32: v1.MapCodeConfig.ChaptersEntry
	nil,                                    // 33: v1.MapCodeConfig.LevelsEntry
	nil,                                    // 34: v1.MapCodeConfig.LessonsEntry
	nil,                                    // 35: v1.MapCodeConfig.FormsEntry
	(*timestamppb.Timestamp)(nil),          // 36: google.protobuf.Timestamp
	(*common.Response)(nil),                // 37: common.Response
	(*common.PaginationResponse)(nil),      // 38: common.PaginationResponse
}
var file_v1_mapcode_proto_depIdxs = []int32{
	36, // 0: v1.MapCodeVersion.created_at:type_name -> google.protobuf.Timestamp
	36, // 1: v1.MapCodeVersion.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 2: v1.HierarchyNavigation.grade:type_name -> v1.HierarchyLevel
	3,  // 3: v1.HierarchyNavigation.subject:type_name -> v1.HierarchyLevel
	3,  // 4: v1.HierarchyNavigation.chapter:type_name -> v1.HierarchyLevel
	3,  // 5: v1.HierarchyNavigation.level:type_name -> v1.HierarchyLevel
	3,  // 6: v1.HierarchyNavigation.lesson:type_name -> v1.HierarchyLevel
	3,  // 7: v1.HierarchyNavigation.form:type_name -> v1.HierarchyLevel
	37, // 8: v1.CreateVersionResponse.status:type_name -> common.Response
	0,  // 9: v1.CreateVersionResponse.version:type_name -> v1.MapCodeVersion
	37, // 10: v1.GetVersionsResponse.status:type_name -> common.Response
	0,  // 11: v1.GetVersionsResponse.versions:type_name -> v1.MapCodeVersion
	38, // 12: v1.GetVersionsResponse.pagination:type_name -> common.PaginationResponse
	37, // 13: v1.GetActiveVersionResponse.status:type_name -> common.Response
	0,  // 14: v1.GetActiveVersionResponse.version:type_name -> v1.MapCodeVersion
	37, // 15: v1.SetActiveVersionResponse.status:type_name -> common.Response
	37, // 16: v1.DeleteVersionResponse.status:type_name -> common.Response
	37, // 17: v1.TranslateCodeResponse.status:type_name -> common.Response
	1,  // 18: v1.TranslateCodeResponse.translation:type_name -> v1.MapCodeTranslation
	37, // 19: v1.TranslateCodesResponse.status:type_name -> common.Response
	29, // 20: v1.TranslateCodesResponse.translations:type_name -> v1.TranslateCodesResponse.TranslationsEntry
	37, // 21: v1.GetHierarchyNavigationResponse.status:type_name -> common.Response
	2,  // 22: v1.GetHierarchyNavigationResponse.navigation:type_name -> v1.HierarchyNavigation
	37, // 23: v1.GetStorageInfoResponse.status:type_name -> common.Response
	4,  // 24: v1.GetStorageInfoResponse.storage:type_name -> v1.StorageInfo
	37, // 25: v1.GetMapCodeConfigResponse.status:type_name -> common.Response
	25, // 26: v1.GetMapCodeConfigResponse.config:type_name -> v1.MapCodeConfig
	30, // 27: v1.MapCodeConfig.grades:type_name -> v1.MapCodeConfig.GradesEntry
	31, // 28: v1.MapCodeConfig.subjects:type_name -> v1.MapCodeConfig.SubjectsEntry
	32, // 29: v1.MapCodeConfig.chapters:type_name -> v1.MapCodeConfig.ChaptersEntry
	33, // 30: v1.MapCodeConfig.levels:type_name -> v1.MapCodeConfig.LevelsEntry
	34, // 31: v1.MapCodeConfig.lessons:type_name -> v1.MapCodeConfig.LessonsEntry
	35, // 32: v1.MapCodeConfig.forms:type_name -> v1.MapCodeConfig.FormsEntry
	37, // 33: v1.GetMetricsResponse.status:type_name -> common.Response
	28, // 34: v1.GetMetricsResponse.metrics:type_name -> v1.MapCodeMetrics
	36, // 35: v1.MapCodeMetrics.last_version_switch:type_name -> google.protobuf.Timestamp
	5,  // 36: v1.MapCodeService.CreateVersion:input_type -> v1.CreateVersionRequest
	7,  // 37: v1.MapCodeService.GetVersions:input_type -> v1.GetVersionsRequest
	9,  // 38: v1.MapCodeService.GetActiveVersion:input_type -> v1.GetActiveVersionRequest
	11, // 39: v1.MapCodeService.SetActiveVersion:input_type -> v1.SetActiveVersionRequest
	13, // 40: v1.MapCodeService.DeleteVersion:input_type -> v1.DeleteVersionRequest
	15, // 41: v1.MapCodeService.TranslateCode:input_type -> v1.TranslateCodeRequest
	17, // 42: v1.MapCodeService.TranslateCodes:input_type -> v1.TranslateCodesRequest
	19, // 43: v1.MapCodeService.GetHierarchyNavigation:input_type -> v1.GetHierarchyNavigationRequest
	21, // 44: v1.MapCodeService.GetStorageInfo:input_type -> v1.GetStorageInfoRequest
	23, // 45: v1.MapCodeService.GetMapCodeConfig:input_type -> v1.GetMapCodeConfigRequest
	26, // 46: v1.MapCodeService.GetMetrics:input_type -> v1.GetMetricsRequest
	6,  // 47: v1.MapCodeService.CreateVersion:output_type -> v1.CreateVersionResponse
	8,  // 48: v1.MapCodeService.GetVersions:output_type -> v1.GetVersionsResponse
	10, // 49: v1.MapCodeService.GetActiveVersion:output_type -> v1.GetActiveVersionResponse
	12, // 50: v1.MapCodeService.SetActiveVersion:output_type -> v1.SetActiveVersionResponse
	14, // 51: v1.MapCodeService.DeleteVersion:output_type -> v1.DeleteVersionResponse
	16, // 52: v1.MapCodeService.TranslateCode:output_type -> v1.TranslateCodeResponse
	18, // 53: v1.MapCodeService.TranslateCodes:output_type -> v1.TranslateCodesResponse
	20, // 54: v1.MapCodeService.GetHierarchyNavigation:output_type -> v1.GetHierarchyNavigationResponse
	22, // 55: v1.MapCodeService.GetStorageInfo:output_type -> v1.GetStorageInfoResponse
	24, // 56: v1.MapCodeService.GetMapCodeConfig:output_type -> v1.GetMapCodeConfigResponse
	27, // 57: v1.MapCodeService.GetMetrics:output_type -> v1.GetMetricsResponse
	47, // [47:58] is the sub-list for method output_type
	36, // [36:47] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_v1_mapcode_proto_init() }
func file_v1_mapcode_proto_init() {
	if File_v1_mapcode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_mapcode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapCodeVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapCodeTranslation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchyNavigation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchyLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActiveVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActiveVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateCodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHierarchyNavigationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHierarchyNavigationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStorageInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStorageInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMapCodeConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMapCodeConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapCodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_mapcode_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapCodeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_mapcode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_mapcode_proto_goTypes,
		DependencyIndexes: file_v1_mapcode_proto_depIdxs,
		MessageInfos:      file_v1_mapcode_proto_msgTypes,
	}.Build()
	File_v1_mapcode_proto = out.File
	file_v1_mapcode_proto_rawDesc = nil
	file_v1_mapcode_proto_goTypes = nil
	file_v1_mapcode_proto_depIdxs = nil
}
