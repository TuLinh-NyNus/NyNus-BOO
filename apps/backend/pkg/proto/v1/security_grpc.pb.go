// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: v1/security.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecurityService_ReportThreat_FullMethodName      = "/v1.SecurityService/ReportThreat"
	SecurityService_ExecuteResponse_FullMethodName   = "/v1.SecurityService/ExecuteResponse"
	SecurityService_GetThreats_FullMethodName        = "/v1.SecurityService/GetThreats"
	SecurityService_ValidateToken_FullMethodName     = "/v1.SecurityService/ValidateToken"
	SecurityService_InvalidateSession_FullMethodName = "/v1.SecurityService/InvalidateSession"
	SecurityService_RenewSession_FullMethodName      = "/v1.SecurityService/RenewSession"
	SecurityService_RecordTokenMetric_FullMethodName = "/v1.SecurityService/RecordTokenMetric"
	SecurityService_GetTokenMetrics_FullMethodName   = "/v1.SecurityService/GetTokenMetrics"
)

// SecurityServiceClient is the client API for SecurityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityServiceClient interface {
	// Threat Management
	ReportThreat(ctx context.Context, in *ReportThreatRequest, opts ...grpc.CallOption) (*ReportThreatResponse, error)
	ExecuteResponse(ctx context.Context, in *ExecuteResponseRequest, opts ...grpc.CallOption) (*ExecuteResponseResponse, error)
	GetThreats(ctx context.Context, in *GetThreatsRequest, opts ...grpc.CallOption) (*GetThreatsResponse, error)
	// Session Management
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	InvalidateSession(ctx context.Context, in *InvalidateSessionRequest, opts ...grpc.CallOption) (*InvalidateSessionResponse, error)
	RenewSession(ctx context.Context, in *RenewSessionRequest, opts ...grpc.CallOption) (*RenewSessionResponse, error)
	// Token Metrics
	RecordTokenMetric(ctx context.Context, in *RecordTokenMetricRequest, opts ...grpc.CallOption) (*RecordTokenMetricResponse, error)
	GetTokenMetrics(ctx context.Context, in *GetTokenMetricsRequest, opts ...grpc.CallOption) (*GetTokenMetricsResponse, error)
}

type securityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityServiceClient(cc grpc.ClientConnInterface) SecurityServiceClient {
	return &securityServiceClient{cc}
}

func (c *securityServiceClient) ReportThreat(ctx context.Context, in *ReportThreatRequest, opts ...grpc.CallOption) (*ReportThreatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportThreatResponse)
	err := c.cc.Invoke(ctx, SecurityService_ReportThreat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) ExecuteResponse(ctx context.Context, in *ExecuteResponseRequest, opts ...grpc.CallOption) (*ExecuteResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponseResponse)
	err := c.cc.Invoke(ctx, SecurityService_ExecuteResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) GetThreats(ctx context.Context, in *GetThreatsRequest, opts ...grpc.CallOption) (*GetThreatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThreatsResponse)
	err := c.cc.Invoke(ctx, SecurityService_GetThreats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, SecurityService_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) InvalidateSession(ctx context.Context, in *InvalidateSessionRequest, opts ...grpc.CallOption) (*InvalidateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvalidateSessionResponse)
	err := c.cc.Invoke(ctx, SecurityService_InvalidateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) RenewSession(ctx context.Context, in *RenewSessionRequest, opts ...grpc.CallOption) (*RenewSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenewSessionResponse)
	err := c.cc.Invoke(ctx, SecurityService_RenewSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) RecordTokenMetric(ctx context.Context, in *RecordTokenMetricRequest, opts ...grpc.CallOption) (*RecordTokenMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordTokenMetricResponse)
	err := c.cc.Invoke(ctx, SecurityService_RecordTokenMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) GetTokenMetrics(ctx context.Context, in *GetTokenMetricsRequest, opts ...grpc.CallOption) (*GetTokenMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenMetricsResponse)
	err := c.cc.Invoke(ctx, SecurityService_GetTokenMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityServiceServer is the server API for SecurityService service.
// All implementations must embed UnimplementedSecurityServiceServer
// for forward compatibility.
type SecurityServiceServer interface {
	// Threat Management
	ReportThreat(context.Context, *ReportThreatRequest) (*ReportThreatResponse, error)
	ExecuteResponse(context.Context, *ExecuteResponseRequest) (*ExecuteResponseResponse, error)
	GetThreats(context.Context, *GetThreatsRequest) (*GetThreatsResponse, error)
	// Session Management
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	InvalidateSession(context.Context, *InvalidateSessionRequest) (*InvalidateSessionResponse, error)
	RenewSession(context.Context, *RenewSessionRequest) (*RenewSessionResponse, error)
	// Token Metrics
	RecordTokenMetric(context.Context, *RecordTokenMetricRequest) (*RecordTokenMetricResponse, error)
	GetTokenMetrics(context.Context, *GetTokenMetricsRequest) (*GetTokenMetricsResponse, error)
	mustEmbedUnimplementedSecurityServiceServer()
}

// UnimplementedSecurityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecurityServiceServer struct{}

func (UnimplementedSecurityServiceServer) ReportThreat(context.Context, *ReportThreatRequest) (*ReportThreatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportThreat not implemented")
}
func (UnimplementedSecurityServiceServer) ExecuteResponse(context.Context, *ExecuteResponseRequest) (*ExecuteResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteResponse not implemented")
}
func (UnimplementedSecurityServiceServer) GetThreats(context.Context, *GetThreatsRequest) (*GetThreatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreats not implemented")
}
func (UnimplementedSecurityServiceServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedSecurityServiceServer) InvalidateSession(context.Context, *InvalidateSessionRequest) (*InvalidateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateSession not implemented")
}
func (UnimplementedSecurityServiceServer) RenewSession(context.Context, *RenewSessionRequest) (*RenewSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewSession not implemented")
}
func (UnimplementedSecurityServiceServer) RecordTokenMetric(context.Context, *RecordTokenMetricRequest) (*RecordTokenMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordTokenMetric not implemented")
}
func (UnimplementedSecurityServiceServer) GetTokenMetrics(context.Context, *GetTokenMetricsRequest) (*GetTokenMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenMetrics not implemented")
}
func (UnimplementedSecurityServiceServer) mustEmbedUnimplementedSecurityServiceServer() {}
func (UnimplementedSecurityServiceServer) testEmbeddedByValue()                         {}

// UnsafeSecurityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityServiceServer will
// result in compilation errors.
type UnsafeSecurityServiceServer interface {
	mustEmbedUnimplementedSecurityServiceServer()
}

func RegisterSecurityServiceServer(s grpc.ServiceRegistrar, srv SecurityServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecurityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecurityService_ServiceDesc, srv)
}

func _SecurityService_ReportThreat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportThreatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).ReportThreat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_ReportThreat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).ReportThreat(ctx, req.(*ReportThreatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_ExecuteResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).ExecuteResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_ExecuteResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).ExecuteResponse(ctx, req.(*ExecuteResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_GetThreats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GetThreats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_GetThreats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GetThreats(ctx, req.(*GetThreatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_InvalidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).InvalidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_InvalidateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).InvalidateSession(ctx, req.(*InvalidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_RenewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).RenewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_RenewSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).RenewSession(ctx, req.(*RenewSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_RecordTokenMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordTokenMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).RecordTokenMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_RecordTokenMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).RecordTokenMetric(ctx, req.(*RecordTokenMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_GetTokenMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GetTokenMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_GetTokenMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GetTokenMetrics(ctx, req.(*GetTokenMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityService_ServiceDesc is the grpc.ServiceDesc for SecurityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SecurityService",
	HandlerType: (*SecurityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportThreat",
			Handler:    _SecurityService_ReportThreat_Handler,
		},
		{
			MethodName: "ExecuteResponse",
			Handler:    _SecurityService_ExecuteResponse_Handler,
		},
		{
			MethodName: "GetThreats",
			Handler:    _SecurityService_GetThreats_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _SecurityService_ValidateToken_Handler,
		},
		{
			MethodName: "InvalidateSession",
			Handler:    _SecurityService_InvalidateSession_Handler,
		},
		{
			MethodName: "RenewSession",
			Handler:    _SecurityService_RenewSession_Handler,
		},
		{
			MethodName: "RecordTokenMetric",
			Handler:    _SecurityService_RecordTokenMetric_Handler,
		},
		{
			MethodName: "GetTokenMetrics",
			Handler:    _SecurityService_GetTokenMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/security.proto",
}
