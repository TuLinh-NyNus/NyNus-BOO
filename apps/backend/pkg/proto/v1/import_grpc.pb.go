// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: v1/import.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImportService_UploadImportFile_FullMethodName  = "/v1.ImportService/UploadImportFile"
	ImportService_CreateImportJob_FullMethodName   = "/v1.ImportService/CreateImportJob"
	ImportService_GetImportStatus_FullMethodName   = "/v1.ImportService/GetImportStatus"
	ImportService_ListImportResults_FullMethodName = "/v1.ImportService/ListImportResults"
)

// ImportServiceClient is the client API for ImportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImportServiceClient interface {
	// Tải file lớn (DOCX/PDF) bằng client-streaming
	UploadImportFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, UploadImportFileResponse], error)
	// Tạo job import từ file đã upload hoặc từ URL
	CreateImportJob(ctx context.Context, in *CreateImportJobRequest, opts ...grpc.CallOption) (*CreateImportJobResponse, error)
	// Theo dõi trạng thái job
	GetImportStatus(ctx context.Context, in *GetImportStatusRequest, opts ...grpc.CallOption) (*GetImportStatusResponse, error)
	// Kết quả import (nhiều bài/section)
	ListImportResults(ctx context.Context, in *ListImportResultsRequest, opts ...grpc.CallOption) (*ListImportResultsResponse, error)
}

type importServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImportServiceClient(cc grpc.ClientConnInterface) ImportServiceClient {
	return &importServiceClient{cc}
}

func (c *importServiceClient) UploadImportFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, UploadImportFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImportService_ServiceDesc.Streams[0], ImportService_UploadImportFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, UploadImportFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImportService_UploadImportFileClient = grpc.ClientStreamingClient[FileChunk, UploadImportFileResponse]

func (c *importServiceClient) CreateImportJob(ctx context.Context, in *CreateImportJobRequest, opts ...grpc.CallOption) (*CreateImportJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateImportJobResponse)
	err := c.cc.Invoke(ctx, ImportService_CreateImportJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importServiceClient) GetImportStatus(ctx context.Context, in *GetImportStatusRequest, opts ...grpc.CallOption) (*GetImportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImportStatusResponse)
	err := c.cc.Invoke(ctx, ImportService_GetImportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importServiceClient) ListImportResults(ctx context.Context, in *ListImportResultsRequest, opts ...grpc.CallOption) (*ListImportResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImportResultsResponse)
	err := c.cc.Invoke(ctx, ImportService_ListImportResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImportServiceServer is the server API for ImportService service.
// All implementations must embed UnimplementedImportServiceServer
// for forward compatibility.
type ImportServiceServer interface {
	// Tải file lớn (DOCX/PDF) bằng client-streaming
	UploadImportFile(grpc.ClientStreamingServer[FileChunk, UploadImportFileResponse]) error
	// Tạo job import từ file đã upload hoặc từ URL
	CreateImportJob(context.Context, *CreateImportJobRequest) (*CreateImportJobResponse, error)
	// Theo dõi trạng thái job
	GetImportStatus(context.Context, *GetImportStatusRequest) (*GetImportStatusResponse, error)
	// Kết quả import (nhiều bài/section)
	ListImportResults(context.Context, *ListImportResultsRequest) (*ListImportResultsResponse, error)
	mustEmbedUnimplementedImportServiceServer()
}

// UnimplementedImportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImportServiceServer struct{}

func (UnimplementedImportServiceServer) UploadImportFile(grpc.ClientStreamingServer[FileChunk, UploadImportFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadImportFile not implemented")
}
func (UnimplementedImportServiceServer) CreateImportJob(context.Context, *CreateImportJobRequest) (*CreateImportJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImportJob not implemented")
}
func (UnimplementedImportServiceServer) GetImportStatus(context.Context, *GetImportStatusRequest) (*GetImportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportStatus not implemented")
}
func (UnimplementedImportServiceServer) ListImportResults(context.Context, *ListImportResultsRequest) (*ListImportResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImportResults not implemented")
}
func (UnimplementedImportServiceServer) mustEmbedUnimplementedImportServiceServer() {}
func (UnimplementedImportServiceServer) testEmbeddedByValue()                       {}

// UnsafeImportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImportServiceServer will
// result in compilation errors.
type UnsafeImportServiceServer interface {
	mustEmbedUnimplementedImportServiceServer()
}

func RegisterImportServiceServer(s grpc.ServiceRegistrar, srv ImportServiceServer) {
	// If the following call pancis, it indicates UnimplementedImportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImportService_ServiceDesc, srv)
}

func _ImportService_UploadImportFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServiceServer).UploadImportFile(&grpc.GenericServerStream[FileChunk, UploadImportFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImportService_UploadImportFileServer = grpc.ClientStreamingServer[FileChunk, UploadImportFileResponse]

func _ImportService_CreateImportJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImportJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServiceServer).CreateImportJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportService_CreateImportJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServiceServer).CreateImportJob(ctx, req.(*CreateImportJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportService_GetImportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServiceServer).GetImportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportService_GetImportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServiceServer).GetImportStatus(ctx, req.(*GetImportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportService_ListImportResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImportResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportServiceServer).ListImportResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportService_ListImportResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportServiceServer).ListImportResults(ctx, req.(*ListImportResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImportService_ServiceDesc is the grpc.ServiceDesc for ImportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ImportService",
	HandlerType: (*ImportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateImportJob",
			Handler:    _ImportService_CreateImportJob_Handler,
		},
		{
			MethodName: "GetImportStatus",
			Handler:    _ImportService_GetImportStatus_Handler,
		},
		{
			MethodName: "ListImportResults",
			Handler:    _ImportService_ListImportResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImportFile",
			Handler:       _ImportService_UploadImportFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "v1/import.proto",
}
