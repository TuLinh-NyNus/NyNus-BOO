// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/question.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuestionService_CreateQuestion_FullMethodName          = "/v1.QuestionService/CreateQuestion"
	QuestionService_GetQuestion_FullMethodName             = "/v1.QuestionService/GetQuestion"
	QuestionService_UpdateQuestion_FullMethodName          = "/v1.QuestionService/UpdateQuestion"
	QuestionService_DeleteQuestion_FullMethodName          = "/v1.QuestionService/DeleteQuestion"
	QuestionService_ListQuestions_FullMethodName           = "/v1.QuestionService/ListQuestions"
	QuestionService_ImportQuestions_FullMethodName         = "/v1.QuestionService/ImportQuestions"
	QuestionService_ParseLatexQuestion_FullMethodName      = "/v1.QuestionService/ParseLatexQuestion"
	QuestionService_CreateQuestionFromLatex_FullMethodName = "/v1.QuestionService/CreateQuestionFromLatex"
	QuestionService_ImportLatex_FullMethodName             = "/v1.QuestionService/ImportLatex"
	QuestionService_GetVersionHistory_FullMethodName       = "/v1.QuestionService/GetVersionHistory"
	QuestionService_GetVersion_FullMethodName              = "/v1.QuestionService/GetVersion"
	QuestionService_CompareVersions_FullMethodName         = "/v1.QuestionService/CompareVersions"
	QuestionService_RevertToVersion_FullMethodName         = "/v1.QuestionService/RevertToVersion"
	QuestionService_BulkUpdateQuestions_FullMethodName     = "/v1.QuestionService/BulkUpdateQuestions"
	QuestionService_BulkDeleteQuestions_FullMethodName     = "/v1.QuestionService/BulkDeleteQuestions"
	QuestionService_ToggleFavorite_FullMethodName          = "/v1.QuestionService/ToggleFavorite"
	QuestionService_ListFavoriteQuestions_FullMethodName   = "/v1.QuestionService/ListFavoriteQuestions"
)

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ============================================================================
// Question service
// ============================================================================
type QuestionServiceClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error)
	ListQuestions(ctx context.Context, in *ListQuestionsRequest, opts ...grpc.CallOption) (*ListQuestionsResponse, error)
	ImportQuestions(ctx context.Context, in *ImportQuestionsRequest, opts ...grpc.CallOption) (*ImportQuestionsResponse, error)
	// LaTeX parsing operations
	ParseLatexQuestion(ctx context.Context, in *ParseLatexQuestionRequest, opts ...grpc.CallOption) (*ParseLatexQuestionResponse, error)
	CreateQuestionFromLatex(ctx context.Context, in *CreateQuestionFromLatexRequest, opts ...grpc.CallOption) (*CreateQuestionFromLatexResponse, error)
	ImportLatex(ctx context.Context, in *ImportLatexRequest, opts ...grpc.CallOption) (*ImportLatexResponse, error)
	// ============================================================================
	// VERSION CONTROL OPERATIONS
	// ============================================================================
	GetVersionHistory(ctx context.Context, in *GetVersionHistoryRequest, opts ...grpc.CallOption) (*GetVersionHistoryResponse, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	CompareVersions(ctx context.Context, in *CompareVersionsRequest, opts ...grpc.CallOption) (*CompareVersionsResponse, error)
	RevertToVersion(ctx context.Context, in *RevertToVersionRequest, opts ...grpc.CallOption) (*RevertToVersionResponse, error)
	// ============================================================================
	// BULK OPERATIONS
	// ============================================================================
	BulkUpdateQuestions(ctx context.Context, in *BulkUpdateQuestionsRequest, opts ...grpc.CallOption) (*BulkUpdateQuestionsResponse, error)
	BulkDeleteQuestions(ctx context.Context, in *BulkDeleteQuestionsRequest, opts ...grpc.CallOption) (*BulkDeleteQuestionsResponse, error)
	// ============================================================================
	// FAVORITE OPERATIONS
	// ============================================================================
	ToggleFavorite(ctx context.Context, in *ToggleFavoriteRequest, opts ...grpc.CallOption) (*ToggleFavoriteResponse, error)
	ListFavoriteQuestions(ctx context.Context, in *ListFavoriteQuestionsRequest, opts ...grpc.CallOption) (*ListFavoriteQuestionsResponse, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionService_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionService_GetQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionService_UpdateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionService_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ListQuestions(ctx context.Context, in *ListQuestionsRequest, opts ...grpc.CallOption) (*ListQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_ListQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ImportQuestions(ctx context.Context, in *ImportQuestionsRequest, opts ...grpc.CallOption) (*ImportQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_ImportQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ParseLatexQuestion(ctx context.Context, in *ParseLatexQuestionRequest, opts ...grpc.CallOption) (*ParseLatexQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseLatexQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionService_ParseLatexQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) CreateQuestionFromLatex(ctx context.Context, in *CreateQuestionFromLatexRequest, opts ...grpc.CallOption) (*CreateQuestionFromLatexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionFromLatexResponse)
	err := c.cc.Invoke(ctx, QuestionService_CreateQuestionFromLatex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ImportLatex(ctx context.Context, in *ImportLatexRequest, opts ...grpc.CallOption) (*ImportLatexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportLatexResponse)
	err := c.cc.Invoke(ctx, QuestionService_ImportLatex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetVersionHistory(ctx context.Context, in *GetVersionHistoryRequest, opts ...grpc.CallOption) (*GetVersionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionHistoryResponse)
	err := c.cc.Invoke(ctx, QuestionService_GetVersionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, QuestionService_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) CompareVersions(ctx context.Context, in *CompareVersionsRequest, opts ...grpc.CallOption) (*CompareVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompareVersionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_CompareVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) RevertToVersion(ctx context.Context, in *RevertToVersionRequest, opts ...grpc.CallOption) (*RevertToVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevertToVersionResponse)
	err := c.cc.Invoke(ctx, QuestionService_RevertToVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) BulkUpdateQuestions(ctx context.Context, in *BulkUpdateQuestionsRequest, opts ...grpc.CallOption) (*BulkUpdateQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkUpdateQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_BulkUpdateQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) BulkDeleteQuestions(ctx context.Context, in *BulkDeleteQuestionsRequest, opts ...grpc.CallOption) (*BulkDeleteQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkDeleteQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_BulkDeleteQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ToggleFavorite(ctx context.Context, in *ToggleFavoriteRequest, opts ...grpc.CallOption) (*ToggleFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleFavoriteResponse)
	err := c.cc.Invoke(ctx, QuestionService_ToggleFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ListFavoriteQuestions(ctx context.Context, in *ListFavoriteQuestionsRequest, opts ...grpc.CallOption) (*ListFavoriteQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFavoriteQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionService_ListFavoriteQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations should embed UnimplementedQuestionServiceServer
// for forward compatibility.
//
// ============================================================================
// Question service
// ============================================================================
type QuestionServiceServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	ListQuestions(context.Context, *ListQuestionsRequest) (*ListQuestionsResponse, error)
	ImportQuestions(context.Context, *ImportQuestionsRequest) (*ImportQuestionsResponse, error)
	// LaTeX parsing operations
	ParseLatexQuestion(context.Context, *ParseLatexQuestionRequest) (*ParseLatexQuestionResponse, error)
	CreateQuestionFromLatex(context.Context, *CreateQuestionFromLatexRequest) (*CreateQuestionFromLatexResponse, error)
	ImportLatex(context.Context, *ImportLatexRequest) (*ImportLatexResponse, error)
	// ============================================================================
	// VERSION CONTROL OPERATIONS
	// ============================================================================
	GetVersionHistory(context.Context, *GetVersionHistoryRequest) (*GetVersionHistoryResponse, error)
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	CompareVersions(context.Context, *CompareVersionsRequest) (*CompareVersionsResponse, error)
	RevertToVersion(context.Context, *RevertToVersionRequest) (*RevertToVersionResponse, error)
	// ============================================================================
	// BULK OPERATIONS
	// ============================================================================
	BulkUpdateQuestions(context.Context, *BulkUpdateQuestionsRequest) (*BulkUpdateQuestionsResponse, error)
	BulkDeleteQuestions(context.Context, *BulkDeleteQuestionsRequest) (*BulkDeleteQuestionsResponse, error)
	// ============================================================================
	// FAVORITE OPERATIONS
	// ============================================================================
	ToggleFavorite(context.Context, *ToggleFavoriteRequest) (*ToggleFavoriteResponse, error)
	ListFavoriteQuestions(context.Context, *ListFavoriteQuestionsRequest) (*ListFavoriteQuestionsResponse, error)
}

// UnimplementedQuestionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionServiceServer struct{}

func (UnimplementedQuestionServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) ListQuestions(context.Context, *ListQuestionsRequest) (*ListQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) ImportQuestions(context.Context, *ImportQuestionsRequest) (*ImportQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) ParseLatexQuestion(context.Context, *ParseLatexQuestionRequest) (*ParseLatexQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseLatexQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) CreateQuestionFromLatex(context.Context, *CreateQuestionFromLatexRequest) (*CreateQuestionFromLatexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionFromLatex not implemented")
}
func (UnimplementedQuestionServiceServer) ImportLatex(context.Context, *ImportLatexRequest) (*ImportLatexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLatex not implemented")
}
func (UnimplementedQuestionServiceServer) GetVersionHistory(context.Context, *GetVersionHistoryRequest) (*GetVersionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionHistory not implemented")
}
func (UnimplementedQuestionServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedQuestionServiceServer) CompareVersions(context.Context, *CompareVersionsRequest) (*CompareVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareVersions not implemented")
}
func (UnimplementedQuestionServiceServer) RevertToVersion(context.Context, *RevertToVersionRequest) (*RevertToVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertToVersion not implemented")
}
func (UnimplementedQuestionServiceServer) BulkUpdateQuestions(context.Context, *BulkUpdateQuestionsRequest) (*BulkUpdateQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) BulkDeleteQuestions(context.Context, *BulkDeleteQuestionsRequest) (*BulkDeleteQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) ToggleFavorite(context.Context, *ToggleFavoriteRequest) (*ToggleFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleFavorite not implemented")
}
func (UnimplementedQuestionServiceServer) ListFavoriteQuestions(context.Context, *ListFavoriteQuestionsRequest) (*ListFavoriteQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavoriteQuestions not implemented")
}
func (UnimplementedQuestionServiceServer) testEmbeddedByValue() {}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuestionService_ServiceDesc, srv)
}

func _QuestionService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_GetQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestion(ctx, req.(*GetQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ListQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ListQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_ListQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ListQuestions(ctx, req.(*ListQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ImportQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ImportQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_ImportQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ImportQuestions(ctx, req.(*ImportQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ParseLatexQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseLatexQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ParseLatexQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_ParseLatexQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ParseLatexQuestion(ctx, req.(*ParseLatexQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_CreateQuestionFromLatex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionFromLatexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateQuestionFromLatex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_CreateQuestionFromLatex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateQuestionFromLatex(ctx, req.(*CreateQuestionFromLatexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ImportLatex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLatexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ImportLatex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_ImportLatex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ImportLatex(ctx, req.(*ImportLatexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetVersionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetVersionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_GetVersionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetVersionHistory(ctx, req.(*GetVersionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_CompareVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CompareVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_CompareVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CompareVersions(ctx, req.(*CompareVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_RevertToVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertToVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).RevertToVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_RevertToVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).RevertToVersion(ctx, req.(*RevertToVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_BulkUpdateQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).BulkUpdateQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_BulkUpdateQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).BulkUpdateQuestions(ctx, req.(*BulkUpdateQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_BulkDeleteQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).BulkDeleteQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_BulkDeleteQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).BulkDeleteQuestions(ctx, req.(*BulkDeleteQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ToggleFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ToggleFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_ToggleFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ToggleFavorite(ctx, req.(*ToggleFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ListFavoriteQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFavoriteQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ListFavoriteQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_ListFavoriteQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ListFavoriteQuestions(ctx, req.(*ListFavoriteQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionService_ServiceDesc is the grpc.ServiceDesc for QuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _QuestionService_CreateQuestion_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _QuestionService_GetQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _QuestionService_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _QuestionService_DeleteQuestion_Handler,
		},
		{
			MethodName: "ListQuestions",
			Handler:    _QuestionService_ListQuestions_Handler,
		},
		{
			MethodName: "ImportQuestions",
			Handler:    _QuestionService_ImportQuestions_Handler,
		},
		{
			MethodName: "ParseLatexQuestion",
			Handler:    _QuestionService_ParseLatexQuestion_Handler,
		},
		{
			MethodName: "CreateQuestionFromLatex",
			Handler:    _QuestionService_CreateQuestionFromLatex_Handler,
		},
		{
			MethodName: "ImportLatex",
			Handler:    _QuestionService_ImportLatex_Handler,
		},
		{
			MethodName: "GetVersionHistory",
			Handler:    _QuestionService_GetVersionHistory_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _QuestionService_GetVersion_Handler,
		},
		{
			MethodName: "CompareVersions",
			Handler:    _QuestionService_CompareVersions_Handler,
		},
		{
			MethodName: "RevertToVersion",
			Handler:    _QuestionService_RevertToVersion_Handler,
		},
		{
			MethodName: "BulkUpdateQuestions",
			Handler:    _QuestionService_BulkUpdateQuestions_Handler,
		},
		{
			MethodName: "BulkDeleteQuestions",
			Handler:    _QuestionService_BulkDeleteQuestions_Handler,
		},
		{
			MethodName: "ToggleFavorite",
			Handler:    _QuestionService_ToggleFavorite_Handler,
		},
		{
			MethodName: "ListFavoriteQuestions",
			Handler:    _QuestionService_ListFavoriteQuestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/question.proto",
}
