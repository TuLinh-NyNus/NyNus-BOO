// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/tikz.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TikzCompilerService_CompileTikz_FullMethodName   = "/v1.TikzCompilerService/CompileTikz"
	TikzCompilerService_ListTemplates_FullMethodName = "/v1.TikzCompilerService/ListTemplates"
)

// TikzCompilerServiceClient is the client API for TikzCompilerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TikzCompilerServiceClient interface {
	// Biên dịch TikZ theo template (định dạng ảnh do template quyết định)
	CompileTikz(ctx context.Context, in *CompileTikzRequest, opts ...grpc.CallOption) (*CompileTikzResponse, error)
	// Danh sách template khả dụng để chọn trong UI
	ListTemplates(ctx context.Context, in *ListTikzTemplatesRequest, opts ...grpc.CallOption) (*ListTikzTemplatesResponse, error)
}

type tikzCompilerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTikzCompilerServiceClient(cc grpc.ClientConnInterface) TikzCompilerServiceClient {
	return &tikzCompilerServiceClient{cc}
}

func (c *tikzCompilerServiceClient) CompileTikz(ctx context.Context, in *CompileTikzRequest, opts ...grpc.CallOption) (*CompileTikzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompileTikzResponse)
	err := c.cc.Invoke(ctx, TikzCompilerService_CompileTikz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tikzCompilerServiceClient) ListTemplates(ctx context.Context, in *ListTikzTemplatesRequest, opts ...grpc.CallOption) (*ListTikzTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTikzTemplatesResponse)
	err := c.cc.Invoke(ctx, TikzCompilerService_ListTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TikzCompilerServiceServer is the server API for TikzCompilerService service.
// All implementations should embed UnimplementedTikzCompilerServiceServer
// for forward compatibility.
type TikzCompilerServiceServer interface {
	// Biên dịch TikZ theo template (định dạng ảnh do template quyết định)
	CompileTikz(context.Context, *CompileTikzRequest) (*CompileTikzResponse, error)
	// Danh sách template khả dụng để chọn trong UI
	ListTemplates(context.Context, *ListTikzTemplatesRequest) (*ListTikzTemplatesResponse, error)
}

// UnimplementedTikzCompilerServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTikzCompilerServiceServer struct{}

func (UnimplementedTikzCompilerServiceServer) CompileTikz(context.Context, *CompileTikzRequest) (*CompileTikzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileTikz not implemented")
}
func (UnimplementedTikzCompilerServiceServer) ListTemplates(context.Context, *ListTikzTemplatesRequest) (*ListTikzTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedTikzCompilerServiceServer) testEmbeddedByValue() {}

// UnsafeTikzCompilerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TikzCompilerServiceServer will
// result in compilation errors.
type UnsafeTikzCompilerServiceServer interface {
	mustEmbedUnimplementedTikzCompilerServiceServer()
}

func RegisterTikzCompilerServiceServer(s grpc.ServiceRegistrar, srv TikzCompilerServiceServer) {
	// If the following call pancis, it indicates UnimplementedTikzCompilerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TikzCompilerService_ServiceDesc, srv)
}

func _TikzCompilerService_CompileTikz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileTikzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TikzCompilerServiceServer).CompileTikz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TikzCompilerService_CompileTikz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TikzCompilerServiceServer).CompileTikz(ctx, req.(*CompileTikzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TikzCompilerService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTikzTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TikzCompilerServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TikzCompilerService_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TikzCompilerServiceServer).ListTemplates(ctx, req.(*ListTikzTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TikzCompilerService_ServiceDesc is the grpc.ServiceDesc for TikzCompilerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TikzCompilerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.TikzCompilerService",
	HandlerType: (*TikzCompilerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompileTikz",
			Handler:    _TikzCompilerService_CompileTikz_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _TikzCompilerService_ListTemplates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/tikz.proto",
}
