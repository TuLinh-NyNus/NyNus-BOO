// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: v1/newsletter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NewsletterService_Subscribe_FullMethodName              = "/v1.NewsletterService/Subscribe"
	NewsletterService_Unsubscribe_FullMethodName            = "/v1.NewsletterService/Unsubscribe"
	NewsletterService_ListSubscriptions_FullMethodName      = "/v1.NewsletterService/ListSubscriptions"
	NewsletterService_GetSubscription_FullMethodName        = "/v1.NewsletterService/GetSubscription"
	NewsletterService_UpdateSubscriptionTags_FullMethodName = "/v1.NewsletterService/UpdateSubscriptionTags"
	NewsletterService_DeleteSubscription_FullMethodName     = "/v1.NewsletterService/DeleteSubscription"
)

// NewsletterServiceClient is the client API for NewsletterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Newsletter service definition
type NewsletterServiceClient interface {
	// Public endpoints
	Subscribe(ctx context.Context, in *NewsletterSubscribeRequest, opts ...grpc.CallOption) (*NewsletterSubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *NewsletterUnsubscribeRequest, opts ...grpc.CallOption) (*NewsletterUnsubscribeResponse, error)
	// Admin endpoints
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	UpdateSubscriptionTags(ctx context.Context, in *UpdateSubscriptionTagsRequest, opts ...grpc.CallOption) (*UpdateSubscriptionTagsResponse, error)
	DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error)
}

type newsletterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsletterServiceClient(cc grpc.ClientConnInterface) NewsletterServiceClient {
	return &newsletterServiceClient{cc}
}

func (c *newsletterServiceClient) Subscribe(ctx context.Context, in *NewsletterSubscribeRequest, opts ...grpc.CallOption) (*NewsletterSubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewsletterSubscribeResponse)
	err := c.cc.Invoke(ctx, NewsletterService_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsletterServiceClient) Unsubscribe(ctx context.Context, in *NewsletterUnsubscribeRequest, opts ...grpc.CallOption) (*NewsletterUnsubscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewsletterUnsubscribeResponse)
	err := c.cc.Invoke(ctx, NewsletterService_Unsubscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsletterServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, NewsletterService_ListSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsletterServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, NewsletterService_GetSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsletterServiceClient) UpdateSubscriptionTags(ctx context.Context, in *UpdateSubscriptionTagsRequest, opts ...grpc.CallOption) (*UpdateSubscriptionTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSubscriptionTagsResponse)
	err := c.cc.Invoke(ctx, NewsletterService_UpdateSubscriptionTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsletterServiceClient) DeleteSubscription(ctx context.Context, in *DeleteSubscriptionRequest, opts ...grpc.CallOption) (*DeleteSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSubscriptionResponse)
	err := c.cc.Invoke(ctx, NewsletterService_DeleteSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsletterServiceServer is the server API for NewsletterService service.
// All implementations must embed UnimplementedNewsletterServiceServer
// for forward compatibility.
//
// Newsletter service definition
type NewsletterServiceServer interface {
	// Public endpoints
	Subscribe(context.Context, *NewsletterSubscribeRequest) (*NewsletterSubscribeResponse, error)
	Unsubscribe(context.Context, *NewsletterUnsubscribeRequest) (*NewsletterUnsubscribeResponse, error)
	// Admin endpoints
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	UpdateSubscriptionTags(context.Context, *UpdateSubscriptionTagsRequest) (*UpdateSubscriptionTagsResponse, error)
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error)
	mustEmbedUnimplementedNewsletterServiceServer()
}

// UnimplementedNewsletterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNewsletterServiceServer struct{}

func (UnimplementedNewsletterServiceServer) Subscribe(context.Context, *NewsletterSubscribeRequest) (*NewsletterSubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNewsletterServiceServer) Unsubscribe(context.Context, *NewsletterUnsubscribeRequest) (*NewsletterUnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedNewsletterServiceServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedNewsletterServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedNewsletterServiceServer) UpdateSubscriptionTags(context.Context, *UpdateSubscriptionTagsRequest) (*UpdateSubscriptionTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionTags not implemented")
}
func (UnimplementedNewsletterServiceServer) DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedNewsletterServiceServer) mustEmbedUnimplementedNewsletterServiceServer() {}
func (UnimplementedNewsletterServiceServer) testEmbeddedByValue()                           {}

// UnsafeNewsletterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsletterServiceServer will
// result in compilation errors.
type UnsafeNewsletterServiceServer interface {
	mustEmbedUnimplementedNewsletterServiceServer()
}

func RegisterNewsletterServiceServer(s grpc.ServiceRegistrar, srv NewsletterServiceServer) {
	// If the following call pancis, it indicates UnimplementedNewsletterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NewsletterService_ServiceDesc, srv)
}

func _NewsletterService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsletterSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsletterService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).Subscribe(ctx, req.(*NewsletterSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsletterService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsletterUnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsletterService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).Unsubscribe(ctx, req.(*NewsletterUnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsletterService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsletterService_ListSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsletterService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsletterService_GetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsletterService_UpdateSubscriptionTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).UpdateSubscriptionTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsletterService_UpdateSubscriptionTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).UpdateSubscriptionTags(ctx, req.(*UpdateSubscriptionTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsletterService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsletterService_DeleteSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsletterService_ServiceDesc is the grpc.ServiceDesc for NewsletterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsletterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.NewsletterService",
	HandlerType: (*NewsletterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _NewsletterService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _NewsletterService_Unsubscribe_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _NewsletterService_ListSubscriptions_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _NewsletterService_GetSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscriptionTags",
			Handler:    _NewsletterService_UpdateSubscriptionTags_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _NewsletterService_DeleteSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/newsletter.proto",
}
