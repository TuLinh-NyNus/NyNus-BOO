// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: v1/question.proto

package v1

import (
	common "github.com/AnhPhan49/exam-bank-system/apps/backend/pkg/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Answer message - for structured answers
type Answer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // Changed from text to content to match frontend
	IsCorrect     bool                   `protobuf:"varint,3,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
	Explanation   string                 `protobuf:"bytes,4,opt,name=explanation,proto3" json:"explanation,omitempty"` // Added explanation field
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Answer) Reset() {
	*x = Answer{}
	mi := &file_v1_question_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{0}
}

func (x *Answer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Answer) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Answer) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

func (x *Answer) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Question message - matches database schema
type Question struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RawContent string                 `protobuf:"bytes,2,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"` // LaTeX gốc từ user
	Content    string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                         // Nội dung đã xử lý (cleaned)
	Subcount   string                 `protobuf:"bytes,4,opt,name=subcount,proto3" json:"subcount,omitempty"`                       // [XX.N] format
	Type       common.QuestionType    `protobuf:"varint,5,opt,name=type,proto3,enum=common.QuestionType" json:"type,omitempty"`     // MC, TF, SA, ES, MA
	Source     string                 `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`                           // Nguồn câu hỏi
	// Structured answers for MC/TF or JSON string for complex types
	//
	// Types that are valid to be assigned to AnswerData:
	//
	//	*Question_StructuredAnswers
	//	*Question_JsonAnswers
	AnswerData isQuestion_AnswerData `protobuf_oneof:"answer_data"`
	// Types that are valid to be assigned to CorrectAnswerData:
	//
	//	*Question_StructuredCorrect
	//	*Question_JsonCorrectAnswer
	CorrectAnswerData isQuestion_CorrectAnswerData `protobuf_oneof:"correct_answer_data"`
	Solution          string                       `protobuf:"bytes,11,opt,name=solution,proto3" json:"solution,omitempty"` // Lời giải chi tiết
	Tag               []string                     `protobuf:"bytes,12,rep,name=tag,proto3" json:"tag,omitempty"`           // Tags cho câu hỏi
	// Metadata & Classification (optional, for filtering purposes only)
	Grade   string `protobuf:"bytes,13,opt,name=grade,proto3" json:"grade,omitempty"`     // Lớp (0,1,2) - Optional classification
	Subject string `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"` // Môn học (P,L,H) - Optional classification
	Chapter string `protobuf:"bytes,15,opt,name=chapter,proto3" json:"chapter,omitempty"` // Chương (1-9) - Optional classification
	Level   string `protobuf:"bytes,16,opt,name=level,proto3" json:"level,omitempty"`     // Mức độ (N,H,V,C,T,M) - Optional classification
	// Usage tracking
	UsageCount     int32                  `protobuf:"varint,17,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`              // Số lần sử dụng
	Creator        string                 `protobuf:"bytes,18,opt,name=creator,proto3" json:"creator,omitempty"`                                       // Người tạo
	Status         common.QuestionStatus  `protobuf:"varint,19,opt,name=status,proto3,enum=common.QuestionStatus" json:"status,omitempty"`             // ACTIVE, PENDING, INACTIVE, ARCHIVED
	Feedback       int32                  `protobuf:"varint,20,opt,name=feedback,proto3" json:"feedback,omitempty"`                                    // Điểm feedback
	Difficulty     common.DifficultyLevel `protobuf:"varint,21,opt,name=difficulty,proto3,enum=common.DifficultyLevel" json:"difficulty,omitempty"`    // EASY, MEDIUM, HARD, EXPERT
	QuestionCodeId string                 `protobuf:"bytes,22,opt,name=question_code_id,json=questionCodeId,proto3" json:"question_code_id,omitempty"` // FK to QuestionCode
	CreatedAt      string                 `protobuf:"bytes,23,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      string                 `protobuf:"bytes,24,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_v1_question_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{1}
}

func (x *Question) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Question) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *Question) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Question) GetSubcount() string {
	if x != nil {
		return x.Subcount
	}
	return ""
}

func (x *Question) GetType() common.QuestionType {
	if x != nil {
		return x.Type
	}
	return common.QuestionType(0)
}

func (x *Question) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Question) GetAnswerData() isQuestion_AnswerData {
	if x != nil {
		return x.AnswerData
	}
	return nil
}

func (x *Question) GetStructuredAnswers() *AnswerList {
	if x != nil {
		if x, ok := x.AnswerData.(*Question_StructuredAnswers); ok {
			return x.StructuredAnswers
		}
	}
	return nil
}

func (x *Question) GetJsonAnswers() string {
	if x != nil {
		if x, ok := x.AnswerData.(*Question_JsonAnswers); ok {
			return x.JsonAnswers
		}
	}
	return ""
}

func (x *Question) GetCorrectAnswerData() isQuestion_CorrectAnswerData {
	if x != nil {
		return x.CorrectAnswerData
	}
	return nil
}

func (x *Question) GetStructuredCorrect() *CorrectAnswer {
	if x != nil {
		if x, ok := x.CorrectAnswerData.(*Question_StructuredCorrect); ok {
			return x.StructuredCorrect
		}
	}
	return nil
}

func (x *Question) GetJsonCorrectAnswer() string {
	if x != nil {
		if x, ok := x.CorrectAnswerData.(*Question_JsonCorrectAnswer); ok {
			return x.JsonCorrectAnswer
		}
	}
	return ""
}

func (x *Question) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *Question) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Question) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *Question) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Question) GetChapter() string {
	if x != nil {
		return x.Chapter
	}
	return ""
}

func (x *Question) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Question) GetUsageCount() int32 {
	if x != nil {
		return x.UsageCount
	}
	return 0
}

func (x *Question) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Question) GetStatus() common.QuestionStatus {
	if x != nil {
		return x.Status
	}
	return common.QuestionStatus(0)
}

func (x *Question) GetFeedback() int32 {
	if x != nil {
		return x.Feedback
	}
	return 0
}

func (x *Question) GetDifficulty() common.DifficultyLevel {
	if x != nil {
		return x.Difficulty
	}
	return common.DifficultyLevel(0)
}

func (x *Question) GetQuestionCodeId() string {
	if x != nil {
		return x.QuestionCodeId
	}
	return ""
}

func (x *Question) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Question) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type isQuestion_AnswerData interface {
	isQuestion_AnswerData()
}

type Question_StructuredAnswers struct {
	StructuredAnswers *AnswerList `protobuf:"bytes,7,opt,name=structured_answers,json=structuredAnswers,proto3,oneof"` // For MC/TF questions
}

type Question_JsonAnswers struct {
	JsonAnswers string `protobuf:"bytes,8,opt,name=json_answers,json=jsonAnswers,proto3,oneof"` // For complex answer formats (JSONB in DB)
}

func (*Question_StructuredAnswers) isQuestion_AnswerData() {}

func (*Question_JsonAnswers) isQuestion_AnswerData() {}

type isQuestion_CorrectAnswerData interface {
	isQuestion_CorrectAnswerData()
}

type Question_StructuredCorrect struct {
	StructuredCorrect *CorrectAnswer `protobuf:"bytes,9,opt,name=structured_correct,json=structuredCorrect,proto3,oneof"` // For MC/TF/SA
}

type Question_JsonCorrectAnswer struct {
	JsonCorrectAnswer string `protobuf:"bytes,10,opt,name=json_correct_answer,json=jsonCorrectAnswer,proto3,oneof"` // For complex formats (JSONB in DB)
}

func (*Question_StructuredCorrect) isQuestion_CorrectAnswerData() {}

func (*Question_JsonCorrectAnswer) isQuestion_CorrectAnswerData() {}

// Wrapper for multiple answers
type AnswerList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*Answer              `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnswerList) Reset() {
	*x = AnswerList{}
	mi := &file_v1_question_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerList) ProtoMessage() {}

func (x *AnswerList) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerList.ProtoReflect.Descriptor instead.
func (*AnswerList) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{2}
}

func (x *AnswerList) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

// Correct answer structure
type CorrectAnswer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AnswerType:
	//
	//	*CorrectAnswer_Single
	//	*CorrectAnswer_Multiple
	//	*CorrectAnswer_Text
	AnswerType    isCorrectAnswer_AnswerType `protobuf_oneof:"answer_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CorrectAnswer) Reset() {
	*x = CorrectAnswer{}
	mi := &file_v1_question_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CorrectAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectAnswer) ProtoMessage() {}

func (x *CorrectAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectAnswer.ProtoReflect.Descriptor instead.
func (*CorrectAnswer) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{3}
}

func (x *CorrectAnswer) GetAnswerType() isCorrectAnswer_AnswerType {
	if x != nil {
		return x.AnswerType
	}
	return nil
}

func (x *CorrectAnswer) GetSingle() *SingleAnswer {
	if x != nil {
		if x, ok := x.AnswerType.(*CorrectAnswer_Single); ok {
			return x.Single
		}
	}
	return nil
}

func (x *CorrectAnswer) GetMultiple() *MultipleAnswers {
	if x != nil {
		if x, ok := x.AnswerType.(*CorrectAnswer_Multiple); ok {
			return x.Multiple
		}
	}
	return nil
}

func (x *CorrectAnswer) GetText() *TextAnswer {
	if x != nil {
		if x, ok := x.AnswerType.(*CorrectAnswer_Text); ok {
			return x.Text
		}
	}
	return nil
}

type isCorrectAnswer_AnswerType interface {
	isCorrectAnswer_AnswerType()
}

type CorrectAnswer_Single struct {
	Single *SingleAnswer `protobuf:"bytes,1,opt,name=single,proto3,oneof"` // For MC
}

type CorrectAnswer_Multiple struct {
	Multiple *MultipleAnswers `protobuf:"bytes,2,opt,name=multiple,proto3,oneof"` // For TF
}

type CorrectAnswer_Text struct {
	Text *TextAnswer `protobuf:"bytes,3,opt,name=text,proto3,oneof"` // For SA
}

func (*CorrectAnswer_Single) isCorrectAnswer_AnswerType() {}

func (*CorrectAnswer_Multiple) isCorrectAnswer_AnswerType() {}

func (*CorrectAnswer_Text) isCorrectAnswer_AnswerType() {}

type SingleAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AnswerId      string                 `protobuf:"bytes,1,opt,name=answer_id,json=answerId,proto3" json:"answer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SingleAnswer) Reset() {
	*x = SingleAnswer{}
	mi := &file_v1_question_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAnswer) ProtoMessage() {}

func (x *SingleAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAnswer.ProtoReflect.Descriptor instead.
func (*SingleAnswer) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{4}
}

func (x *SingleAnswer) GetAnswerId() string {
	if x != nil {
		return x.AnswerId
	}
	return ""
}

type MultipleAnswers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AnswerIds     []string               `protobuf:"bytes,1,rep,name=answer_ids,json=answerIds,proto3" json:"answer_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultipleAnswers) Reset() {
	*x = MultipleAnswers{}
	mi := &file_v1_question_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultipleAnswers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleAnswers) ProtoMessage() {}

func (x *MultipleAnswers) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleAnswers.ProtoReflect.Descriptor instead.
func (*MultipleAnswers) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{5}
}

func (x *MultipleAnswers) GetAnswerIds() []string {
	if x != nil {
		return x.AnswerIds
	}
	return nil
}

type TextAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextAnswer) Reset() {
	*x = TextAnswer{}
	mi := &file_v1_question_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextAnswer) ProtoMessage() {}

func (x *TextAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextAnswer.ProtoReflect.Descriptor instead.
func (*TextAnswer) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{6}
}

func (x *TextAnswer) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Question management
type CreateQuestionRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	RawContent string                 `protobuf:"bytes,1,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"` // LaTeX gốc từ user
	Content    string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                         // Nội dung đã xử lý
	Subcount   string                 `protobuf:"bytes,3,opt,name=subcount,proto3" json:"subcount,omitempty"`                       // [XX.N] format
	Type       common.QuestionType    `protobuf:"varint,4,opt,name=type,proto3,enum=common.QuestionType" json:"type,omitempty"`     // MC, TF, SA, ES, MA
	Source     string                 `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`                           // Nguồn câu hỏi
	// Flexible answer format
	//
	// Types that are valid to be assigned to AnswerData:
	//
	//	*CreateQuestionRequest_StructuredAnswers
	//	*CreateQuestionRequest_JsonAnswers
	AnswerData isCreateQuestionRequest_AnswerData `protobuf_oneof:"answer_data"`
	// Types that are valid to be assigned to CorrectAnswerData:
	//
	//	*CreateQuestionRequest_StructuredCorrect
	//	*CreateQuestionRequest_JsonCorrectAnswer
	CorrectAnswerData isCreateQuestionRequest_CorrectAnswerData `protobuf_oneof:"correct_answer_data"`
	Solution          string                                    `protobuf:"bytes,10,opt,name=solution,proto3" json:"solution,omitempty"` // Lời giải chi tiết
	Tag               []string                                  `protobuf:"bytes,11,rep,name=tag,proto3" json:"tag,omitempty"`           // Tags cho câu hỏi
	// Optional classification fields
	Grade          string                 `protobuf:"bytes,12,opt,name=grade,proto3" json:"grade,omitempty"`                                           // Lớp (0,1,2) - Optional
	Subject        string                 `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`                                       // Môn học (P,L,H) - Optional
	Chapter        string                 `protobuf:"bytes,14,opt,name=chapter,proto3" json:"chapter,omitempty"`                                       // Chương (1-9) - Optional
	Level          string                 `protobuf:"bytes,15,opt,name=level,proto3" json:"level,omitempty"`                                           // Mức độ (N,H,V,C,T,M) - Optional
	QuestionCodeId string                 `protobuf:"bytes,16,opt,name=question_code_id,json=questionCodeId,proto3" json:"question_code_id,omitempty"` // QuestionCode ID
	Status         common.QuestionStatus  `protobuf:"varint,17,opt,name=status,proto3,enum=common.QuestionStatus" json:"status,omitempty"`             // ACTIVE, PENDING, INACTIVE, ARCHIVED
	Difficulty     common.DifficultyLevel `protobuf:"varint,18,opt,name=difficulty,proto3,enum=common.DifficultyLevel" json:"difficulty,omitempty"`    // EASY, MEDIUM, HARD, EXPERT
	Creator        string                 `protobuf:"bytes,19,opt,name=creator,proto3" json:"creator,omitempty"`                                       // Creator username
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateQuestionRequest) Reset() {
	*x = CreateQuestionRequest{}
	mi := &file_v1_question_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionRequest) ProtoMessage() {}

func (x *CreateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{7}
}

func (x *CreateQuestionRequest) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *CreateQuestionRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateQuestionRequest) GetSubcount() string {
	if x != nil {
		return x.Subcount
	}
	return ""
}

func (x *CreateQuestionRequest) GetType() common.QuestionType {
	if x != nil {
		return x.Type
	}
	return common.QuestionType(0)
}

func (x *CreateQuestionRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateQuestionRequest) GetAnswerData() isCreateQuestionRequest_AnswerData {
	if x != nil {
		return x.AnswerData
	}
	return nil
}

func (x *CreateQuestionRequest) GetStructuredAnswers() *AnswerList {
	if x != nil {
		if x, ok := x.AnswerData.(*CreateQuestionRequest_StructuredAnswers); ok {
			return x.StructuredAnswers
		}
	}
	return nil
}

func (x *CreateQuestionRequest) GetJsonAnswers() string {
	if x != nil {
		if x, ok := x.AnswerData.(*CreateQuestionRequest_JsonAnswers); ok {
			return x.JsonAnswers
		}
	}
	return ""
}

func (x *CreateQuestionRequest) GetCorrectAnswerData() isCreateQuestionRequest_CorrectAnswerData {
	if x != nil {
		return x.CorrectAnswerData
	}
	return nil
}

func (x *CreateQuestionRequest) GetStructuredCorrect() *CorrectAnswer {
	if x != nil {
		if x, ok := x.CorrectAnswerData.(*CreateQuestionRequest_StructuredCorrect); ok {
			return x.StructuredCorrect
		}
	}
	return nil
}

func (x *CreateQuestionRequest) GetJsonCorrectAnswer() string {
	if x != nil {
		if x, ok := x.CorrectAnswerData.(*CreateQuestionRequest_JsonCorrectAnswer); ok {
			return x.JsonCorrectAnswer
		}
	}
	return ""
}

func (x *CreateQuestionRequest) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CreateQuestionRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *CreateQuestionRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *CreateQuestionRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CreateQuestionRequest) GetChapter() string {
	if x != nil {
		return x.Chapter
	}
	return ""
}

func (x *CreateQuestionRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *CreateQuestionRequest) GetQuestionCodeId() string {
	if x != nil {
		return x.QuestionCodeId
	}
	return ""
}

func (x *CreateQuestionRequest) GetStatus() common.QuestionStatus {
	if x != nil {
		return x.Status
	}
	return common.QuestionStatus(0)
}

func (x *CreateQuestionRequest) GetDifficulty() common.DifficultyLevel {
	if x != nil {
		return x.Difficulty
	}
	return common.DifficultyLevel(0)
}

func (x *CreateQuestionRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type isCreateQuestionRequest_AnswerData interface {
	isCreateQuestionRequest_AnswerData()
}

type CreateQuestionRequest_StructuredAnswers struct {
	StructuredAnswers *AnswerList `protobuf:"bytes,6,opt,name=structured_answers,json=structuredAnswers,proto3,oneof"` // For MC/TF questions
}

type CreateQuestionRequest_JsonAnswers struct {
	JsonAnswers string `protobuf:"bytes,7,opt,name=json_answers,json=jsonAnswers,proto3,oneof"` // For complex answer formats
}

func (*CreateQuestionRequest_StructuredAnswers) isCreateQuestionRequest_AnswerData() {}

func (*CreateQuestionRequest_JsonAnswers) isCreateQuestionRequest_AnswerData() {}

type isCreateQuestionRequest_CorrectAnswerData interface {
	isCreateQuestionRequest_CorrectAnswerData()
}

type CreateQuestionRequest_StructuredCorrect struct {
	StructuredCorrect *CorrectAnswer `protobuf:"bytes,8,opt,name=structured_correct,json=structuredCorrect,proto3,oneof"` // For MC/TF/SA
}

type CreateQuestionRequest_JsonCorrectAnswer struct {
	JsonCorrectAnswer string `protobuf:"bytes,9,opt,name=json_correct_answer,json=jsonCorrectAnswer,proto3,oneof"` // For complex formats
}

func (*CreateQuestionRequest_StructuredCorrect) isCreateQuestionRequest_CorrectAnswerData() {}

func (*CreateQuestionRequest_JsonCorrectAnswer) isCreateQuestionRequest_CorrectAnswerData() {}

type CreateQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *common.Response       `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Question      *Question              `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQuestionResponse) Reset() {
	*x = CreateQuestionResponse{}
	mi := &file_v1_question_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionResponse) ProtoMessage() {}

func (x *CreateQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionResponse.ProtoReflect.Descriptor instead.
func (*CreateQuestionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{8}
}

func (x *CreateQuestionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateQuestionResponse) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

type GetQuestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuestionRequest) Reset() {
	*x = GetQuestionRequest{}
	mi := &file_v1_question_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionRequest) ProtoMessage() {}

func (x *GetQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{9}
}

func (x *GetQuestionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *common.Response       `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Question      *Question              `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuestionResponse) Reset() {
	*x = GetQuestionResponse{}
	mi := &file_v1_question_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionResponse) ProtoMessage() {}

func (x *GetQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{10}
}

func (x *GetQuestionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetQuestionResponse) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

type ListQuestionsRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Pagination    *common.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuestionsRequest) Reset() {
	*x = ListQuestionsRequest{}
	mi := &file_v1_question_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionsRequest) ProtoMessage() {}

func (x *ListQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionsRequest.ProtoReflect.Descriptor instead.
func (*ListQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{11}
}

func (x *ListQuestionsRequest) GetPagination() *common.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListQuestionsResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Response      *common.Response           `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Questions     []*Question                `protobuf:"bytes,2,rep,name=questions,proto3" json:"questions,omitempty"`
	Pagination    *common.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuestionsResponse) Reset() {
	*x = ListQuestionsResponse{}
	mi := &file_v1_question_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionsResponse) ProtoMessage() {}

func (x *ListQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionsResponse.ProtoReflect.Descriptor instead.
func (*ListQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{12}
}

func (x *ListQuestionsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListQuestionsResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *ListQuestionsResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Update question
type UpdateQuestionRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RawContent string                 `protobuf:"bytes,2,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"`
	Content    string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Subcount   string                 `protobuf:"bytes,4,opt,name=subcount,proto3" json:"subcount,omitempty"`
	Type       common.QuestionType    `protobuf:"varint,5,opt,name=type,proto3,enum=common.QuestionType" json:"type,omitempty"`
	Source     string                 `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	// Types that are valid to be assigned to AnswerData:
	//
	//	*UpdateQuestionRequest_StructuredAnswers
	//	*UpdateQuestionRequest_JsonAnswers
	AnswerData isUpdateQuestionRequest_AnswerData `protobuf_oneof:"answer_data"`
	// Types that are valid to be assigned to CorrectAnswerData:
	//
	//	*UpdateQuestionRequest_StructuredCorrect
	//	*UpdateQuestionRequest_JsonCorrectAnswer
	CorrectAnswerData isUpdateQuestionRequest_CorrectAnswerData `protobuf_oneof:"correct_answer_data"`
	Solution          string                                    `protobuf:"bytes,11,opt,name=solution,proto3" json:"solution,omitempty"`
	Tag               []string                                  `protobuf:"bytes,12,rep,name=tag,proto3" json:"tag,omitempty"`
	// Optional classification fields
	Grade          string                 `protobuf:"bytes,13,opt,name=grade,proto3" json:"grade,omitempty"`     // Lớp (0,1,2) - Optional
	Subject        string                 `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"` // Môn học (P,L,H) - Optional
	Chapter        string                 `protobuf:"bytes,15,opt,name=chapter,proto3" json:"chapter,omitempty"` // Chương (1-9) - Optional
	Level          string                 `protobuf:"bytes,16,opt,name=level,proto3" json:"level,omitempty"`     // Mức độ (N,H,V,C,T,M) - Optional
	QuestionCodeId string                 `protobuf:"bytes,17,opt,name=question_code_id,json=questionCodeId,proto3" json:"question_code_id,omitempty"`
	Status         common.QuestionStatus  `protobuf:"varint,18,opt,name=status,proto3,enum=common.QuestionStatus" json:"status,omitempty"`
	Difficulty     common.DifficultyLevel `protobuf:"varint,19,opt,name=difficulty,proto3,enum=common.DifficultyLevel" json:"difficulty,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateQuestionRequest) Reset() {
	*x = UpdateQuestionRequest{}
	mi := &file_v1_question_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionRequest) ProtoMessage() {}

func (x *UpdateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateQuestionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateQuestionRequest) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *UpdateQuestionRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateQuestionRequest) GetSubcount() string {
	if x != nil {
		return x.Subcount
	}
	return ""
}

func (x *UpdateQuestionRequest) GetType() common.QuestionType {
	if x != nil {
		return x.Type
	}
	return common.QuestionType(0)
}

func (x *UpdateQuestionRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UpdateQuestionRequest) GetAnswerData() isUpdateQuestionRequest_AnswerData {
	if x != nil {
		return x.AnswerData
	}
	return nil
}

func (x *UpdateQuestionRequest) GetStructuredAnswers() *AnswerList {
	if x != nil {
		if x, ok := x.AnswerData.(*UpdateQuestionRequest_StructuredAnswers); ok {
			return x.StructuredAnswers
		}
	}
	return nil
}

func (x *UpdateQuestionRequest) GetJsonAnswers() string {
	if x != nil {
		if x, ok := x.AnswerData.(*UpdateQuestionRequest_JsonAnswers); ok {
			return x.JsonAnswers
		}
	}
	return ""
}

func (x *UpdateQuestionRequest) GetCorrectAnswerData() isUpdateQuestionRequest_CorrectAnswerData {
	if x != nil {
		return x.CorrectAnswerData
	}
	return nil
}

func (x *UpdateQuestionRequest) GetStructuredCorrect() *CorrectAnswer {
	if x != nil {
		if x, ok := x.CorrectAnswerData.(*UpdateQuestionRequest_StructuredCorrect); ok {
			return x.StructuredCorrect
		}
	}
	return nil
}

func (x *UpdateQuestionRequest) GetJsonCorrectAnswer() string {
	if x != nil {
		if x, ok := x.CorrectAnswerData.(*UpdateQuestionRequest_JsonCorrectAnswer); ok {
			return x.JsonCorrectAnswer
		}
	}
	return ""
}

func (x *UpdateQuestionRequest) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *UpdateQuestionRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *UpdateQuestionRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *UpdateQuestionRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *UpdateQuestionRequest) GetChapter() string {
	if x != nil {
		return x.Chapter
	}
	return ""
}

func (x *UpdateQuestionRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *UpdateQuestionRequest) GetQuestionCodeId() string {
	if x != nil {
		return x.QuestionCodeId
	}
	return ""
}

func (x *UpdateQuestionRequest) GetStatus() common.QuestionStatus {
	if x != nil {
		return x.Status
	}
	return common.QuestionStatus(0)
}

func (x *UpdateQuestionRequest) GetDifficulty() common.DifficultyLevel {
	if x != nil {
		return x.Difficulty
	}
	return common.DifficultyLevel(0)
}

type isUpdateQuestionRequest_AnswerData interface {
	isUpdateQuestionRequest_AnswerData()
}

type UpdateQuestionRequest_StructuredAnswers struct {
	StructuredAnswers *AnswerList `protobuf:"bytes,7,opt,name=structured_answers,json=structuredAnswers,proto3,oneof"`
}

type UpdateQuestionRequest_JsonAnswers struct {
	JsonAnswers string `protobuf:"bytes,8,opt,name=json_answers,json=jsonAnswers,proto3,oneof"`
}

func (*UpdateQuestionRequest_StructuredAnswers) isUpdateQuestionRequest_AnswerData() {}

func (*UpdateQuestionRequest_JsonAnswers) isUpdateQuestionRequest_AnswerData() {}

type isUpdateQuestionRequest_CorrectAnswerData interface {
	isUpdateQuestionRequest_CorrectAnswerData()
}

type UpdateQuestionRequest_StructuredCorrect struct {
	StructuredCorrect *CorrectAnswer `protobuf:"bytes,9,opt,name=structured_correct,json=structuredCorrect,proto3,oneof"`
}

type UpdateQuestionRequest_JsonCorrectAnswer struct {
	JsonCorrectAnswer string `protobuf:"bytes,10,opt,name=json_correct_answer,json=jsonCorrectAnswer,proto3,oneof"`
}

func (*UpdateQuestionRequest_StructuredCorrect) isUpdateQuestionRequest_CorrectAnswerData() {}

func (*UpdateQuestionRequest_JsonCorrectAnswer) isUpdateQuestionRequest_CorrectAnswerData() {}

type UpdateQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *common.Response       `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Question      *Question              `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateQuestionResponse) Reset() {
	*x = UpdateQuestionResponse{}
	mi := &file_v1_question_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionResponse) ProtoMessage() {}

func (x *UpdateQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionResponse.ProtoReflect.Descriptor instead.
func (*UpdateQuestionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateQuestionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UpdateQuestionResponse) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

// Delete question
type DeleteQuestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuestionRequest) Reset() {
	*x = DeleteQuestionRequest{}
	mi := &file_v1_question_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionRequest) ProtoMessage() {}

func (x *DeleteQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuestionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteQuestionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *common.Response       `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQuestionResponse) Reset() {
	*x = DeleteQuestionResponse{}
	mi := &file_v1_question_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionResponse) ProtoMessage() {}

func (x *DeleteQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuestionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteQuestionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// Import questions
type ImportQuestionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CsvDataBase64 string                 `protobuf:"bytes,1,opt,name=csv_data_base64,json=csvDataBase64,proto3" json:"csv_data_base64,omitempty"`
	UpsertMode    bool                   `protobuf:"varint,2,opt,name=upsert_mode,json=upsertMode,proto3" json:"upsert_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportQuestionsRequest) Reset() {
	*x = ImportQuestionsRequest{}
	mi := &file_v1_question_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportQuestionsRequest) ProtoMessage() {}

func (x *ImportQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportQuestionsRequest.ProtoReflect.Descriptor instead.
func (*ImportQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{17}
}

func (x *ImportQuestionsRequest) GetCsvDataBase64() string {
	if x != nil {
		return x.CsvDataBase64
	}
	return ""
}

func (x *ImportQuestionsRequest) GetUpsertMode() bool {
	if x != nil {
		return x.UpsertMode
	}
	return false
}

// QuestionCode message for LaTeX parsing
type QuestionCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // Full code like "4L5301N"
	Prefix        string                 `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`                           // First part like "4L5"
	MainCode      string                 `protobuf:"bytes,3,opt,name=main_code,json=mainCode,proto3" json:"main_code,omitempty"`       // Middle part like "301"
	ExtendCode    string                 `protobuf:"bytes,4,opt,name=extend_code,json=extendCode,proto3" json:"extend_code,omitempty"` // Additional code if any
	NumPart       string                 `protobuf:"bytes,5,opt,name=num_part,json=numPart,proto3" json:"num_part,omitempty"`          // Number part like "N"
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                 // Human-readable description
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionCode) Reset() {
	*x = QuestionCode{}
	mi := &file_v1_question_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionCode) ProtoMessage() {}

func (x *QuestionCode) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionCode.ProtoReflect.Descriptor instead.
func (*QuestionCode) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{18}
}

func (x *QuestionCode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionCode) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *QuestionCode) GetMainCode() string {
	if x != nil {
		return x.MainCode
	}
	return ""
}

func (x *QuestionCode) GetExtendCode() string {
	if x != nil {
		return x.ExtendCode
	}
	return ""
}

func (x *QuestionCode) GetNumPart() string {
	if x != nil {
		return x.NumPart
	}
	return ""
}

func (x *QuestionCode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Parse LaTeX question
type ParseLatexQuestionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LatexContent  string                 `protobuf:"bytes,1,opt,name=latex_content,json=latexContent,proto3" json:"latex_content,omitempty"` // LaTeX content (can be base64 or raw)
	IsBase64      bool                   `protobuf:"varint,2,opt,name=is_base64,json=isBase64,proto3" json:"is_base64,omitempty"`            // Whether content is base64 encoded
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseLatexQuestionRequest) Reset() {
	*x = ParseLatexQuestionRequest{}
	mi := &file_v1_question_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseLatexQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseLatexQuestionRequest) ProtoMessage() {}

func (x *ParseLatexQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseLatexQuestionRequest.ProtoReflect.Descriptor instead.
func (*ParseLatexQuestionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{19}
}

func (x *ParseLatexQuestionRequest) GetLatexContent() string {
	if x != nil {
		return x.LatexContent
	}
	return ""
}

func (x *ParseLatexQuestionRequest) GetIsBase64() bool {
	if x != nil {
		return x.IsBase64
	}
	return false
}

type ParseLatexQuestionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *common.Response       `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Questions     []*Question            `protobuf:"bytes,2,rep,name=questions,proto3" json:"questions,omitempty"`                              // Parsed questions (without ID, for preview)
	QuestionCodes []*QuestionCode        `protobuf:"bytes,3,rep,name=question_codes,json=questionCodes,proto3" json:"question_codes,omitempty"` // Extracted question codes
	Warnings      []string               `protobuf:"bytes,4,rep,name=warnings,proto3" json:"warnings,omitempty"`                                // Parsing warnings if any
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseLatexQuestionResponse) Reset() {
	*x = ParseLatexQuestionResponse{}
	mi := &file_v1_question_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseLatexQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseLatexQuestionResponse) ProtoMessage() {}

func (x *ParseLatexQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseLatexQuestionResponse.ProtoReflect.Descriptor instead.
func (*ParseLatexQuestionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{20}
}

func (x *ParseLatexQuestionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ParseLatexQuestionResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *ParseLatexQuestionResponse) GetQuestionCodes() []*QuestionCode {
	if x != nil {
		return x.QuestionCodes
	}
	return nil
}

func (x *ParseLatexQuestionResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Create question from LaTeX
type CreateQuestionFromLatexRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LatexContent    string                 `protobuf:"bytes,1,opt,name=latex_content,json=latexContent,proto3" json:"latex_content,omitempty"`             // LaTeX content (can be base64 or raw)
	IsBase64        bool                   `protobuf:"varint,2,opt,name=is_base64,json=isBase64,proto3" json:"is_base64,omitempty"`                        // Whether content is base64 encoded
	AutoCreateCodes bool                   `protobuf:"varint,3,opt,name=auto_create_codes,json=autoCreateCodes,proto3" json:"auto_create_codes,omitempty"` // Auto-create QuestionCode if not exists
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateQuestionFromLatexRequest) Reset() {
	*x = CreateQuestionFromLatexRequest{}
	mi := &file_v1_question_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuestionFromLatexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionFromLatexRequest) ProtoMessage() {}

func (x *CreateQuestionFromLatexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionFromLatexRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionFromLatexRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{21}
}

func (x *CreateQuestionFromLatexRequest) GetLatexContent() string {
	if x != nil {
		return x.LatexContent
	}
	return ""
}

func (x *CreateQuestionFromLatexRequest) GetIsBase64() bool {
	if x != nil {
		return x.IsBase64
	}
	return false
}

func (x *CreateQuestionFromLatexRequest) GetAutoCreateCodes() bool {
	if x != nil {
		return x.AutoCreateCodes
	}
	return false
}

type CreateQuestionFromLatexResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Response         *common.Response       `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	CreatedQuestions []*Question            `protobuf:"bytes,2,rep,name=created_questions,json=createdQuestions,proto3" json:"created_questions,omitempty"` // Created questions with IDs
	CreatedCodes     []*QuestionCode        `protobuf:"bytes,3,rep,name=created_codes,json=createdCodes,proto3" json:"created_codes,omitempty"`             // QuestionCodes that were auto-created
	CreatedCount     int32                  `protobuf:"varint,4,opt,name=created_count,json=createdCount,proto3" json:"created_count,omitempty"`            // Number of questions created
	FailedCount      int32                  `protobuf:"varint,5,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`               // Number of questions that failed
	Warnings         []string               `protobuf:"bytes,6,rep,name=warnings,proto3" json:"warnings,omitempty"`                                         // Warnings if any
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateQuestionFromLatexResponse) Reset() {
	*x = CreateQuestionFromLatexResponse{}
	mi := &file_v1_question_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuestionFromLatexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionFromLatexResponse) ProtoMessage() {}

func (x *CreateQuestionFromLatexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionFromLatexResponse.ProtoReflect.Descriptor instead.
func (*CreateQuestionFromLatexResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{22}
}

func (x *CreateQuestionFromLatexResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateQuestionFromLatexResponse) GetCreatedQuestions() []*Question {
	if x != nil {
		return x.CreatedQuestions
	}
	return nil
}

func (x *CreateQuestionFromLatexResponse) GetCreatedCodes() []*QuestionCode {
	if x != nil {
		return x.CreatedCodes
	}
	return nil
}

func (x *CreateQuestionFromLatexResponse) GetCreatedCount() int32 {
	if x != nil {
		return x.CreatedCount
	}
	return 0
}

func (x *CreateQuestionFromLatexResponse) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *CreateQuestionFromLatexResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Import LaTeX file
type ImportLatexRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LatexContent    string                 `protobuf:"bytes,1,opt,name=latex_content,json=latexContent,proto3" json:"latex_content,omitempty"`             // LaTeX content (can be base64 or raw)
	IsBase64        bool                   `protobuf:"varint,2,opt,name=is_base64,json=isBase64,proto3" json:"is_base64,omitempty"`                        // Whether content is base64 encoded
	UpsertMode      bool                   `protobuf:"varint,3,opt,name=upsert_mode,json=upsertMode,proto3" json:"upsert_mode,omitempty"`                  // Update existing questions
	AutoCreateCodes bool                   `protobuf:"varint,4,opt,name=auto_create_codes,json=autoCreateCodes,proto3" json:"auto_create_codes,omitempty"` // Auto-create missing QuestionCodes
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ImportLatexRequest) Reset() {
	*x = ImportLatexRequest{}
	mi := &file_v1_question_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportLatexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportLatexRequest) ProtoMessage() {}

func (x *ImportLatexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportLatexRequest.ProtoReflect.Descriptor instead.
func (*ImportLatexRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{23}
}

func (x *ImportLatexRequest) GetLatexContent() string {
	if x != nil {
		return x.LatexContent
	}
	return ""
}

func (x *ImportLatexRequest) GetIsBase64() bool {
	if x != nil {
		return x.IsBase64
	}
	return false
}

func (x *ImportLatexRequest) GetUpsertMode() bool {
	if x != nil {
		return x.UpsertMode
	}
	return false
}

func (x *ImportLatexRequest) GetAutoCreateCodes() bool {
	if x != nil {
		return x.AutoCreateCodes
	}
	return false
}

type ImportLatexResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Response             *common.Response       `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	TotalProcessed       int32                  `protobuf:"varint,2,opt,name=total_processed,json=totalProcessed,proto3" json:"total_processed,omitempty"`
	CreatedCount         int32                  `protobuf:"varint,3,opt,name=created_count,json=createdCount,proto3" json:"created_count,omitempty"`
	UpdatedCount         int32                  `protobuf:"varint,4,opt,name=updated_count,json=updatedCount,proto3" json:"updated_count,omitempty"`
	SkippedCount         int32                  `protobuf:"varint,5,opt,name=skipped_count,json=skippedCount,proto3" json:"skipped_count,omitempty"` // MA questions or errors
	Errors               []*ImportError         `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	QuestionCodesCreated []string               `protobuf:"bytes,7,rep,name=question_codes_created,json=questionCodesCreated,proto3" json:"question_codes_created,omitempty"` // New QuestionCodes created
	Summary              string                 `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ImportLatexResponse) Reset() {
	*x = ImportLatexResponse{}
	mi := &file_v1_question_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportLatexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportLatexResponse) ProtoMessage() {}

func (x *ImportLatexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportLatexResponse.ProtoReflect.Descriptor instead.
func (*ImportLatexResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{24}
}

func (x *ImportLatexResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ImportLatexResponse) GetTotalProcessed() int32 {
	if x != nil {
		return x.TotalProcessed
	}
	return 0
}

func (x *ImportLatexResponse) GetCreatedCount() int32 {
	if x != nil {
		return x.CreatedCount
	}
	return 0
}

func (x *ImportLatexResponse) GetUpdatedCount() int32 {
	if x != nil {
		return x.UpdatedCount
	}
	return 0
}

func (x *ImportLatexResponse) GetSkippedCount() int32 {
	if x != nil {
		return x.SkippedCount
	}
	return 0
}

func (x *ImportLatexResponse) GetErrors() []*ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportLatexResponse) GetQuestionCodesCreated() []string {
	if x != nil {
		return x.QuestionCodesCreated
	}
	return nil
}

func (x *ImportLatexResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type ImportError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RowNumber     int32                  `protobuf:"varint,1,opt,name=row_number,json=rowNumber,proto3" json:"row_number,omitempty"`
	FieldName     string                 `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	RowData       string                 `protobuf:"bytes,4,opt,name=row_data,json=rowData,proto3" json:"row_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportError) Reset() {
	*x = ImportError{}
	mi := &file_v1_question_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportError) ProtoMessage() {}

func (x *ImportError) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportError.ProtoReflect.Descriptor instead.
func (*ImportError) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{25}
}

func (x *ImportError) GetRowNumber() int32 {
	if x != nil {
		return x.RowNumber
	}
	return 0
}

func (x *ImportError) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *ImportError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ImportError) GetRowData() string {
	if x != nil {
		return x.RowData
	}
	return ""
}

type ImportQuestionsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Response       *common.Response       `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	TotalProcessed int32                  `protobuf:"varint,2,opt,name=total_processed,json=totalProcessed,proto3" json:"total_processed,omitempty"`
	CreatedCount   int32                  `protobuf:"varint,3,opt,name=created_count,json=createdCount,proto3" json:"created_count,omitempty"`
	UpdatedCount   int32                  `protobuf:"varint,4,opt,name=updated_count,json=updatedCount,proto3" json:"updated_count,omitempty"`
	ErrorCount     int32                  `protobuf:"varint,5,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	Errors         []*ImportError         `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	Summary        string                 `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ImportQuestionsResponse) Reset() {
	*x = ImportQuestionsResponse{}
	mi := &file_v1_question_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportQuestionsResponse) ProtoMessage() {}

func (x *ImportQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportQuestionsResponse.ProtoReflect.Descriptor instead.
func (*ImportQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{26}
}

func (x *ImportQuestionsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ImportQuestionsResponse) GetTotalProcessed() int32 {
	if x != nil {
		return x.TotalProcessed
	}
	return 0
}

func (x *ImportQuestionsResponse) GetCreatedCount() int32 {
	if x != nil {
		return x.CreatedCount
	}
	return 0
}

func (x *ImportQuestionsResponse) GetUpdatedCount() int32 {
	if x != nil {
		return x.UpdatedCount
	}
	return 0
}

func (x *ImportQuestionsResponse) GetErrorCount() int32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *ImportQuestionsResponse) GetErrors() []*ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportQuestionsResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

var File_v1_question_proto protoreflect.FileDescriptor

const file_v1_question_proto_rawDesc = "" +
	"\n" +
	"\x11v1/question.proto\x12\x02v1\x1a\x13common/common.proto\"s\n" +
	"\x06Answer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12\x1d\n" +
	"\n" +
	"is_correct\x18\x03 \x01(\bR\tisCorrect\x12 \n" +
	"\vexplanation\x18\x04 \x01(\tR\vexplanation\"\xeb\x06\n" +
	"\bQuestion\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\vraw_content\x18\x02 \x01(\tR\n" +
	"rawContent\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12\x1a\n" +
	"\bsubcount\x18\x04 \x01(\tR\bsubcount\x12(\n" +
	"\x04type\x18\x05 \x01(\x0e2\x14.common.QuestionTypeR\x04type\x12\x16\n" +
	"\x06source\x18\x06 \x01(\tR\x06source\x12?\n" +
	"\x12structured_answers\x18\a \x01(\v2\x0e.v1.AnswerListH\x00R\x11structuredAnswers\x12#\n" +
	"\fjson_answers\x18\b \x01(\tH\x00R\vjsonAnswers\x12B\n" +
	"\x12structured_correct\x18\t \x01(\v2\x11.v1.CorrectAnswerH\x01R\x11structuredCorrect\x120\n" +
	"\x13json_correct_answer\x18\n" +
	" \x01(\tH\x01R\x11jsonCorrectAnswer\x12\x1a\n" +
	"\bsolution\x18\v \x01(\tR\bsolution\x12\x10\n" +
	"\x03tag\x18\f \x03(\tR\x03tag\x12\x14\n" +
	"\x05grade\x18\r \x01(\tR\x05grade\x12\x18\n" +
	"\asubject\x18\x0e \x01(\tR\asubject\x12\x18\n" +
	"\achapter\x18\x0f \x01(\tR\achapter\x12\x14\n" +
	"\x05level\x18\x10 \x01(\tR\x05level\x12\x1f\n" +
	"\vusage_count\x18\x11 \x01(\x05R\n" +
	"usageCount\x12\x18\n" +
	"\acreator\x18\x12 \x01(\tR\acreator\x12.\n" +
	"\x06status\x18\x13 \x01(\x0e2\x16.common.QuestionStatusR\x06status\x12\x1a\n" +
	"\bfeedback\x18\x14 \x01(\x05R\bfeedback\x127\n" +
	"\n" +
	"difficulty\x18\x15 \x01(\x0e2\x17.common.DifficultyLevelR\n" +
	"difficulty\x12(\n" +
	"\x10question_code_id\x18\x16 \x01(\tR\x0equestionCodeId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x17 \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x18 \x01(\tR\tupdatedAtB\r\n" +
	"\vanswer_dataB\x15\n" +
	"\x13correct_answer_data\"2\n" +
	"\n" +
	"AnswerList\x12$\n" +
	"\aanswers\x18\x01 \x03(\v2\n" +
	".v1.AnswerR\aanswers\"\xa3\x01\n" +
	"\rCorrectAnswer\x12*\n" +
	"\x06single\x18\x01 \x01(\v2\x10.v1.SingleAnswerH\x00R\x06single\x121\n" +
	"\bmultiple\x18\x02 \x01(\v2\x13.v1.MultipleAnswersH\x00R\bmultiple\x12$\n" +
	"\x04text\x18\x03 \x01(\v2\x0e.v1.TextAnswerH\x00R\x04textB\r\n" +
	"\vanswer_type\"+\n" +
	"\fSingleAnswer\x12\x1b\n" +
	"\tanswer_id\x18\x01 \x01(\tR\banswerId\"0\n" +
	"\x0fMultipleAnswers\x12\x1d\n" +
	"\n" +
	"answer_ids\x18\x01 \x03(\tR\tanswerIds\" \n" +
	"\n" +
	"TextAnswer\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"\xed\x05\n" +
	"\x15CreateQuestionRequest\x12\x1f\n" +
	"\vraw_content\x18\x01 \x01(\tR\n" +
	"rawContent\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12\x1a\n" +
	"\bsubcount\x18\x03 \x01(\tR\bsubcount\x12(\n" +
	"\x04type\x18\x04 \x01(\x0e2\x14.common.QuestionTypeR\x04type\x12\x16\n" +
	"\x06source\x18\x05 \x01(\tR\x06source\x12?\n" +
	"\x12structured_answers\x18\x06 \x01(\v2\x0e.v1.AnswerListH\x00R\x11structuredAnswers\x12#\n" +
	"\fjson_answers\x18\a \x01(\tH\x00R\vjsonAnswers\x12B\n" +
	"\x12structured_correct\x18\b \x01(\v2\x11.v1.CorrectAnswerH\x01R\x11structuredCorrect\x120\n" +
	"\x13json_correct_answer\x18\t \x01(\tH\x01R\x11jsonCorrectAnswer\x12\x1a\n" +
	"\bsolution\x18\n" +
	" \x01(\tR\bsolution\x12\x10\n" +
	"\x03tag\x18\v \x03(\tR\x03tag\x12\x14\n" +
	"\x05grade\x18\f \x01(\tR\x05grade\x12\x18\n" +
	"\asubject\x18\r \x01(\tR\asubject\x12\x18\n" +
	"\achapter\x18\x0e \x01(\tR\achapter\x12\x14\n" +
	"\x05level\x18\x0f \x01(\tR\x05level\x12(\n" +
	"\x10question_code_id\x18\x10 \x01(\tR\x0equestionCodeId\x12.\n" +
	"\x06status\x18\x11 \x01(\x0e2\x16.common.QuestionStatusR\x06status\x127\n" +
	"\n" +
	"difficulty\x18\x12 \x01(\x0e2\x17.common.DifficultyLevelR\n" +
	"difficulty\x12\x18\n" +
	"\acreator\x18\x13 \x01(\tR\acreatorB\r\n" +
	"\vanswer_dataB\x15\n" +
	"\x13correct_answer_data\"p\n" +
	"\x16CreateQuestionResponse\x12,\n" +
	"\bresponse\x18\x01 \x01(\v2\x10.common.ResponseR\bresponse\x12(\n" +
	"\bquestion\x18\x02 \x01(\v2\f.v1.QuestionR\bquestion\"$\n" +
	"\x12GetQuestionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"m\n" +
	"\x13GetQuestionResponse\x12,\n" +
	"\bresponse\x18\x01 \x01(\v2\x10.common.ResponseR\bresponse\x12(\n" +
	"\bquestion\x18\x02 \x01(\v2\f.v1.QuestionR\bquestion\"Q\n" +
	"\x14ListQuestionsRequest\x129\n" +
	"\n" +
	"pagination\x18\x01 \x01(\v2\x19.common.PaginationRequestR\n" +
	"pagination\"\xad\x01\n" +
	"\x15ListQuestionsResponse\x12,\n" +
	"\bresponse\x18\x01 \x01(\v2\x10.common.ResponseR\bresponse\x12*\n" +
	"\tquestions\x18\x02 \x03(\v2\f.v1.QuestionR\tquestions\x12:\n" +
	"\n" +
	"pagination\x18\x03 \x01(\v2\x1a.common.PaginationResponseR\n" +
	"pagination\"\xe3\x05\n" +
	"\x15UpdateQuestionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\vraw_content\x18\x02 \x01(\tR\n" +
	"rawContent\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12\x1a\n" +
	"\bsubcount\x18\x04 \x01(\tR\bsubcount\x12(\n" +
	"\x04type\x18\x05 \x01(\x0e2\x14.common.QuestionTypeR\x04type\x12\x16\n" +
	"\x06source\x18\x06 \x01(\tR\x06source\x12?\n" +
	"\x12structured_answers\x18\a \x01(\v2\x0e.v1.AnswerListH\x00R\x11structuredAnswers\x12#\n" +
	"\fjson_answers\x18\b \x01(\tH\x00R\vjsonAnswers\x12B\n" +
	"\x12structured_correct\x18\t \x01(\v2\x11.v1.CorrectAnswerH\x01R\x11structuredCorrect\x120\n" +
	"\x13json_correct_answer\x18\n" +
	" \x01(\tH\x01R\x11jsonCorrectAnswer\x12\x1a\n" +
	"\bsolution\x18\v \x01(\tR\bsolution\x12\x10\n" +
	"\x03tag\x18\f \x03(\tR\x03tag\x12\x14\n" +
	"\x05grade\x18\r \x01(\tR\x05grade\x12\x18\n" +
	"\asubject\x18\x0e \x01(\tR\asubject\x12\x18\n" +
	"\achapter\x18\x0f \x01(\tR\achapter\x12\x14\n" +
	"\x05level\x18\x10 \x01(\tR\x05level\x12(\n" +
	"\x10question_code_id\x18\x11 \x01(\tR\x0equestionCodeId\x12.\n" +
	"\x06status\x18\x12 \x01(\x0e2\x16.common.QuestionStatusR\x06status\x127\n" +
	"\n" +
	"difficulty\x18\x13 \x01(\x0e2\x17.common.DifficultyLevelR\n" +
	"difficultyB\r\n" +
	"\vanswer_dataB\x15\n" +
	"\x13correct_answer_data\"p\n" +
	"\x16UpdateQuestionResponse\x12,\n" +
	"\bresponse\x18\x01 \x01(\v2\x10.common.ResponseR\bresponse\x12(\n" +
	"\bquestion\x18\x02 \x01(\v2\f.v1.QuestionR\bquestion\"'\n" +
	"\x15DeleteQuestionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"F\n" +
	"\x16DeleteQuestionResponse\x12,\n" +
	"\bresponse\x18\x01 \x01(\v2\x10.common.ResponseR\bresponse\"a\n" +
	"\x16ImportQuestionsRequest\x12&\n" +
	"\x0fcsv_data_base64\x18\x01 \x01(\tR\rcsvDataBase64\x12\x1f\n" +
	"\vupsert_mode\x18\x02 \x01(\bR\n" +
	"upsertMode\"\xb1\x01\n" +
	"\fQuestionCode\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06prefix\x18\x02 \x01(\tR\x06prefix\x12\x1b\n" +
	"\tmain_code\x18\x03 \x01(\tR\bmainCode\x12\x1f\n" +
	"\vextend_code\x18\x04 \x01(\tR\n" +
	"extendCode\x12\x19\n" +
	"\bnum_part\x18\x05 \x01(\tR\anumPart\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\"]\n" +
	"\x19ParseLatexQuestionRequest\x12#\n" +
	"\rlatex_content\x18\x01 \x01(\tR\flatexContent\x12\x1b\n" +
	"\tis_base64\x18\x02 \x01(\bR\bisBase64\"\xcb\x01\n" +
	"\x1aParseLatexQuestionResponse\x12,\n" +
	"\bresponse\x18\x01 \x01(\v2\x10.common.ResponseR\bresponse\x12*\n" +
	"\tquestions\x18\x02 \x03(\v2\f.v1.QuestionR\tquestions\x127\n" +
	"\x0equestion_codes\x18\x03 \x03(\v2\x10.v1.QuestionCodeR\rquestionCodes\x12\x1a\n" +
	"\bwarnings\x18\x04 \x03(\tR\bwarnings\"\x8e\x01\n" +
	"\x1eCreateQuestionFromLatexRequest\x12#\n" +
	"\rlatex_content\x18\x01 \x01(\tR\flatexContent\x12\x1b\n" +
	"\tis_base64\x18\x02 \x01(\bR\bisBase64\x12*\n" +
	"\x11auto_create_codes\x18\x03 \x01(\bR\x0fautoCreateCodes\"\xa5\x02\n" +
	"\x1fCreateQuestionFromLatexResponse\x12,\n" +
	"\bresponse\x18\x01 \x01(\v2\x10.common.ResponseR\bresponse\x129\n" +
	"\x11created_questions\x18\x02 \x03(\v2\f.v1.QuestionR\x10createdQuestions\x125\n" +
	"\rcreated_codes\x18\x03 \x03(\v2\x10.v1.QuestionCodeR\fcreatedCodes\x12#\n" +
	"\rcreated_count\x18\x04 \x01(\x05R\fcreatedCount\x12!\n" +
	"\ffailed_count\x18\x05 \x01(\x05R\vfailedCount\x12\x1a\n" +
	"\bwarnings\x18\x06 \x03(\tR\bwarnings\"\xa3\x01\n" +
	"\x12ImportLatexRequest\x12#\n" +
	"\rlatex_content\x18\x01 \x01(\tR\flatexContent\x12\x1b\n" +
	"\tis_base64\x18\x02 \x01(\bR\bisBase64\x12\x1f\n" +
	"\vupsert_mode\x18\x03 \x01(\bR\n" +
	"upsertMode\x12*\n" +
	"\x11auto_create_codes\x18\x04 \x01(\bR\x0fautoCreateCodes\"\xd4\x02\n" +
	"\x13ImportLatexResponse\x12,\n" +
	"\bresponse\x18\x01 \x01(\v2\x10.common.ResponseR\bresponse\x12'\n" +
	"\x0ftotal_processed\x18\x02 \x01(\x05R\x0etotalProcessed\x12#\n" +
	"\rcreated_count\x18\x03 \x01(\x05R\fcreatedCount\x12#\n" +
	"\rupdated_count\x18\x04 \x01(\x05R\fupdatedCount\x12#\n" +
	"\rskipped_count\x18\x05 \x01(\x05R\fskippedCount\x12'\n" +
	"\x06errors\x18\x06 \x03(\v2\x0f.v1.ImportErrorR\x06errors\x124\n" +
	"\x16question_codes_created\x18\a \x03(\tR\x14questionCodesCreated\x12\x18\n" +
	"\asummary\x18\b \x01(\tR\asummary\"\x8b\x01\n" +
	"\vImportError\x12\x1d\n" +
	"\n" +
	"row_number\x18\x01 \x01(\x05R\trowNumber\x12\x1d\n" +
	"\n" +
	"field_name\x18\x02 \x01(\tR\tfieldName\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\x12\x19\n" +
	"\brow_data\x18\x04 \x01(\tR\arowData\"\x9e\x02\n" +
	"\x17ImportQuestionsResponse\x12,\n" +
	"\bresponse\x18\x01 \x01(\v2\x10.common.ResponseR\bresponse\x12'\n" +
	"\x0ftotal_processed\x18\x02 \x01(\x05R\x0etotalProcessed\x12#\n" +
	"\rcreated_count\x18\x03 \x01(\x05R\fcreatedCount\x12#\n" +
	"\rupdated_count\x18\x04 \x01(\x05R\fupdatedCount\x12\x1f\n" +
	"\verror_count\x18\x05 \x01(\x05R\n" +
	"errorCount\x12'\n" +
	"\x06errors\x18\x06 \x03(\v2\x0f.v1.ImportErrorR\x06errors\x12\x18\n" +
	"\asummary\x18\a \x01(\tR\asummary2\xb7\x05\n" +
	"\x0fQuestionService\x12G\n" +
	"\x0eCreateQuestion\x12\x19.v1.CreateQuestionRequest\x1a\x1a.v1.CreateQuestionResponse\x12>\n" +
	"\vGetQuestion\x12\x16.v1.GetQuestionRequest\x1a\x17.v1.GetQuestionResponse\x12G\n" +
	"\x0eUpdateQuestion\x12\x19.v1.UpdateQuestionRequest\x1a\x1a.v1.UpdateQuestionResponse\x12G\n" +
	"\x0eDeleteQuestion\x12\x19.v1.DeleteQuestionRequest\x1a\x1a.v1.DeleteQuestionResponse\x12D\n" +
	"\rListQuestions\x12\x18.v1.ListQuestionsRequest\x1a\x19.v1.ListQuestionsResponse\x12J\n" +
	"\x0fImportQuestions\x12\x1a.v1.ImportQuestionsRequest\x1a\x1b.v1.ImportQuestionsResponse\x12S\n" +
	"\x12ParseLatexQuestion\x12\x1d.v1.ParseLatexQuestionRequest\x1a\x1e.v1.ParseLatexQuestionResponse\x12b\n" +
	"\x17CreateQuestionFromLatex\x12\".v1.CreateQuestionFromLatexRequest\x1a#.v1.CreateQuestionFromLatexResponse\x12>\n" +
	"\vImportLatex\x12\x16.v1.ImportLatexRequest\x1a\x17.v1.ImportLatexResponseB\x80\x01\n" +
	"\x06com.v1B\rQuestionProtoP\x01Z?github.com/AnhPhan49/exam-bank-system/apps/backend/pkg/proto/v1\xa2\x02\x03VXX\xaa\x02\x02V1\xca\x02\x02V1\xe2\x02\x0eV1\\GPBMetadata\xea\x02\x02V1b\x06proto3"

var (
	file_v1_question_proto_rawDescOnce sync.Once
	file_v1_question_proto_rawDescData []byte
)

func file_v1_question_proto_rawDescGZIP() []byte {
	file_v1_question_proto_rawDescOnce.Do(func() {
		file_v1_question_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_question_proto_rawDesc), len(file_v1_question_proto_rawDesc)))
	})
	return file_v1_question_proto_rawDescData
}

var file_v1_question_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_v1_question_proto_goTypes = []any{
	(*Answer)(nil),                          // 0: v1.Answer
	(*Question)(nil),                        // 1: v1.Question
	(*AnswerList)(nil),                      // 2: v1.AnswerList
	(*CorrectAnswer)(nil),                   // 3: v1.CorrectAnswer
	(*SingleAnswer)(nil),                    // 4: v1.SingleAnswer
	(*MultipleAnswers)(nil),                 // 5: v1.MultipleAnswers
	(*TextAnswer)(nil),                      // 6: v1.TextAnswer
	(*CreateQuestionRequest)(nil),           // 7: v1.CreateQuestionRequest
	(*CreateQuestionResponse)(nil),          // 8: v1.CreateQuestionResponse
	(*GetQuestionRequest)(nil),              // 9: v1.GetQuestionRequest
	(*GetQuestionResponse)(nil),             // 10: v1.GetQuestionResponse
	(*ListQuestionsRequest)(nil),            // 11: v1.ListQuestionsRequest
	(*ListQuestionsResponse)(nil),           // 12: v1.ListQuestionsResponse
	(*UpdateQuestionRequest)(nil),           // 13: v1.UpdateQuestionRequest
	(*UpdateQuestionResponse)(nil),          // 14: v1.UpdateQuestionResponse
	(*DeleteQuestionRequest)(nil),           // 15: v1.DeleteQuestionRequest
	(*DeleteQuestionResponse)(nil),          // 16: v1.DeleteQuestionResponse
	(*ImportQuestionsRequest)(nil),          // 17: v1.ImportQuestionsRequest
	(*QuestionCode)(nil),                    // 18: v1.QuestionCode
	(*ParseLatexQuestionRequest)(nil),       // 19: v1.ParseLatexQuestionRequest
	(*ParseLatexQuestionResponse)(nil),      // 20: v1.ParseLatexQuestionResponse
	(*CreateQuestionFromLatexRequest)(nil),  // 21: v1.CreateQuestionFromLatexRequest
	(*CreateQuestionFromLatexResponse)(nil), // 22: v1.CreateQuestionFromLatexResponse
	(*ImportLatexRequest)(nil),              // 23: v1.ImportLatexRequest
	(*ImportLatexResponse)(nil),             // 24: v1.ImportLatexResponse
	(*ImportError)(nil),                     // 25: v1.ImportError
	(*ImportQuestionsResponse)(nil),         // 26: v1.ImportQuestionsResponse
	(common.QuestionType)(0),                // 27: common.QuestionType
	(common.QuestionStatus)(0),              // 28: common.QuestionStatus
	(common.DifficultyLevel)(0),             // 29: common.DifficultyLevel
	(*common.Response)(nil),                 // 30: common.Response
	(*common.PaginationRequest)(nil),        // 31: common.PaginationRequest
	(*common.PaginationResponse)(nil),       // 32: common.PaginationResponse
}
var file_v1_question_proto_depIdxs = []int32{
	27, // 0: v1.Question.type:type_name -> common.QuestionType
	2,  // 1: v1.Question.structured_answers:type_name -> v1.AnswerList
	3,  // 2: v1.Question.structured_correct:type_name -> v1.CorrectAnswer
	28, // 3: v1.Question.status:type_name -> common.QuestionStatus
	29, // 4: v1.Question.difficulty:type_name -> common.DifficultyLevel
	0,  // 5: v1.AnswerList.answers:type_name -> v1.Answer
	4,  // 6: v1.CorrectAnswer.single:type_name -> v1.SingleAnswer
	5,  // 7: v1.CorrectAnswer.multiple:type_name -> v1.MultipleAnswers
	6,  // 8: v1.CorrectAnswer.text:type_name -> v1.TextAnswer
	27, // 9: v1.CreateQuestionRequest.type:type_name -> common.QuestionType
	2,  // 10: v1.CreateQuestionRequest.structured_answers:type_name -> v1.AnswerList
	3,  // 11: v1.CreateQuestionRequest.structured_correct:type_name -> v1.CorrectAnswer
	28, // 12: v1.CreateQuestionRequest.status:type_name -> common.QuestionStatus
	29, // 13: v1.CreateQuestionRequest.difficulty:type_name -> common.DifficultyLevel
	30, // 14: v1.CreateQuestionResponse.response:type_name -> common.Response
	1,  // 15: v1.CreateQuestionResponse.question:type_name -> v1.Question
	30, // 16: v1.GetQuestionResponse.response:type_name -> common.Response
	1,  // 17: v1.GetQuestionResponse.question:type_name -> v1.Question
	31, // 18: v1.ListQuestionsRequest.pagination:type_name -> common.PaginationRequest
	30, // 19: v1.ListQuestionsResponse.response:type_name -> common.Response
	1,  // 20: v1.ListQuestionsResponse.questions:type_name -> v1.Question
	32, // 21: v1.ListQuestionsResponse.pagination:type_name -> common.PaginationResponse
	27, // 22: v1.UpdateQuestionRequest.type:type_name -> common.QuestionType
	2,  // 23: v1.UpdateQuestionRequest.structured_answers:type_name -> v1.AnswerList
	3,  // 24: v1.UpdateQuestionRequest.structured_correct:type_name -> v1.CorrectAnswer
	28, // 25: v1.UpdateQuestionRequest.status:type_name -> common.QuestionStatus
	29, // 26: v1.UpdateQuestionRequest.difficulty:type_name -> common.DifficultyLevel
	30, // 27: v1.UpdateQuestionResponse.response:type_name -> common.Response
	1,  // 28: v1.UpdateQuestionResponse.question:type_name -> v1.Question
	30, // 29: v1.DeleteQuestionResponse.response:type_name -> common.Response
	30, // 30: v1.ParseLatexQuestionResponse.response:type_name -> common.Response
	1,  // 31: v1.ParseLatexQuestionResponse.questions:type_name -> v1.Question
	18, // 32: v1.ParseLatexQuestionResponse.question_codes:type_name -> v1.QuestionCode
	30, // 33: v1.CreateQuestionFromLatexResponse.response:type_name -> common.Response
	1,  // 34: v1.CreateQuestionFromLatexResponse.created_questions:type_name -> v1.Question
	18, // 35: v1.CreateQuestionFromLatexResponse.created_codes:type_name -> v1.QuestionCode
	30, // 36: v1.ImportLatexResponse.response:type_name -> common.Response
	25, // 37: v1.ImportLatexResponse.errors:type_name -> v1.ImportError
	30, // 38: v1.ImportQuestionsResponse.response:type_name -> common.Response
	25, // 39: v1.ImportQuestionsResponse.errors:type_name -> v1.ImportError
	7,  // 40: v1.QuestionService.CreateQuestion:input_type -> v1.CreateQuestionRequest
	9,  // 41: v1.QuestionService.GetQuestion:input_type -> v1.GetQuestionRequest
	13, // 42: v1.QuestionService.UpdateQuestion:input_type -> v1.UpdateQuestionRequest
	15, // 43: v1.QuestionService.DeleteQuestion:input_type -> v1.DeleteQuestionRequest
	11, // 44: v1.QuestionService.ListQuestions:input_type -> v1.ListQuestionsRequest
	17, // 45: v1.QuestionService.ImportQuestions:input_type -> v1.ImportQuestionsRequest
	19, // 46: v1.QuestionService.ParseLatexQuestion:input_type -> v1.ParseLatexQuestionRequest
	21, // 47: v1.QuestionService.CreateQuestionFromLatex:input_type -> v1.CreateQuestionFromLatexRequest
	23, // 48: v1.QuestionService.ImportLatex:input_type -> v1.ImportLatexRequest
	8,  // 49: v1.QuestionService.CreateQuestion:output_type -> v1.CreateQuestionResponse
	10, // 50: v1.QuestionService.GetQuestion:output_type -> v1.GetQuestionResponse
	14, // 51: v1.QuestionService.UpdateQuestion:output_type -> v1.UpdateQuestionResponse
	16, // 52: v1.QuestionService.DeleteQuestion:output_type -> v1.DeleteQuestionResponse
	12, // 53: v1.QuestionService.ListQuestions:output_type -> v1.ListQuestionsResponse
	26, // 54: v1.QuestionService.ImportQuestions:output_type -> v1.ImportQuestionsResponse
	20, // 55: v1.QuestionService.ParseLatexQuestion:output_type -> v1.ParseLatexQuestionResponse
	22, // 56: v1.QuestionService.CreateQuestionFromLatex:output_type -> v1.CreateQuestionFromLatexResponse
	24, // 57: v1.QuestionService.ImportLatex:output_type -> v1.ImportLatexResponse
	49, // [49:58] is the sub-list for method output_type
	40, // [40:49] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_v1_question_proto_init() }
func file_v1_question_proto_init() {
	if File_v1_question_proto != nil {
		return
	}
	file_v1_question_proto_msgTypes[1].OneofWrappers = []any{
		(*Question_StructuredAnswers)(nil),
		(*Question_JsonAnswers)(nil),
		(*Question_StructuredCorrect)(nil),
		(*Question_JsonCorrectAnswer)(nil),
	}
	file_v1_question_proto_msgTypes[3].OneofWrappers = []any{
		(*CorrectAnswer_Single)(nil),
		(*CorrectAnswer_Multiple)(nil),
		(*CorrectAnswer_Text)(nil),
	}
	file_v1_question_proto_msgTypes[7].OneofWrappers = []any{
		(*CreateQuestionRequest_StructuredAnswers)(nil),
		(*CreateQuestionRequest_JsonAnswers)(nil),
		(*CreateQuestionRequest_StructuredCorrect)(nil),
		(*CreateQuestionRequest_JsonCorrectAnswer)(nil),
	}
	file_v1_question_proto_msgTypes[13].OneofWrappers = []any{
		(*UpdateQuestionRequest_StructuredAnswers)(nil),
		(*UpdateQuestionRequest_JsonAnswers)(nil),
		(*UpdateQuestionRequest_StructuredCorrect)(nil),
		(*UpdateQuestionRequest_JsonCorrectAnswer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_question_proto_rawDesc), len(file_v1_question_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_question_proto_goTypes,
		DependencyIndexes: file_v1_question_proto_depIdxs,
		MessageInfos:      file_v1_question_proto_msgTypes,
	}.Build()
	File_v1_question_proto = out.File
	file_v1_question_proto_goTypes = nil
	file_v1_question_proto_depIdxs = nil
}
