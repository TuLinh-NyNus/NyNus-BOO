// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v6.31.1
// source: v1/question.proto

package v1

import (
	common "exam-bank-system/apps/backend/pkg/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Answer message - for structured answers
type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content     string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // Changed from text to content to match frontend
	IsCorrect   bool   `protobuf:"varint,3,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
	Explanation string `protobuf:"bytes,4,opt,name=explanation,proto3" json:"explanation,omitempty"` // Added explanation field
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{0}
}

func (x *Answer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Answer) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Answer) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

func (x *Answer) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// Question message - matches database schema
type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RawContent string              `protobuf:"bytes,2,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"` // LaTeX gốc từ user
	Content    string              `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                         // Nội dung đã xử lý (cleaned)
	Subcount   string              `protobuf:"bytes,4,opt,name=subcount,proto3" json:"subcount,omitempty"`                       // [XX.N] format
	Type       common.QuestionType `protobuf:"varint,5,opt,name=type,proto3,enum=common.QuestionType" json:"type,omitempty"`     // MC, TF, SA, ES, MA
	Source     string              `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`                           // Nguồn câu hỏi
	// Structured answers for MC/TF or JSON string for complex types
	//
	// Types that are assignable to AnswerData:
	//
	//	*Question_StructuredAnswers
	//	*Question_JsonAnswers
	AnswerData isQuestion_AnswerData `protobuf_oneof:"answer_data"`
	// Types that are assignable to CorrectAnswerData:
	//
	//	*Question_StructuredCorrect
	//	*Question_JsonCorrectAnswer
	CorrectAnswerData isQuestion_CorrectAnswerData `protobuf_oneof:"correct_answer_data"`
	Solution          string                       `protobuf:"bytes,11,opt,name=solution,proto3" json:"solution,omitempty"` // Lời giải chi tiết
	Tag               []string                     `protobuf:"bytes,12,rep,name=tag,proto3" json:"tag,omitempty"`           // Tags cho câu hỏi
	// Metadata & Classification (optional, for filtering purposes only)
	Grade   string `protobuf:"bytes,13,opt,name=grade,proto3" json:"grade,omitempty"`     // Lớp (0,1,2) - Optional classification
	Subject string `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"` // Môn học (P,L,H) - Optional classification
	Chapter string `protobuf:"bytes,15,opt,name=chapter,proto3" json:"chapter,omitempty"` // Chương (1-9) - Optional classification
	Level   string `protobuf:"bytes,16,opt,name=level,proto3" json:"level,omitempty"`     // Mức độ (N,H,V,C,T,M) - Optional classification
	// Usage tracking
	UsageCount     int32                  `protobuf:"varint,17,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`              // Số lần sử dụng
	Creator        string                 `protobuf:"bytes,18,opt,name=creator,proto3" json:"creator,omitempty"`                                       // Người tạo
	Status         common.QuestionStatus  `protobuf:"varint,19,opt,name=status,proto3,enum=common.QuestionStatus" json:"status,omitempty"`             // ACTIVE, PENDING, INACTIVE, ARCHIVED
	Feedback       int32                  `protobuf:"varint,20,opt,name=feedback,proto3" json:"feedback,omitempty"`                                    // Điểm feedback
	Difficulty     common.DifficultyLevel `protobuf:"varint,21,opt,name=difficulty,proto3,enum=common.DifficultyLevel" json:"difficulty,omitempty"`    // EASY, MEDIUM, HARD, EXPERT
	QuestionCodeId string                 `protobuf:"bytes,22,opt,name=question_code_id,json=questionCodeId,proto3" json:"question_code_id,omitempty"` // FK to QuestionCode
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsFavorite     bool                   `protobuf:"varint,25,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"` // Đánh dấu câu hỏi yêu thích
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{1}
}

func (x *Question) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Question) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *Question) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Question) GetSubcount() string {
	if x != nil {
		return x.Subcount
	}
	return ""
}

func (x *Question) GetType() common.QuestionType {
	if x != nil {
		return x.Type
	}
	return common.QuestionType(0)
}

func (x *Question) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (m *Question) GetAnswerData() isQuestion_AnswerData {
	if m != nil {
		return m.AnswerData
	}
	return nil
}

func (x *Question) GetStructuredAnswers() *AnswerList {
	if x, ok := x.GetAnswerData().(*Question_StructuredAnswers); ok {
		return x.StructuredAnswers
	}
	return nil
}

func (x *Question) GetJsonAnswers() string {
	if x, ok := x.GetAnswerData().(*Question_JsonAnswers); ok {
		return x.JsonAnswers
	}
	return ""
}

func (m *Question) GetCorrectAnswerData() isQuestion_CorrectAnswerData {
	if m != nil {
		return m.CorrectAnswerData
	}
	return nil
}

func (x *Question) GetStructuredCorrect() *CorrectAnswer {
	if x, ok := x.GetCorrectAnswerData().(*Question_StructuredCorrect); ok {
		return x.StructuredCorrect
	}
	return nil
}

func (x *Question) GetJsonCorrectAnswer() string {
	if x, ok := x.GetCorrectAnswerData().(*Question_JsonCorrectAnswer); ok {
		return x.JsonCorrectAnswer
	}
	return ""
}

func (x *Question) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *Question) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Question) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *Question) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Question) GetChapter() string {
	if x != nil {
		return x.Chapter
	}
	return ""
}

func (x *Question) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Question) GetUsageCount() int32 {
	if x != nil {
		return x.UsageCount
	}
	return 0
}

func (x *Question) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Question) GetStatus() common.QuestionStatus {
	if x != nil {
		return x.Status
	}
	return common.QuestionStatus(0)
}

func (x *Question) GetFeedback() int32 {
	if x != nil {
		return x.Feedback
	}
	return 0
}

func (x *Question) GetDifficulty() common.DifficultyLevel {
	if x != nil {
		return x.Difficulty
	}
	return common.DifficultyLevel(0)
}

func (x *Question) GetQuestionCodeId() string {
	if x != nil {
		return x.QuestionCodeId
	}
	return ""
}

func (x *Question) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Question) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Question) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type isQuestion_AnswerData interface {
	isQuestion_AnswerData()
}

type Question_StructuredAnswers struct {
	StructuredAnswers *AnswerList `protobuf:"bytes,7,opt,name=structured_answers,json=structuredAnswers,proto3,oneof"` // For MC/TF questions
}

type Question_JsonAnswers struct {
	JsonAnswers string `protobuf:"bytes,8,opt,name=json_answers,json=jsonAnswers,proto3,oneof"` // For complex answer formats (JSONB in DB)
}

func (*Question_StructuredAnswers) isQuestion_AnswerData() {}

func (*Question_JsonAnswers) isQuestion_AnswerData() {}

type isQuestion_CorrectAnswerData interface {
	isQuestion_CorrectAnswerData()
}

type Question_StructuredCorrect struct {
	StructuredCorrect *CorrectAnswer `protobuf:"bytes,9,opt,name=structured_correct,json=structuredCorrect,proto3,oneof"` // For MC/TF/SA
}

type Question_JsonCorrectAnswer struct {
	JsonCorrectAnswer string `protobuf:"bytes,10,opt,name=json_correct_answer,json=jsonCorrectAnswer,proto3,oneof"` // For complex formats (JSONB in DB)
}

func (*Question_StructuredCorrect) isQuestion_CorrectAnswerData() {}

func (*Question_JsonCorrectAnswer) isQuestion_CorrectAnswerData() {}

// Wrapper for multiple answers
type AnswerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answers []*Answer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *AnswerList) Reset() {
	*x = AnswerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerList) ProtoMessage() {}

func (x *AnswerList) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerList.ProtoReflect.Descriptor instead.
func (*AnswerList) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{2}
}

func (x *AnswerList) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

// Correct answer structure
type CorrectAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AnswerType:
	//
	//	*CorrectAnswer_Single
	//	*CorrectAnswer_Multiple
	//	*CorrectAnswer_Text
	AnswerType isCorrectAnswer_AnswerType `protobuf_oneof:"answer_type"`
}

func (x *CorrectAnswer) Reset() {
	*x = CorrectAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectAnswer) ProtoMessage() {}

func (x *CorrectAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectAnswer.ProtoReflect.Descriptor instead.
func (*CorrectAnswer) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{3}
}

func (m *CorrectAnswer) GetAnswerType() isCorrectAnswer_AnswerType {
	if m != nil {
		return m.AnswerType
	}
	return nil
}

func (x *CorrectAnswer) GetSingle() *SingleAnswer {
	if x, ok := x.GetAnswerType().(*CorrectAnswer_Single); ok {
		return x.Single
	}
	return nil
}

func (x *CorrectAnswer) GetMultiple() *MultipleAnswers {
	if x, ok := x.GetAnswerType().(*CorrectAnswer_Multiple); ok {
		return x.Multiple
	}
	return nil
}

func (x *CorrectAnswer) GetText() *TextAnswer {
	if x, ok := x.GetAnswerType().(*CorrectAnswer_Text); ok {
		return x.Text
	}
	return nil
}

type isCorrectAnswer_AnswerType interface {
	isCorrectAnswer_AnswerType()
}

type CorrectAnswer_Single struct {
	Single *SingleAnswer `protobuf:"bytes,1,opt,name=single,proto3,oneof"` // For MC
}

type CorrectAnswer_Multiple struct {
	Multiple *MultipleAnswers `protobuf:"bytes,2,opt,name=multiple,proto3,oneof"` // For TF
}

type CorrectAnswer_Text struct {
	Text *TextAnswer `protobuf:"bytes,3,opt,name=text,proto3,oneof"` // For SA
}

func (*CorrectAnswer_Single) isCorrectAnswer_AnswerType() {}

func (*CorrectAnswer_Multiple) isCorrectAnswer_AnswerType() {}

func (*CorrectAnswer_Text) isCorrectAnswer_AnswerType() {}

type SingleAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerId string `protobuf:"bytes,1,opt,name=answer_id,json=answerId,proto3" json:"answer_id,omitempty"`
}

func (x *SingleAnswer) Reset() {
	*x = SingleAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleAnswer) ProtoMessage() {}

func (x *SingleAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleAnswer.ProtoReflect.Descriptor instead.
func (*SingleAnswer) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{4}
}

func (x *SingleAnswer) GetAnswerId() string {
	if x != nil {
		return x.AnswerId
	}
	return ""
}

type MultipleAnswers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerIds []string `protobuf:"bytes,1,rep,name=answer_ids,json=answerIds,proto3" json:"answer_ids,omitempty"`
}

func (x *MultipleAnswers) Reset() {
	*x = MultipleAnswers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleAnswers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleAnswers) ProtoMessage() {}

func (x *MultipleAnswers) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleAnswers.ProtoReflect.Descriptor instead.
func (*MultipleAnswers) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{5}
}

func (x *MultipleAnswers) GetAnswerIds() []string {
	if x != nil {
		return x.AnswerIds
	}
	return nil
}

type TextAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextAnswer) Reset() {
	*x = TextAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextAnswer) ProtoMessage() {}

func (x *TextAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextAnswer.ProtoReflect.Descriptor instead.
func (*TextAnswer) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{6}
}

func (x *TextAnswer) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Question management
type CreateQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawContent string              `protobuf:"bytes,1,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"` // LaTeX gốc từ user
	Content    string              `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                         // Nội dung đã xử lý
	Subcount   string              `protobuf:"bytes,3,opt,name=subcount,proto3" json:"subcount,omitempty"`                       // [XX.N] format
	Type       common.QuestionType `protobuf:"varint,4,opt,name=type,proto3,enum=common.QuestionType" json:"type,omitempty"`     // MC, TF, SA, ES, MA
	Source     string              `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`                           // Nguồn câu hỏi
	// Flexible answer format
	//
	// Types that are assignable to AnswerData:
	//
	//	*CreateQuestionRequest_StructuredAnswers
	//	*CreateQuestionRequest_JsonAnswers
	AnswerData isCreateQuestionRequest_AnswerData `protobuf_oneof:"answer_data"`
	// Types that are assignable to CorrectAnswerData:
	//
	//	*CreateQuestionRequest_StructuredCorrect
	//	*CreateQuestionRequest_JsonCorrectAnswer
	CorrectAnswerData isCreateQuestionRequest_CorrectAnswerData `protobuf_oneof:"correct_answer_data"`
	Solution          string                                    `protobuf:"bytes,10,opt,name=solution,proto3" json:"solution,omitempty"` // Lời giải chi tiết
	Tag               []string                                  `protobuf:"bytes,11,rep,name=tag,proto3" json:"tag,omitempty"`           // Tags cho câu hỏi
	// Optional classification fields
	Grade          string                 `protobuf:"bytes,12,opt,name=grade,proto3" json:"grade,omitempty"`                                           // Lớp (0,1,2) - Optional
	Subject        string                 `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`                                       // Môn học (P,L,H) - Optional
	Chapter        string                 `protobuf:"bytes,14,opt,name=chapter,proto3" json:"chapter,omitempty"`                                       // Chương (1-9) - Optional
	Level          string                 `protobuf:"bytes,15,opt,name=level,proto3" json:"level,omitempty"`                                           // Mức độ (N,H,V,C,T,M) - Optional
	QuestionCodeId string                 `protobuf:"bytes,16,opt,name=question_code_id,json=questionCodeId,proto3" json:"question_code_id,omitempty"` // QuestionCode ID
	Status         common.QuestionStatus  `protobuf:"varint,17,opt,name=status,proto3,enum=common.QuestionStatus" json:"status,omitempty"`             // ACTIVE, PENDING, INACTIVE, ARCHIVED
	Difficulty     common.DifficultyLevel `protobuf:"varint,18,opt,name=difficulty,proto3,enum=common.DifficultyLevel" json:"difficulty,omitempty"`    // EASY, MEDIUM, HARD, EXPERT
	Creator        string                 `protobuf:"bytes,19,opt,name=creator,proto3" json:"creator,omitempty"`                                       // Creator username
}

func (x *CreateQuestionRequest) Reset() {
	*x = CreateQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionRequest) ProtoMessage() {}

func (x *CreateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{7}
}

func (x *CreateQuestionRequest) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *CreateQuestionRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateQuestionRequest) GetSubcount() string {
	if x != nil {
		return x.Subcount
	}
	return ""
}

func (x *CreateQuestionRequest) GetType() common.QuestionType {
	if x != nil {
		return x.Type
	}
	return common.QuestionType(0)
}

func (x *CreateQuestionRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (m *CreateQuestionRequest) GetAnswerData() isCreateQuestionRequest_AnswerData {
	if m != nil {
		return m.AnswerData
	}
	return nil
}

func (x *CreateQuestionRequest) GetStructuredAnswers() *AnswerList {
	if x, ok := x.GetAnswerData().(*CreateQuestionRequest_StructuredAnswers); ok {
		return x.StructuredAnswers
	}
	return nil
}

func (x *CreateQuestionRequest) GetJsonAnswers() string {
	if x, ok := x.GetAnswerData().(*CreateQuestionRequest_JsonAnswers); ok {
		return x.JsonAnswers
	}
	return ""
}

func (m *CreateQuestionRequest) GetCorrectAnswerData() isCreateQuestionRequest_CorrectAnswerData {
	if m != nil {
		return m.CorrectAnswerData
	}
	return nil
}

func (x *CreateQuestionRequest) GetStructuredCorrect() *CorrectAnswer {
	if x, ok := x.GetCorrectAnswerData().(*CreateQuestionRequest_StructuredCorrect); ok {
		return x.StructuredCorrect
	}
	return nil
}

func (x *CreateQuestionRequest) GetJsonCorrectAnswer() string {
	if x, ok := x.GetCorrectAnswerData().(*CreateQuestionRequest_JsonCorrectAnswer); ok {
		return x.JsonCorrectAnswer
	}
	return ""
}

func (x *CreateQuestionRequest) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CreateQuestionRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *CreateQuestionRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *CreateQuestionRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CreateQuestionRequest) GetChapter() string {
	if x != nil {
		return x.Chapter
	}
	return ""
}

func (x *CreateQuestionRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *CreateQuestionRequest) GetQuestionCodeId() string {
	if x != nil {
		return x.QuestionCodeId
	}
	return ""
}

func (x *CreateQuestionRequest) GetStatus() common.QuestionStatus {
	if x != nil {
		return x.Status
	}
	return common.QuestionStatus(0)
}

func (x *CreateQuestionRequest) GetDifficulty() common.DifficultyLevel {
	if x != nil {
		return x.Difficulty
	}
	return common.DifficultyLevel(0)
}

func (x *CreateQuestionRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type isCreateQuestionRequest_AnswerData interface {
	isCreateQuestionRequest_AnswerData()
}

type CreateQuestionRequest_StructuredAnswers struct {
	StructuredAnswers *AnswerList `protobuf:"bytes,6,opt,name=structured_answers,json=structuredAnswers,proto3,oneof"` // For MC/TF questions
}

type CreateQuestionRequest_JsonAnswers struct {
	JsonAnswers string `protobuf:"bytes,7,opt,name=json_answers,json=jsonAnswers,proto3,oneof"` // For complex answer formats
}

func (*CreateQuestionRequest_StructuredAnswers) isCreateQuestionRequest_AnswerData() {}

func (*CreateQuestionRequest_JsonAnswers) isCreateQuestionRequest_AnswerData() {}

type isCreateQuestionRequest_CorrectAnswerData interface {
	isCreateQuestionRequest_CorrectAnswerData()
}

type CreateQuestionRequest_StructuredCorrect struct {
	StructuredCorrect *CorrectAnswer `protobuf:"bytes,8,opt,name=structured_correct,json=structuredCorrect,proto3,oneof"` // For MC/TF/SA
}

type CreateQuestionRequest_JsonCorrectAnswer struct {
	JsonCorrectAnswer string `protobuf:"bytes,9,opt,name=json_correct_answer,json=jsonCorrectAnswer,proto3,oneof"` // For complex formats
}

func (*CreateQuestionRequest_StructuredCorrect) isCreateQuestionRequest_CorrectAnswerData() {}

func (*CreateQuestionRequest_JsonCorrectAnswer) isCreateQuestionRequest_CorrectAnswerData() {}

type CreateQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Question *Question        `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
}

func (x *CreateQuestionResponse) Reset() {
	*x = CreateQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionResponse) ProtoMessage() {}

func (x *CreateQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionResponse.ProtoReflect.Descriptor instead.
func (*CreateQuestionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{8}
}

func (x *CreateQuestionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateQuestionResponse) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

type GetQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetQuestionRequest) Reset() {
	*x = GetQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionRequest) ProtoMessage() {}

func (x *GetQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{9}
}

func (x *GetQuestionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Question *Question        `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
}

func (x *GetQuestionResponse) Reset() {
	*x = GetQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionResponse) ProtoMessage() {}

func (x *GetQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{10}
}

func (x *GetQuestionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetQuestionResponse) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

type ListQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *common.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListQuestionsRequest) Reset() {
	*x = ListQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionsRequest) ProtoMessage() {}

func (x *ListQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionsRequest.ProtoReflect.Descriptor instead.
func (*ListQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{11}
}

func (x *ListQuestionsRequest) GetPagination() *common.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *common.Response           `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Questions  []*Question                `protobuf:"bytes,2,rep,name=questions,proto3" json:"questions,omitempty"`
	Pagination *common.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListQuestionsResponse) Reset() {
	*x = ListQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionsResponse) ProtoMessage() {}

func (x *ListQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionsResponse.ProtoReflect.Descriptor instead.
func (*ListQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{12}
}

func (x *ListQuestionsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListQuestionsResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *ListQuestionsResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Update question
type UpdateQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RawContent string              `protobuf:"bytes,2,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"`
	Content    string              `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Subcount   string              `protobuf:"bytes,4,opt,name=subcount,proto3" json:"subcount,omitempty"`
	Type       common.QuestionType `protobuf:"varint,5,opt,name=type,proto3,enum=common.QuestionType" json:"type,omitempty"`
	Source     string              `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	// Types that are assignable to AnswerData:
	//
	//	*UpdateQuestionRequest_StructuredAnswers
	//	*UpdateQuestionRequest_JsonAnswers
	AnswerData isUpdateQuestionRequest_AnswerData `protobuf_oneof:"answer_data"`
	// Types that are assignable to CorrectAnswerData:
	//
	//	*UpdateQuestionRequest_StructuredCorrect
	//	*UpdateQuestionRequest_JsonCorrectAnswer
	CorrectAnswerData isUpdateQuestionRequest_CorrectAnswerData `protobuf_oneof:"correct_answer_data"`
	Solution          string                                    `protobuf:"bytes,11,opt,name=solution,proto3" json:"solution,omitempty"`
	Tag               []string                                  `protobuf:"bytes,12,rep,name=tag,proto3" json:"tag,omitempty"`
	// Optional classification fields
	Grade          string                 `protobuf:"bytes,13,opt,name=grade,proto3" json:"grade,omitempty"`     // Lớp (0,1,2) - Optional
	Subject        string                 `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"` // Môn học (P,L,H) - Optional
	Chapter        string                 `protobuf:"bytes,15,opt,name=chapter,proto3" json:"chapter,omitempty"` // Chương (1-9) - Optional
	Level          string                 `protobuf:"bytes,16,opt,name=level,proto3" json:"level,omitempty"`     // Mức độ (N,H,V,C,T,M) - Optional
	QuestionCodeId string                 `protobuf:"bytes,17,opt,name=question_code_id,json=questionCodeId,proto3" json:"question_code_id,omitempty"`
	Status         common.QuestionStatus  `protobuf:"varint,18,opt,name=status,proto3,enum=common.QuestionStatus" json:"status,omitempty"`
	Difficulty     common.DifficultyLevel `protobuf:"varint,19,opt,name=difficulty,proto3,enum=common.DifficultyLevel" json:"difficulty,omitempty"`
}

func (x *UpdateQuestionRequest) Reset() {
	*x = UpdateQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionRequest) ProtoMessage() {}

func (x *UpdateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateQuestionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateQuestionRequest) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *UpdateQuestionRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateQuestionRequest) GetSubcount() string {
	if x != nil {
		return x.Subcount
	}
	return ""
}

func (x *UpdateQuestionRequest) GetType() common.QuestionType {
	if x != nil {
		return x.Type
	}
	return common.QuestionType(0)
}

func (x *UpdateQuestionRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (m *UpdateQuestionRequest) GetAnswerData() isUpdateQuestionRequest_AnswerData {
	if m != nil {
		return m.AnswerData
	}
	return nil
}

func (x *UpdateQuestionRequest) GetStructuredAnswers() *AnswerList {
	if x, ok := x.GetAnswerData().(*UpdateQuestionRequest_StructuredAnswers); ok {
		return x.StructuredAnswers
	}
	return nil
}

func (x *UpdateQuestionRequest) GetJsonAnswers() string {
	if x, ok := x.GetAnswerData().(*UpdateQuestionRequest_JsonAnswers); ok {
		return x.JsonAnswers
	}
	return ""
}

func (m *UpdateQuestionRequest) GetCorrectAnswerData() isUpdateQuestionRequest_CorrectAnswerData {
	if m != nil {
		return m.CorrectAnswerData
	}
	return nil
}

func (x *UpdateQuestionRequest) GetStructuredCorrect() *CorrectAnswer {
	if x, ok := x.GetCorrectAnswerData().(*UpdateQuestionRequest_StructuredCorrect); ok {
		return x.StructuredCorrect
	}
	return nil
}

func (x *UpdateQuestionRequest) GetJsonCorrectAnswer() string {
	if x, ok := x.GetCorrectAnswerData().(*UpdateQuestionRequest_JsonCorrectAnswer); ok {
		return x.JsonCorrectAnswer
	}
	return ""
}

func (x *UpdateQuestionRequest) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *UpdateQuestionRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *UpdateQuestionRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *UpdateQuestionRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *UpdateQuestionRequest) GetChapter() string {
	if x != nil {
		return x.Chapter
	}
	return ""
}

func (x *UpdateQuestionRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *UpdateQuestionRequest) GetQuestionCodeId() string {
	if x != nil {
		return x.QuestionCodeId
	}
	return ""
}

func (x *UpdateQuestionRequest) GetStatus() common.QuestionStatus {
	if x != nil {
		return x.Status
	}
	return common.QuestionStatus(0)
}

func (x *UpdateQuestionRequest) GetDifficulty() common.DifficultyLevel {
	if x != nil {
		return x.Difficulty
	}
	return common.DifficultyLevel(0)
}

type isUpdateQuestionRequest_AnswerData interface {
	isUpdateQuestionRequest_AnswerData()
}

type UpdateQuestionRequest_StructuredAnswers struct {
	StructuredAnswers *AnswerList `protobuf:"bytes,7,opt,name=structured_answers,json=structuredAnswers,proto3,oneof"`
}

type UpdateQuestionRequest_JsonAnswers struct {
	JsonAnswers string `protobuf:"bytes,8,opt,name=json_answers,json=jsonAnswers,proto3,oneof"`
}

func (*UpdateQuestionRequest_StructuredAnswers) isUpdateQuestionRequest_AnswerData() {}

func (*UpdateQuestionRequest_JsonAnswers) isUpdateQuestionRequest_AnswerData() {}

type isUpdateQuestionRequest_CorrectAnswerData interface {
	isUpdateQuestionRequest_CorrectAnswerData()
}

type UpdateQuestionRequest_StructuredCorrect struct {
	StructuredCorrect *CorrectAnswer `protobuf:"bytes,9,opt,name=structured_correct,json=structuredCorrect,proto3,oneof"`
}

type UpdateQuestionRequest_JsonCorrectAnswer struct {
	JsonCorrectAnswer string `protobuf:"bytes,10,opt,name=json_correct_answer,json=jsonCorrectAnswer,proto3,oneof"`
}

func (*UpdateQuestionRequest_StructuredCorrect) isUpdateQuestionRequest_CorrectAnswerData() {}

func (*UpdateQuestionRequest_JsonCorrectAnswer) isUpdateQuestionRequest_CorrectAnswerData() {}

type UpdateQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Question *Question        `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
}

func (x *UpdateQuestionResponse) Reset() {
	*x = UpdateQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionResponse) ProtoMessage() {}

func (x *UpdateQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionResponse.ProtoReflect.Descriptor instead.
func (*UpdateQuestionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateQuestionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UpdateQuestionResponse) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

// Delete question
type DeleteQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteQuestionRequest) Reset() {
	*x = DeleteQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionRequest) ProtoMessage() {}

func (x *DeleteQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuestionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteQuestionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteQuestionResponse) Reset() {
	*x = DeleteQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionResponse) ProtoMessage() {}

func (x *DeleteQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuestionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteQuestionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// Import questions
type ImportQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CsvDataBase64 string `protobuf:"bytes,1,opt,name=csv_data_base64,json=csvDataBase64,proto3" json:"csv_data_base64,omitempty"`
	UpsertMode    bool   `protobuf:"varint,2,opt,name=upsert_mode,json=upsertMode,proto3" json:"upsert_mode,omitempty"`
}

func (x *ImportQuestionsRequest) Reset() {
	*x = ImportQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportQuestionsRequest) ProtoMessage() {}

func (x *ImportQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportQuestionsRequest.ProtoReflect.Descriptor instead.
func (*ImportQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{17}
}

func (x *ImportQuestionsRequest) GetCsvDataBase64() string {
	if x != nil {
		return x.CsvDataBase64
	}
	return ""
}

func (x *ImportQuestionsRequest) GetUpsertMode() bool {
	if x != nil {
		return x.UpsertMode
	}
	return false
}

// QuestionCode message for LaTeX parsing
type QuestionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   // Full code like "4L5301N"
	Prefix      string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`                           // First part like "4L5"
	MainCode    string `protobuf:"bytes,3,opt,name=main_code,json=mainCode,proto3" json:"main_code,omitempty"`       // Middle part like "301"
	ExtendCode  string `protobuf:"bytes,4,opt,name=extend_code,json=extendCode,proto3" json:"extend_code,omitempty"` // Additional code if any
	NumPart     string `protobuf:"bytes,5,opt,name=num_part,json=numPart,proto3" json:"num_part,omitempty"`          // Number part like "N"
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                 // Human-readable description
}

func (x *QuestionCode) Reset() {
	*x = QuestionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionCode) ProtoMessage() {}

func (x *QuestionCode) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionCode.ProtoReflect.Descriptor instead.
func (*QuestionCode) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{18}
}

func (x *QuestionCode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionCode) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *QuestionCode) GetMainCode() string {
	if x != nil {
		return x.MainCode
	}
	return ""
}

func (x *QuestionCode) GetExtendCode() string {
	if x != nil {
		return x.ExtendCode
	}
	return ""
}

func (x *QuestionCode) GetNumPart() string {
	if x != nil {
		return x.NumPart
	}
	return ""
}

func (x *QuestionCode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Parse LaTeX question
type ParseLatexQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatexContent string `protobuf:"bytes,1,opt,name=latex_content,json=latexContent,proto3" json:"latex_content,omitempty"` // LaTeX content (can be base64 or raw)
	IsBase64     bool   `protobuf:"varint,2,opt,name=is_base64,json=isBase64,proto3" json:"is_base64,omitempty"`            // Whether content is base64 encoded
}

func (x *ParseLatexQuestionRequest) Reset() {
	*x = ParseLatexQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseLatexQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseLatexQuestionRequest) ProtoMessage() {}

func (x *ParseLatexQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseLatexQuestionRequest.ProtoReflect.Descriptor instead.
func (*ParseLatexQuestionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{19}
}

func (x *ParseLatexQuestionRequest) GetLatexContent() string {
	if x != nil {
		return x.LatexContent
	}
	return ""
}

func (x *ParseLatexQuestionRequest) GetIsBase64() bool {
	if x != nil {
		return x.IsBase64
	}
	return false
}

type ParseLatexQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response      *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Questions     []*Question      `protobuf:"bytes,2,rep,name=questions,proto3" json:"questions,omitempty"`                              // Parsed questions (without ID, for preview)
	QuestionCodes []*QuestionCode  `protobuf:"bytes,3,rep,name=question_codes,json=questionCodes,proto3" json:"question_codes,omitempty"` // Extracted question codes
	Warnings      []string         `protobuf:"bytes,4,rep,name=warnings,proto3" json:"warnings,omitempty"`                                // Parsing warnings if any
}

func (x *ParseLatexQuestionResponse) Reset() {
	*x = ParseLatexQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseLatexQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseLatexQuestionResponse) ProtoMessage() {}

func (x *ParseLatexQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseLatexQuestionResponse.ProtoReflect.Descriptor instead.
func (*ParseLatexQuestionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{20}
}

func (x *ParseLatexQuestionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ParseLatexQuestionResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *ParseLatexQuestionResponse) GetQuestionCodes() []*QuestionCode {
	if x != nil {
		return x.QuestionCodes
	}
	return nil
}

func (x *ParseLatexQuestionResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Create question from LaTeX
type CreateQuestionFromLatexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatexContent    string `protobuf:"bytes,1,opt,name=latex_content,json=latexContent,proto3" json:"latex_content,omitempty"`             // LaTeX content (can be base64 or raw)
	IsBase64        bool   `protobuf:"varint,2,opt,name=is_base64,json=isBase64,proto3" json:"is_base64,omitempty"`                        // Whether content is base64 encoded
	AutoCreateCodes bool   `protobuf:"varint,3,opt,name=auto_create_codes,json=autoCreateCodes,proto3" json:"auto_create_codes,omitempty"` // Auto-create QuestionCode if not exists
}

func (x *CreateQuestionFromLatexRequest) Reset() {
	*x = CreateQuestionFromLatexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionFromLatexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionFromLatexRequest) ProtoMessage() {}

func (x *CreateQuestionFromLatexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionFromLatexRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionFromLatexRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{21}
}

func (x *CreateQuestionFromLatexRequest) GetLatexContent() string {
	if x != nil {
		return x.LatexContent
	}
	return ""
}

func (x *CreateQuestionFromLatexRequest) GetIsBase64() bool {
	if x != nil {
		return x.IsBase64
	}
	return false
}

func (x *CreateQuestionFromLatexRequest) GetAutoCreateCodes() bool {
	if x != nil {
		return x.AutoCreateCodes
	}
	return false
}

type CreateQuestionFromLatexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response         *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	CreatedQuestions []*Question      `protobuf:"bytes,2,rep,name=created_questions,json=createdQuestions,proto3" json:"created_questions,omitempty"` // Created questions with IDs
	CreatedCodes     []*QuestionCode  `protobuf:"bytes,3,rep,name=created_codes,json=createdCodes,proto3" json:"created_codes,omitempty"`             // QuestionCodes that were auto-created
	CreatedCount     int32            `protobuf:"varint,4,opt,name=created_count,json=createdCount,proto3" json:"created_count,omitempty"`            // Number of questions created
	FailedCount      int32            `protobuf:"varint,5,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`               // Number of questions that failed
	Warnings         []string         `protobuf:"bytes,6,rep,name=warnings,proto3" json:"warnings,omitempty"`                                         // Warnings if any
}

func (x *CreateQuestionFromLatexResponse) Reset() {
	*x = CreateQuestionFromLatexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionFromLatexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionFromLatexResponse) ProtoMessage() {}

func (x *CreateQuestionFromLatexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionFromLatexResponse.ProtoReflect.Descriptor instead.
func (*CreateQuestionFromLatexResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{22}
}

func (x *CreateQuestionFromLatexResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateQuestionFromLatexResponse) GetCreatedQuestions() []*Question {
	if x != nil {
		return x.CreatedQuestions
	}
	return nil
}

func (x *CreateQuestionFromLatexResponse) GetCreatedCodes() []*QuestionCode {
	if x != nil {
		return x.CreatedCodes
	}
	return nil
}

func (x *CreateQuestionFromLatexResponse) GetCreatedCount() int32 {
	if x != nil {
		return x.CreatedCount
	}
	return 0
}

func (x *CreateQuestionFromLatexResponse) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *CreateQuestionFromLatexResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Import LaTeX file
type ImportLatexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatexContent    string `protobuf:"bytes,1,opt,name=latex_content,json=latexContent,proto3" json:"latex_content,omitempty"`             // LaTeX content (can be base64 or raw)
	IsBase64        bool   `protobuf:"varint,2,opt,name=is_base64,json=isBase64,proto3" json:"is_base64,omitempty"`                        // Whether content is base64 encoded
	UpsertMode      bool   `protobuf:"varint,3,opt,name=upsert_mode,json=upsertMode,proto3" json:"upsert_mode,omitempty"`                  // Update existing questions
	AutoCreateCodes bool   `protobuf:"varint,4,opt,name=auto_create_codes,json=autoCreateCodes,proto3" json:"auto_create_codes,omitempty"` // Auto-create missing QuestionCodes
}

func (x *ImportLatexRequest) Reset() {
	*x = ImportLatexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportLatexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportLatexRequest) ProtoMessage() {}

func (x *ImportLatexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportLatexRequest.ProtoReflect.Descriptor instead.
func (*ImportLatexRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{23}
}

func (x *ImportLatexRequest) GetLatexContent() string {
	if x != nil {
		return x.LatexContent
	}
	return ""
}

func (x *ImportLatexRequest) GetIsBase64() bool {
	if x != nil {
		return x.IsBase64
	}
	return false
}

func (x *ImportLatexRequest) GetUpsertMode() bool {
	if x != nil {
		return x.UpsertMode
	}
	return false
}

func (x *ImportLatexRequest) GetAutoCreateCodes() bool {
	if x != nil {
		return x.AutoCreateCodes
	}
	return false
}

type ImportLatexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response             *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	TotalProcessed       int32            `protobuf:"varint,2,opt,name=total_processed,json=totalProcessed,proto3" json:"total_processed,omitempty"`
	CreatedCount         int32            `protobuf:"varint,3,opt,name=created_count,json=createdCount,proto3" json:"created_count,omitempty"`
	UpdatedCount         int32            `protobuf:"varint,4,opt,name=updated_count,json=updatedCount,proto3" json:"updated_count,omitempty"`
	SkippedCount         int32            `protobuf:"varint,5,opt,name=skipped_count,json=skippedCount,proto3" json:"skipped_count,omitempty"` // MA questions or errors
	Errors               []*ImportError   `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	QuestionCodesCreated []string         `protobuf:"bytes,7,rep,name=question_codes_created,json=questionCodesCreated,proto3" json:"question_codes_created,omitempty"` // New QuestionCodes created
	Summary              string           `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ImportLatexResponse) Reset() {
	*x = ImportLatexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportLatexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportLatexResponse) ProtoMessage() {}

func (x *ImportLatexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportLatexResponse.ProtoReflect.Descriptor instead.
func (*ImportLatexResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{24}
}

func (x *ImportLatexResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ImportLatexResponse) GetTotalProcessed() int32 {
	if x != nil {
		return x.TotalProcessed
	}
	return 0
}

func (x *ImportLatexResponse) GetCreatedCount() int32 {
	if x != nil {
		return x.CreatedCount
	}
	return 0
}

func (x *ImportLatexResponse) GetUpdatedCount() int32 {
	if x != nil {
		return x.UpdatedCount
	}
	return 0
}

func (x *ImportLatexResponse) GetSkippedCount() int32 {
	if x != nil {
		return x.SkippedCount
	}
	return 0
}

func (x *ImportLatexResponse) GetErrors() []*ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportLatexResponse) GetQuestionCodesCreated() []string {
	if x != nil {
		return x.QuestionCodesCreated
	}
	return nil
}

func (x *ImportLatexResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type ImportError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowNumber    int32  `protobuf:"varint,1,opt,name=row_number,json=rowNumber,proto3" json:"row_number,omitempty"`
	FieldName    string `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	RowData      string `protobuf:"bytes,4,opt,name=row_data,json=rowData,proto3" json:"row_data,omitempty"`
}

func (x *ImportError) Reset() {
	*x = ImportError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportError) ProtoMessage() {}

func (x *ImportError) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportError.ProtoReflect.Descriptor instead.
func (*ImportError) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{25}
}

func (x *ImportError) GetRowNumber() int32 {
	if x != nil {
		return x.RowNumber
	}
	return 0
}

func (x *ImportError) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *ImportError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ImportError) GetRowData() string {
	if x != nil {
		return x.RowData
	}
	return ""
}

type ImportQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response       *common.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	TotalProcessed int32            `protobuf:"varint,2,opt,name=total_processed,json=totalProcessed,proto3" json:"total_processed,omitempty"`
	CreatedCount   int32            `protobuf:"varint,3,opt,name=created_count,json=createdCount,proto3" json:"created_count,omitempty"`
	UpdatedCount   int32            `protobuf:"varint,4,opt,name=updated_count,json=updatedCount,proto3" json:"updated_count,omitempty"`
	ErrorCount     int32            `protobuf:"varint,5,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	Errors         []*ImportError   `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	Summary        string           `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ImportQuestionsResponse) Reset() {
	*x = ImportQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportQuestionsResponse) ProtoMessage() {}

func (x *ImportQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportQuestionsResponse.ProtoReflect.Descriptor instead.
func (*ImportQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{26}
}

func (x *ImportQuestionsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ImportQuestionsResponse) GetTotalProcessed() int32 {
	if x != nil {
		return x.TotalProcessed
	}
	return 0
}

func (x *ImportQuestionsResponse) GetCreatedCount() int32 {
	if x != nil {
		return x.CreatedCount
	}
	return 0
}

func (x *ImportQuestionsResponse) GetUpdatedCount() int32 {
	if x != nil {
		return x.UpdatedCount
	}
	return 0
}

func (x *ImportQuestionsResponse) GetErrorCount() int32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *ImportQuestionsResponse) GetErrors() []*ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportQuestionsResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type VersionHistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId         string                 `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	VersionNumber     int32                  `protobuf:"varint,2,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	ChangedByUserId   string                 `protobuf:"bytes,3,opt,name=changed_by_user_id,json=changedByUserId,proto3" json:"changed_by_user_id,omitempty"`
	ChangedByUserName string                 `protobuf:"bytes,4,opt,name=changed_by_user_name,json=changedByUserName,proto3" json:"changed_by_user_name,omitempty"`
	ChangeReason      string                 `protobuf:"bytes,5,opt,name=change_reason,json=changeReason,proto3" json:"change_reason,omitempty"`
	ChangedAt         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=changed_at,json=changedAt,proto3" json:"changed_at,omitempty"`
	SummaryOfChanges  string                 `protobuf:"bytes,7,opt,name=summary_of_changes,json=summaryOfChanges,proto3" json:"summary_of_changes,omitempty"`
}

func (x *VersionHistoryItem) Reset() {
	*x = VersionHistoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionHistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionHistoryItem) ProtoMessage() {}

func (x *VersionHistoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionHistoryItem.ProtoReflect.Descriptor instead.
func (*VersionHistoryItem) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{27}
}

func (x *VersionHistoryItem) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *VersionHistoryItem) GetVersionNumber() int32 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

func (x *VersionHistoryItem) GetChangedByUserId() string {
	if x != nil {
		return x.ChangedByUserId
	}
	return ""
}

func (x *VersionHistoryItem) GetChangedByUserName() string {
	if x != nil {
		return x.ChangedByUserName
	}
	return ""
}

func (x *VersionHistoryItem) GetChangeReason() string {
	if x != nil {
		return x.ChangeReason
	}
	return ""
}

func (x *VersionHistoryItem) GetChangedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedAt
	}
	return nil
}

func (x *VersionHistoryItem) GetSummaryOfChanges() string {
	if x != nil {
		return x.SummaryOfChanges
	}
	return ""
}

type GetVersionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId string                    `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Pagination *common.PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetVersionHistoryRequest) Reset() {
	*x = GetVersionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionHistoryRequest) ProtoMessage() {}

func (x *GetVersionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetVersionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{28}
}

func (x *GetVersionHistoryRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *GetVersionHistoryRequest) GetPagination() *common.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetVersionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions   []*VersionHistoryItem      `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	Pagination *common.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Response   *common.Response           `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetVersionHistoryResponse) Reset() {
	*x = GetVersionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionHistoryResponse) ProtoMessage() {}

func (x *GetVersionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetVersionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{29}
}

func (x *GetVersionHistoryResponse) GetVersions() []*VersionHistoryItem {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *GetVersionHistoryResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetVersionHistoryResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId    string `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	VersionNumber int32  `protobuf:"varint,2,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{30}
}

func (x *GetVersionRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *GetVersionRequest) GetVersionNumber() int32 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionVersion *Question        `protobuf:"bytes,1,opt,name=question_version,json=questionVersion,proto3" json:"question_version,omitempty"`
	Response        *common.Response `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{31}
}

func (x *GetVersionResponse) GetQuestionVersion() *Question {
	if x != nil {
		return x.QuestionVersion
	}
	return nil
}

func (x *GetVersionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type VersionDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName  string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	OldValue   string `protobuf:"bytes,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue   string `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	ChangeType string `protobuf:"bytes,4,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"` // ADDED, MODIFIED, DELETED
}

func (x *VersionDiff) Reset() {
	*x = VersionDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionDiff) ProtoMessage() {}

func (x *VersionDiff) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionDiff.ProtoReflect.Descriptor instead.
func (*VersionDiff) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{32}
}

func (x *VersionDiff) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *VersionDiff) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *VersionDiff) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *VersionDiff) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

type CompareVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId      string `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	VersionNumber_1 int32  `protobuf:"varint,2,opt,name=version_number_1,json=versionNumber1,proto3" json:"version_number_1,omitempty"`
	VersionNumber_2 int32  `protobuf:"varint,3,opt,name=version_number_2,json=versionNumber2,proto3" json:"version_number_2,omitempty"`
}

func (x *CompareVersionsRequest) Reset() {
	*x = CompareVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareVersionsRequest) ProtoMessage() {}

func (x *CompareVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareVersionsRequest.ProtoReflect.Descriptor instead.
func (*CompareVersionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{33}
}

func (x *CompareVersionsRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *CompareVersionsRequest) GetVersionNumber_1() int32 {
	if x != nil {
		return x.VersionNumber_1
	}
	return 0
}

func (x *CompareVersionsRequest) GetVersionNumber_2() int32 {
	if x != nil {
		return x.VersionNumber_2
	}
	return 0
}

type CompareVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diffs    []*VersionDiff   `protobuf:"bytes,1,rep,name=diffs,proto3" json:"diffs,omitempty"`
	Response *common.Response `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CompareVersionsResponse) Reset() {
	*x = CompareVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareVersionsResponse) ProtoMessage() {}

func (x *CompareVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareVersionsResponse.ProtoReflect.Descriptor instead.
func (*CompareVersionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{34}
}

func (x *CompareVersionsResponse) GetDiffs() []*VersionDiff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

func (x *CompareVersionsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type RevertToVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId    string `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	VersionNumber int32  `protobuf:"varint,2,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	RevertReason  string `protobuf:"bytes,3,opt,name=revert_reason,json=revertReason,proto3" json:"revert_reason,omitempty"`
	UserId        string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RevertToVersionRequest) Reset() {
	*x = RevertToVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertToVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertToVersionRequest) ProtoMessage() {}

func (x *RevertToVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertToVersionRequest.ProtoReflect.Descriptor instead.
func (*RevertToVersionRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{35}
}

func (x *RevertToVersionRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *RevertToVersionRequest) GetVersionNumber() int32 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

func (x *RevertToVersionRequest) GetRevertReason() string {
	if x != nil {
		return x.RevertReason
	}
	return ""
}

func (x *RevertToVersionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RevertToVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message  string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Response *common.Response `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *RevertToVersionResponse) Reset() {
	*x = RevertToVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertToVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertToVersionResponse) ProtoMessage() {}

func (x *RevertToVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertToVersionResponse.ProtoReflect.Descriptor instead.
func (*RevertToVersionResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{36}
}

func (x *RevertToVersionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RevertToVersionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RevertToVersionResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type BulkUpdateQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionIds []string `protobuf:"bytes,1,rep,name=question_ids,json=questionIds,proto3" json:"question_ids,omitempty"`
	Status      string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`         // "NO_CHANGE" or actual status value
	Difficulty  string   `protobuf:"bytes,3,opt,name=difficulty,proto3" json:"difficulty,omitempty"` // "NO_CHANGE" or actual difficulty value
}

func (x *BulkUpdateQuestionsRequest) Reset() {
	*x = BulkUpdateQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateQuestionsRequest) ProtoMessage() {}

func (x *BulkUpdateQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateQuestionsRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{37}
}

func (x *BulkUpdateQuestionsRequest) GetQuestionIds() []string {
	if x != nil {
		return x.QuestionIds
	}
	return nil
}

func (x *BulkUpdateQuestionsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BulkUpdateQuestionsRequest) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

type BulkUpdateQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessCount int32            `protobuf:"varint,1,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	FailedCount  int32            `protobuf:"varint,2,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	FailedIds    []string         `protobuf:"bytes,3,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"`
	Response     *common.Response `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *BulkUpdateQuestionsResponse) Reset() {
	*x = BulkUpdateQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateQuestionsResponse) ProtoMessage() {}

func (x *BulkUpdateQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateQuestionsResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{38}
}

func (x *BulkUpdateQuestionsResponse) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *BulkUpdateQuestionsResponse) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *BulkUpdateQuestionsResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

func (x *BulkUpdateQuestionsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type BulkDeleteQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionIds []string `protobuf:"bytes,1,rep,name=question_ids,json=questionIds,proto3" json:"question_ids,omitempty"`
}

func (x *BulkDeleteQuestionsRequest) Reset() {
	*x = BulkDeleteQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteQuestionsRequest) ProtoMessage() {}

func (x *BulkDeleteQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteQuestionsRequest.ProtoReflect.Descriptor instead.
func (*BulkDeleteQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{39}
}

func (x *BulkDeleteQuestionsRequest) GetQuestionIds() []string {
	if x != nil {
		return x.QuestionIds
	}
	return nil
}

type BulkDeleteQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessCount int32            `protobuf:"varint,1,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	FailedCount  int32            `protobuf:"varint,2,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	FailedIds    []string         `protobuf:"bytes,3,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"`
	Response     *common.Response `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *BulkDeleteQuestionsResponse) Reset() {
	*x = BulkDeleteQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteQuestionsResponse) ProtoMessage() {}

func (x *BulkDeleteQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteQuestionsResponse.ProtoReflect.Descriptor instead.
func (*BulkDeleteQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{40}
}

func (x *BulkDeleteQuestionsResponse) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *BulkDeleteQuestionsResponse) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *BulkDeleteQuestionsResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

func (x *BulkDeleteQuestionsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ToggleFavoriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId string `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	IsFavorite bool   `protobuf:"varint,2,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"` // true to mark as favorite, false to unmark
}

func (x *ToggleFavoriteRequest) Reset() {
	*x = ToggleFavoriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleFavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleFavoriteRequest) ProtoMessage() {}

func (x *ToggleFavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleFavoriteRequest.ProtoReflect.Descriptor instead.
func (*ToggleFavoriteRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{41}
}

func (x *ToggleFavoriteRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *ToggleFavoriteRequest) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type ToggleFavoriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	IsFavorite bool             `protobuf:"varint,2,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"` // Current favorite status
	Response   *common.Response `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ToggleFavoriteResponse) Reset() {
	*x = ToggleFavoriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleFavoriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleFavoriteResponse) ProtoMessage() {}

func (x *ToggleFavoriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleFavoriteResponse.ProtoReflect.Descriptor instead.
func (*ToggleFavoriteResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{42}
}

func (x *ToggleFavoriteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ToggleFavoriteResponse) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *ToggleFavoriteResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ListFavoriteQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *common.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListFavoriteQuestionsRequest) Reset() {
	*x = ListFavoriteQuestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFavoriteQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFavoriteQuestionsRequest) ProtoMessage() {}

func (x *ListFavoriteQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFavoriteQuestionsRequest.ProtoReflect.Descriptor instead.
func (*ListFavoriteQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{43}
}

func (x *ListFavoriteQuestionsRequest) GetPagination() *common.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListFavoriteQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *common.Response           `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Questions  []*Question                `protobuf:"bytes,2,rep,name=questions,proto3" json:"questions,omitempty"`
	Pagination *common.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListFavoriteQuestionsResponse) Reset() {
	*x = ListFavoriteQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_question_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFavoriteQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFavoriteQuestionsResponse) ProtoMessage() {}

func (x *ListFavoriteQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_question_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFavoriteQuestionsResponse.ProtoReflect.Descriptor instead.
func (*ListFavoriteQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_question_proto_rawDescGZIP(), []int{44}
}

func (x *ListFavoriteQuestionsResponse) GetResponse() *common.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListFavoriteQuestionsResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *ListFavoriteQuestionsResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_v1_question_proto protoreflect.FileDescriptor

var file_v1_question_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a,
	0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xc4, 0x07, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x42,
	0x0a, 0x12, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x01, 0x52,
	0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x15, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x0a, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0xa3, 0x01,
	0x0a, 0x0d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x0c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x30, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0x20, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xed, 0x05, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a,
	0x12, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x01, 0x52, 0x11,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x15, 0x0a,
	0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe3,
	0x05, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3f, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x01, 0x52, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x6a, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x42, 0x0d,
	0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x15, 0x0a,
	0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x46, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x73, 0x76, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x73, 0x76, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d,
	0x0a, 0x19, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x74, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0xcb, 0x01,
	0x0a, 0x1a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa5, 0x02, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x74, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x13, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x9e, 0x02, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0xc6, 0x02, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x4f, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x31, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x32, 0x22, 0x6e, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x52, 0x05, 0x64, 0x69,
	0x66, 0x66, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x7b, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x77, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x42, 0x75, 0x6c,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12,
	0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a,
	0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xb2,
	0x01, 0x0a, 0x1b, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x16, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x59, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x01,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xb5, 0x0a, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4c,
	0x61, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x12, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x61,
	0x74, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x12, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x13, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_question_proto_rawDescOnce sync.Once
	file_v1_question_proto_rawDescData = file_v1_question_proto_rawDesc
)

func file_v1_question_proto_rawDescGZIP() []byte {
	file_v1_question_proto_rawDescOnce.Do(func() {
		file_v1_question_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_question_proto_rawDescData)
	})
	return file_v1_question_proto_rawDescData
}

var file_v1_question_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_v1_question_proto_goTypes = []interface{}{
	(*Answer)(nil),                          // 0: v1.Answer
	(*Question)(nil),                        // 1: v1.Question
	(*AnswerList)(nil),                      // 2: v1.AnswerList
	(*CorrectAnswer)(nil),                   // 3: v1.CorrectAnswer
	(*SingleAnswer)(nil),                    // 4: v1.SingleAnswer
	(*MultipleAnswers)(nil),                 // 5: v1.MultipleAnswers
	(*TextAnswer)(nil),                      // 6: v1.TextAnswer
	(*CreateQuestionRequest)(nil),           // 7: v1.CreateQuestionRequest
	(*CreateQuestionResponse)(nil),          // 8: v1.CreateQuestionResponse
	(*GetQuestionRequest)(nil),              // 9: v1.GetQuestionRequest
	(*GetQuestionResponse)(nil),             // 10: v1.GetQuestionResponse
	(*ListQuestionsRequest)(nil),            // 11: v1.ListQuestionsRequest
	(*ListQuestionsResponse)(nil),           // 12: v1.ListQuestionsResponse
	(*UpdateQuestionRequest)(nil),           // 13: v1.UpdateQuestionRequest
	(*UpdateQuestionResponse)(nil),          // 14: v1.UpdateQuestionResponse
	(*DeleteQuestionRequest)(nil),           // 15: v1.DeleteQuestionRequest
	(*DeleteQuestionResponse)(nil),          // 16: v1.DeleteQuestionResponse
	(*ImportQuestionsRequest)(nil),          // 17: v1.ImportQuestionsRequest
	(*QuestionCode)(nil),                    // 18: v1.QuestionCode
	(*ParseLatexQuestionRequest)(nil),       // 19: v1.ParseLatexQuestionRequest
	(*ParseLatexQuestionResponse)(nil),      // 20: v1.ParseLatexQuestionResponse
	(*CreateQuestionFromLatexRequest)(nil),  // 21: v1.CreateQuestionFromLatexRequest
	(*CreateQuestionFromLatexResponse)(nil), // 22: v1.CreateQuestionFromLatexResponse
	(*ImportLatexRequest)(nil),              // 23: v1.ImportLatexRequest
	(*ImportLatexResponse)(nil),             // 24: v1.ImportLatexResponse
	(*ImportError)(nil),                     // 25: v1.ImportError
	(*ImportQuestionsResponse)(nil),         // 26: v1.ImportQuestionsResponse
	(*VersionHistoryItem)(nil),              // 27: v1.VersionHistoryItem
	(*GetVersionHistoryRequest)(nil),        // 28: v1.GetVersionHistoryRequest
	(*GetVersionHistoryResponse)(nil),       // 29: v1.GetVersionHistoryResponse
	(*GetVersionRequest)(nil),               // 30: v1.GetVersionRequest
	(*GetVersionResponse)(nil),              // 31: v1.GetVersionResponse
	(*VersionDiff)(nil),                     // 32: v1.VersionDiff
	(*CompareVersionsRequest)(nil),          // 33: v1.CompareVersionsRequest
	(*CompareVersionsResponse)(nil),         // 34: v1.CompareVersionsResponse
	(*RevertToVersionRequest)(nil),          // 35: v1.RevertToVersionRequest
	(*RevertToVersionResponse)(nil),         // 36: v1.RevertToVersionResponse
	(*BulkUpdateQuestionsRequest)(nil),      // 37: v1.BulkUpdateQuestionsRequest
	(*BulkUpdateQuestionsResponse)(nil),     // 38: v1.BulkUpdateQuestionsResponse
	(*BulkDeleteQuestionsRequest)(nil),      // 39: v1.BulkDeleteQuestionsRequest
	(*BulkDeleteQuestionsResponse)(nil),     // 40: v1.BulkDeleteQuestionsResponse
	(*ToggleFavoriteRequest)(nil),           // 41: v1.ToggleFavoriteRequest
	(*ToggleFavoriteResponse)(nil),          // 42: v1.ToggleFavoriteResponse
	(*ListFavoriteQuestionsRequest)(nil),    // 43: v1.ListFavoriteQuestionsRequest
	(*ListFavoriteQuestionsResponse)(nil),   // 44: v1.ListFavoriteQuestionsResponse
	(common.QuestionType)(0),                // 45: common.QuestionType
	(common.QuestionStatus)(0),              // 46: common.QuestionStatus
	(common.DifficultyLevel)(0),             // 47: common.DifficultyLevel
	(*timestamppb.Timestamp)(nil),           // 48: google.protobuf.Timestamp
	(*common.Response)(nil),                 // 49: common.Response
	(*common.PaginationRequest)(nil),        // 50: common.PaginationRequest
	(*common.PaginationResponse)(nil),       // 51: common.PaginationResponse
}
var file_v1_question_proto_depIdxs = []int32{
	45, // 0: v1.Question.type:type_name -> common.QuestionType
	2,  // 1: v1.Question.structured_answers:type_name -> v1.AnswerList
	3,  // 2: v1.Question.structured_correct:type_name -> v1.CorrectAnswer
	46, // 3: v1.Question.status:type_name -> common.QuestionStatus
	47, // 4: v1.Question.difficulty:type_name -> common.DifficultyLevel
	48, // 5: v1.Question.created_at:type_name -> google.protobuf.Timestamp
	48, // 6: v1.Question.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 7: v1.AnswerList.answers:type_name -> v1.Answer
	4,  // 8: v1.CorrectAnswer.single:type_name -> v1.SingleAnswer
	5,  // 9: v1.CorrectAnswer.multiple:type_name -> v1.MultipleAnswers
	6,  // 10: v1.CorrectAnswer.text:type_name -> v1.TextAnswer
	45, // 11: v1.CreateQuestionRequest.type:type_name -> common.QuestionType
	2,  // 12: v1.CreateQuestionRequest.structured_answers:type_name -> v1.AnswerList
	3,  // 13: v1.CreateQuestionRequest.structured_correct:type_name -> v1.CorrectAnswer
	46, // 14: v1.CreateQuestionRequest.status:type_name -> common.QuestionStatus
	47, // 15: v1.CreateQuestionRequest.difficulty:type_name -> common.DifficultyLevel
	49, // 16: v1.CreateQuestionResponse.response:type_name -> common.Response
	1,  // 17: v1.CreateQuestionResponse.question:type_name -> v1.Question
	49, // 18: v1.GetQuestionResponse.response:type_name -> common.Response
	1,  // 19: v1.GetQuestionResponse.question:type_name -> v1.Question
	50, // 20: v1.ListQuestionsRequest.pagination:type_name -> common.PaginationRequest
	49, // 21: v1.ListQuestionsResponse.response:type_name -> common.Response
	1,  // 22: v1.ListQuestionsResponse.questions:type_name -> v1.Question
	51, // 23: v1.ListQuestionsResponse.pagination:type_name -> common.PaginationResponse
	45, // 24: v1.UpdateQuestionRequest.type:type_name -> common.QuestionType
	2,  // 25: v1.UpdateQuestionRequest.structured_answers:type_name -> v1.AnswerList
	3,  // 26: v1.UpdateQuestionRequest.structured_correct:type_name -> v1.CorrectAnswer
	46, // 27: v1.UpdateQuestionRequest.status:type_name -> common.QuestionStatus
	47, // 28: v1.UpdateQuestionRequest.difficulty:type_name -> common.DifficultyLevel
	49, // 29: v1.UpdateQuestionResponse.response:type_name -> common.Response
	1,  // 30: v1.UpdateQuestionResponse.question:type_name -> v1.Question
	49, // 31: v1.DeleteQuestionResponse.response:type_name -> common.Response
	49, // 32: v1.ParseLatexQuestionResponse.response:type_name -> common.Response
	1,  // 33: v1.ParseLatexQuestionResponse.questions:type_name -> v1.Question
	18, // 34: v1.ParseLatexQuestionResponse.question_codes:type_name -> v1.QuestionCode
	49, // 35: v1.CreateQuestionFromLatexResponse.response:type_name -> common.Response
	1,  // 36: v1.CreateQuestionFromLatexResponse.created_questions:type_name -> v1.Question
	18, // 37: v1.CreateQuestionFromLatexResponse.created_codes:type_name -> v1.QuestionCode
	49, // 38: v1.ImportLatexResponse.response:type_name -> common.Response
	25, // 39: v1.ImportLatexResponse.errors:type_name -> v1.ImportError
	49, // 40: v1.ImportQuestionsResponse.response:type_name -> common.Response
	25, // 41: v1.ImportQuestionsResponse.errors:type_name -> v1.ImportError
	48, // 42: v1.VersionHistoryItem.changed_at:type_name -> google.protobuf.Timestamp
	50, // 43: v1.GetVersionHistoryRequest.pagination:type_name -> common.PaginationRequest
	27, // 44: v1.GetVersionHistoryResponse.versions:type_name -> v1.VersionHistoryItem
	51, // 45: v1.GetVersionHistoryResponse.pagination:type_name -> common.PaginationResponse
	49, // 46: v1.GetVersionHistoryResponse.response:type_name -> common.Response
	1,  // 47: v1.GetVersionResponse.question_version:type_name -> v1.Question
	49, // 48: v1.GetVersionResponse.response:type_name -> common.Response
	32, // 49: v1.CompareVersionsResponse.diffs:type_name -> v1.VersionDiff
	49, // 50: v1.CompareVersionsResponse.response:type_name -> common.Response
	49, // 51: v1.RevertToVersionResponse.response:type_name -> common.Response
	49, // 52: v1.BulkUpdateQuestionsResponse.response:type_name -> common.Response
	49, // 53: v1.BulkDeleteQuestionsResponse.response:type_name -> common.Response
	49, // 54: v1.ToggleFavoriteResponse.response:type_name -> common.Response
	50, // 55: v1.ListFavoriteQuestionsRequest.pagination:type_name -> common.PaginationRequest
	49, // 56: v1.ListFavoriteQuestionsResponse.response:type_name -> common.Response
	1,  // 57: v1.ListFavoriteQuestionsResponse.questions:type_name -> v1.Question
	51, // 58: v1.ListFavoriteQuestionsResponse.pagination:type_name -> common.PaginationResponse
	7,  // 59: v1.QuestionService.CreateQuestion:input_type -> v1.CreateQuestionRequest
	9,  // 60: v1.QuestionService.GetQuestion:input_type -> v1.GetQuestionRequest
	13, // 61: v1.QuestionService.UpdateQuestion:input_type -> v1.UpdateQuestionRequest
	15, // 62: v1.QuestionService.DeleteQuestion:input_type -> v1.DeleteQuestionRequest
	11, // 63: v1.QuestionService.ListQuestions:input_type -> v1.ListQuestionsRequest
	17, // 64: v1.QuestionService.ImportQuestions:input_type -> v1.ImportQuestionsRequest
	19, // 65: v1.QuestionService.ParseLatexQuestion:input_type -> v1.ParseLatexQuestionRequest
	21, // 66: v1.QuestionService.CreateQuestionFromLatex:input_type -> v1.CreateQuestionFromLatexRequest
	23, // 67: v1.QuestionService.ImportLatex:input_type -> v1.ImportLatexRequest
	28, // 68: v1.QuestionService.GetVersionHistory:input_type -> v1.GetVersionHistoryRequest
	30, // 69: v1.QuestionService.GetVersion:input_type -> v1.GetVersionRequest
	33, // 70: v1.QuestionService.CompareVersions:input_type -> v1.CompareVersionsRequest
	35, // 71: v1.QuestionService.RevertToVersion:input_type -> v1.RevertToVersionRequest
	37, // 72: v1.QuestionService.BulkUpdateQuestions:input_type -> v1.BulkUpdateQuestionsRequest
	39, // 73: v1.QuestionService.BulkDeleteQuestions:input_type -> v1.BulkDeleteQuestionsRequest
	41, // 74: v1.QuestionService.ToggleFavorite:input_type -> v1.ToggleFavoriteRequest
	43, // 75: v1.QuestionService.ListFavoriteQuestions:input_type -> v1.ListFavoriteQuestionsRequest
	8,  // 76: v1.QuestionService.CreateQuestion:output_type -> v1.CreateQuestionResponse
	10, // 77: v1.QuestionService.GetQuestion:output_type -> v1.GetQuestionResponse
	14, // 78: v1.QuestionService.UpdateQuestion:output_type -> v1.UpdateQuestionResponse
	16, // 79: v1.QuestionService.DeleteQuestion:output_type -> v1.DeleteQuestionResponse
	12, // 80: v1.QuestionService.ListQuestions:output_type -> v1.ListQuestionsResponse
	26, // 81: v1.QuestionService.ImportQuestions:output_type -> v1.ImportQuestionsResponse
	20, // 82: v1.QuestionService.ParseLatexQuestion:output_type -> v1.ParseLatexQuestionResponse
	22, // 83: v1.QuestionService.CreateQuestionFromLatex:output_type -> v1.CreateQuestionFromLatexResponse
	24, // 84: v1.QuestionService.ImportLatex:output_type -> v1.ImportLatexResponse
	29, // 85: v1.QuestionService.GetVersionHistory:output_type -> v1.GetVersionHistoryResponse
	31, // 86: v1.QuestionService.GetVersion:output_type -> v1.GetVersionResponse
	34, // 87: v1.QuestionService.CompareVersions:output_type -> v1.CompareVersionsResponse
	36, // 88: v1.QuestionService.RevertToVersion:output_type -> v1.RevertToVersionResponse
	38, // 89: v1.QuestionService.BulkUpdateQuestions:output_type -> v1.BulkUpdateQuestionsResponse
	40, // 90: v1.QuestionService.BulkDeleteQuestions:output_type -> v1.BulkDeleteQuestionsResponse
	42, // 91: v1.QuestionService.ToggleFavorite:output_type -> v1.ToggleFavoriteResponse
	44, // 92: v1.QuestionService.ListFavoriteQuestions:output_type -> v1.ListFavoriteQuestionsResponse
	76, // [76:93] is the sub-list for method output_type
	59, // [59:76] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_v1_question_proto_init() }
func file_v1_question_proto_init() {
	if File_v1_question_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_question_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleAnswers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseLatexQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseLatexQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuestionFromLatexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuestionFromLatexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportLatexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportLatexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionHistoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertToVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevertToVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleFavoriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleFavoriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFavoriteQuestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_question_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFavoriteQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_question_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Question_StructuredAnswers)(nil),
		(*Question_JsonAnswers)(nil),
		(*Question_StructuredCorrect)(nil),
		(*Question_JsonCorrectAnswer)(nil),
	}
	file_v1_question_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CorrectAnswer_Single)(nil),
		(*CorrectAnswer_Multiple)(nil),
		(*CorrectAnswer_Text)(nil),
	}
	file_v1_question_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*CreateQuestionRequest_StructuredAnswers)(nil),
		(*CreateQuestionRequest_JsonAnswers)(nil),
		(*CreateQuestionRequest_StructuredCorrect)(nil),
		(*CreateQuestionRequest_JsonCorrectAnswer)(nil),
	}
	file_v1_question_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*UpdateQuestionRequest_StructuredAnswers)(nil),
		(*UpdateQuestionRequest_JsonAnswers)(nil),
		(*UpdateQuestionRequest_StructuredCorrect)(nil),
		(*UpdateQuestionRequest_JsonCorrectAnswer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_question_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_question_proto_goTypes,
		DependencyIndexes: file_v1_question_proto_depIdxs,
		MessageInfos:      file_v1_question_proto_msgTypes,
	}.Build()
	File_v1_question_proto = out.File
	file_v1_question_proto_rawDesc = nil
	file_v1_question_proto_goTypes = nil
	file_v1_question_proto_depIdxs = nil
}
