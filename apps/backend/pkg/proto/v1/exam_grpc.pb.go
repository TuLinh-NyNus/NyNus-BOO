// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/exam.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExamService_CreateExam_FullMethodName             = "/v1.ExamService/CreateExam"
	ExamService_UpdateExam_FullMethodName             = "/v1.ExamService/UpdateExam"
	ExamService_DeleteExam_FullMethodName             = "/v1.ExamService/DeleteExam"
	ExamService_GetExam_FullMethodName                = "/v1.ExamService/GetExam"
	ExamService_ListExams_FullMethodName              = "/v1.ExamService/ListExams"
	ExamService_PublishExam_FullMethodName            = "/v1.ExamService/PublishExam"
	ExamService_ArchiveExam_FullMethodName            = "/v1.ExamService/ArchiveExam"
	ExamService_AddQuestionToExam_FullMethodName      = "/v1.ExamService/AddQuestionToExam"
	ExamService_RemoveQuestionFromExam_FullMethodName = "/v1.ExamService/RemoveQuestionFromExam"
	ExamService_ReorderExamQuestions_FullMethodName   = "/v1.ExamService/ReorderExamQuestions"
	ExamService_GetExamQuestions_FullMethodName       = "/v1.ExamService/GetExamQuestions"
	ExamService_StartExam_FullMethodName              = "/v1.ExamService/StartExam"
	ExamService_SubmitAnswer_FullMethodName           = "/v1.ExamService/SubmitAnswer"
	ExamService_SubmitExam_FullMethodName             = "/v1.ExamService/SubmitExam"
	ExamService_GetExamAttempt_FullMethodName         = "/v1.ExamService/GetExamAttempt"
	ExamService_GetExamResults_FullMethodName         = "/v1.ExamService/GetExamResults"
	ExamService_GetExamStatistics_FullMethodName      = "/v1.ExamService/GetExamStatistics"
	ExamService_GetUserPerformance_FullMethodName     = "/v1.ExamService/GetUserPerformance"
)

// ExamServiceClient is the client API for ExamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Exam service
type ExamServiceClient interface {
	// Exam management
	CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*CreateExamResponse, error)
	UpdateExam(ctx context.Context, in *UpdateExamRequest, opts ...grpc.CallOption) (*UpdateExamResponse, error)
	DeleteExam(ctx context.Context, in *DeleteExamRequest, opts ...grpc.CallOption) (*DeleteExamResponse, error)
	GetExam(ctx context.Context, in *GetExamRequest, opts ...grpc.CallOption) (*GetExamResponse, error)
	ListExams(ctx context.Context, in *ListExamsRequest, opts ...grpc.CallOption) (*ListExamsResponse, error)
	PublishExam(ctx context.Context, in *PublishExamRequest, opts ...grpc.CallOption) (*PublishExamResponse, error)
	ArchiveExam(ctx context.Context, in *ArchiveExamRequest, opts ...grpc.CallOption) (*ArchiveExamResponse, error)
	// Question management
	AddQuestionToExam(ctx context.Context, in *AddQuestionToExamRequest, opts ...grpc.CallOption) (*AddQuestionToExamResponse, error)
	RemoveQuestionFromExam(ctx context.Context, in *RemoveQuestionFromExamRequest, opts ...grpc.CallOption) (*RemoveQuestionFromExamResponse, error)
	ReorderExamQuestions(ctx context.Context, in *ReorderExamQuestionsRequest, opts ...grpc.CallOption) (*ReorderExamQuestionsResponse, error)
	GetExamQuestions(ctx context.Context, in *GetExamQuestionsRequest, opts ...grpc.CallOption) (*GetExamQuestionsResponse, error)
	// Exam taking
	StartExam(ctx context.Context, in *StartExamRequest, opts ...grpc.CallOption) (*StartExamResponse, error)
	SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error)
	SubmitExam(ctx context.Context, in *SubmitExamRequest, opts ...grpc.CallOption) (*SubmitExamResponse, error)
	GetExamAttempt(ctx context.Context, in *GetExamAttemptRequest, opts ...grpc.CallOption) (*GetExamAttemptResponse, error)
	// Results and analytics
	GetExamResults(ctx context.Context, in *GetExamResultsRequest, opts ...grpc.CallOption) (*GetExamResultsResponse, error)
	GetExamStatistics(ctx context.Context, in *GetExamStatisticsRequest, opts ...grpc.CallOption) (*GetExamStatisticsResponse, error)
	GetUserPerformance(ctx context.Context, in *GetUserPerformanceRequest, opts ...grpc.CallOption) (*GetUserPerformanceResponse, error)
}

type examServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExamServiceClient(cc grpc.ClientConnInterface) ExamServiceClient {
	return &examServiceClient{cc}
}

func (c *examServiceClient) CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*CreateExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExamResponse)
	err := c.cc.Invoke(ctx, ExamService_CreateExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) UpdateExam(ctx context.Context, in *UpdateExamRequest, opts ...grpc.CallOption) (*UpdateExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExamResponse)
	err := c.cc.Invoke(ctx, ExamService_UpdateExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) DeleteExam(ctx context.Context, in *DeleteExamRequest, opts ...grpc.CallOption) (*DeleteExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExamResponse)
	err := c.cc.Invoke(ctx, ExamService_DeleteExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetExam(ctx context.Context, in *GetExamRequest, opts ...grpc.CallOption) (*GetExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExamResponse)
	err := c.cc.Invoke(ctx, ExamService_GetExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) ListExams(ctx context.Context, in *ListExamsRequest, opts ...grpc.CallOption) (*ListExamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExamsResponse)
	err := c.cc.Invoke(ctx, ExamService_ListExams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) PublishExam(ctx context.Context, in *PublishExamRequest, opts ...grpc.CallOption) (*PublishExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishExamResponse)
	err := c.cc.Invoke(ctx, ExamService_PublishExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) ArchiveExam(ctx context.Context, in *ArchiveExamRequest, opts ...grpc.CallOption) (*ArchiveExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveExamResponse)
	err := c.cc.Invoke(ctx, ExamService_ArchiveExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) AddQuestionToExam(ctx context.Context, in *AddQuestionToExamRequest, opts ...grpc.CallOption) (*AddQuestionToExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddQuestionToExamResponse)
	err := c.cc.Invoke(ctx, ExamService_AddQuestionToExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) RemoveQuestionFromExam(ctx context.Context, in *RemoveQuestionFromExamRequest, opts ...grpc.CallOption) (*RemoveQuestionFromExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveQuestionFromExamResponse)
	err := c.cc.Invoke(ctx, ExamService_RemoveQuestionFromExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) ReorderExamQuestions(ctx context.Context, in *ReorderExamQuestionsRequest, opts ...grpc.CallOption) (*ReorderExamQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReorderExamQuestionsResponse)
	err := c.cc.Invoke(ctx, ExamService_ReorderExamQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetExamQuestions(ctx context.Context, in *GetExamQuestionsRequest, opts ...grpc.CallOption) (*GetExamQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExamQuestionsResponse)
	err := c.cc.Invoke(ctx, ExamService_GetExamQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) StartExam(ctx context.Context, in *StartExamRequest, opts ...grpc.CallOption) (*StartExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartExamResponse)
	err := c.cc.Invoke(ctx, ExamService_StartExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitAnswerResponse)
	err := c.cc.Invoke(ctx, ExamService_SubmitAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) SubmitExam(ctx context.Context, in *SubmitExamRequest, opts ...grpc.CallOption) (*SubmitExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitExamResponse)
	err := c.cc.Invoke(ctx, ExamService_SubmitExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetExamAttempt(ctx context.Context, in *GetExamAttemptRequest, opts ...grpc.CallOption) (*GetExamAttemptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExamAttemptResponse)
	err := c.cc.Invoke(ctx, ExamService_GetExamAttempt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetExamResults(ctx context.Context, in *GetExamResultsRequest, opts ...grpc.CallOption) (*GetExamResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExamResultsResponse)
	err := c.cc.Invoke(ctx, ExamService_GetExamResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetExamStatistics(ctx context.Context, in *GetExamStatisticsRequest, opts ...grpc.CallOption) (*GetExamStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExamStatisticsResponse)
	err := c.cc.Invoke(ctx, ExamService_GetExamStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetUserPerformance(ctx context.Context, in *GetUserPerformanceRequest, opts ...grpc.CallOption) (*GetUserPerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPerformanceResponse)
	err := c.cc.Invoke(ctx, ExamService_GetUserPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExamServiceServer is the server API for ExamService service.
// All implementations should embed UnimplementedExamServiceServer
// for forward compatibility.
//
// Exam service
type ExamServiceServer interface {
	// Exam management
	CreateExam(context.Context, *CreateExamRequest) (*CreateExamResponse, error)
	UpdateExam(context.Context, *UpdateExamRequest) (*UpdateExamResponse, error)
	DeleteExam(context.Context, *DeleteExamRequest) (*DeleteExamResponse, error)
	GetExam(context.Context, *GetExamRequest) (*GetExamResponse, error)
	ListExams(context.Context, *ListExamsRequest) (*ListExamsResponse, error)
	PublishExam(context.Context, *PublishExamRequest) (*PublishExamResponse, error)
	ArchiveExam(context.Context, *ArchiveExamRequest) (*ArchiveExamResponse, error)
	// Question management
	AddQuestionToExam(context.Context, *AddQuestionToExamRequest) (*AddQuestionToExamResponse, error)
	RemoveQuestionFromExam(context.Context, *RemoveQuestionFromExamRequest) (*RemoveQuestionFromExamResponse, error)
	ReorderExamQuestions(context.Context, *ReorderExamQuestionsRequest) (*ReorderExamQuestionsResponse, error)
	GetExamQuestions(context.Context, *GetExamQuestionsRequest) (*GetExamQuestionsResponse, error)
	// Exam taking
	StartExam(context.Context, *StartExamRequest) (*StartExamResponse, error)
	SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error)
	SubmitExam(context.Context, *SubmitExamRequest) (*SubmitExamResponse, error)
	GetExamAttempt(context.Context, *GetExamAttemptRequest) (*GetExamAttemptResponse, error)
	// Results and analytics
	GetExamResults(context.Context, *GetExamResultsRequest) (*GetExamResultsResponse, error)
	GetExamStatistics(context.Context, *GetExamStatisticsRequest) (*GetExamStatisticsResponse, error)
	GetUserPerformance(context.Context, *GetUserPerformanceRequest) (*GetUserPerformanceResponse, error)
}

// UnimplementedExamServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExamServiceServer struct{}

func (UnimplementedExamServiceServer) CreateExam(context.Context, *CreateExamRequest) (*CreateExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExam not implemented")
}
func (UnimplementedExamServiceServer) UpdateExam(context.Context, *UpdateExamRequest) (*UpdateExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExam not implemented")
}
func (UnimplementedExamServiceServer) DeleteExam(context.Context, *DeleteExamRequest) (*DeleteExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExam not implemented")
}
func (UnimplementedExamServiceServer) GetExam(context.Context, *GetExamRequest) (*GetExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExam not implemented")
}
func (UnimplementedExamServiceServer) ListExams(context.Context, *ListExamsRequest) (*ListExamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExams not implemented")
}
func (UnimplementedExamServiceServer) PublishExam(context.Context, *PublishExamRequest) (*PublishExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishExam not implemented")
}
func (UnimplementedExamServiceServer) ArchiveExam(context.Context, *ArchiveExamRequest) (*ArchiveExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveExam not implemented")
}
func (UnimplementedExamServiceServer) AddQuestionToExam(context.Context, *AddQuestionToExamRequest) (*AddQuestionToExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestionToExam not implemented")
}
func (UnimplementedExamServiceServer) RemoveQuestionFromExam(context.Context, *RemoveQuestionFromExamRequest) (*RemoveQuestionFromExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQuestionFromExam not implemented")
}
func (UnimplementedExamServiceServer) ReorderExamQuestions(context.Context, *ReorderExamQuestionsRequest) (*ReorderExamQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderExamQuestions not implemented")
}
func (UnimplementedExamServiceServer) GetExamQuestions(context.Context, *GetExamQuestionsRequest) (*GetExamQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExamQuestions not implemented")
}
func (UnimplementedExamServiceServer) StartExam(context.Context, *StartExamRequest) (*StartExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExam not implemented")
}
func (UnimplementedExamServiceServer) SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswer not implemented")
}
func (UnimplementedExamServiceServer) SubmitExam(context.Context, *SubmitExamRequest) (*SubmitExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitExam not implemented")
}
func (UnimplementedExamServiceServer) GetExamAttempt(context.Context, *GetExamAttemptRequest) (*GetExamAttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExamAttempt not implemented")
}
func (UnimplementedExamServiceServer) GetExamResults(context.Context, *GetExamResultsRequest) (*GetExamResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExamResults not implemented")
}
func (UnimplementedExamServiceServer) GetExamStatistics(context.Context, *GetExamStatisticsRequest) (*GetExamStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExamStatistics not implemented")
}
func (UnimplementedExamServiceServer) GetUserPerformance(context.Context, *GetUserPerformanceRequest) (*GetUserPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPerformance not implemented")
}
func (UnimplementedExamServiceServer) testEmbeddedByValue() {}

// UnsafeExamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExamServiceServer will
// result in compilation errors.
type UnsafeExamServiceServer interface {
	mustEmbedUnimplementedExamServiceServer()
}

func RegisterExamServiceServer(s grpc.ServiceRegistrar, srv ExamServiceServer) {
	// If the following call pancis, it indicates UnimplementedExamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExamService_ServiceDesc, srv)
}

func _ExamService_CreateExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).CreateExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_CreateExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).CreateExam(ctx, req.(*CreateExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_UpdateExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).UpdateExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_UpdateExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).UpdateExam(ctx, req.(*UpdateExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_DeleteExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).DeleteExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_DeleteExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).DeleteExam(ctx, req.(*DeleteExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_GetExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetExam(ctx, req.(*GetExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_ListExams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).ListExams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_ListExams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).ListExams(ctx, req.(*ListExamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_PublishExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).PublishExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_PublishExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).PublishExam(ctx, req.(*PublishExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_ArchiveExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).ArchiveExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_ArchiveExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).ArchiveExam(ctx, req.(*ArchiveExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_AddQuestionToExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuestionToExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).AddQuestionToExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_AddQuestionToExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).AddQuestionToExam(ctx, req.(*AddQuestionToExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_RemoveQuestionFromExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQuestionFromExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).RemoveQuestionFromExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_RemoveQuestionFromExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).RemoveQuestionFromExam(ctx, req.(*RemoveQuestionFromExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_ReorderExamQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderExamQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).ReorderExamQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_ReorderExamQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).ReorderExamQuestions(ctx, req.(*ReorderExamQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetExamQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetExamQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_GetExamQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetExamQuestions(ctx, req.(*GetExamQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_StartExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).StartExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_StartExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).StartExam(ctx, req.(*StartExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_SubmitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).SubmitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_SubmitAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).SubmitAnswer(ctx, req.(*SubmitAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_SubmitExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).SubmitExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_SubmitExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).SubmitExam(ctx, req.(*SubmitExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetExamAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetExamAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_GetExamAttempt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetExamAttempt(ctx, req.(*GetExamAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetExamResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetExamResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_GetExamResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetExamResults(ctx, req.(*GetExamResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetExamStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetExamStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_GetExamStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetExamStatistics(ctx, req.(*GetExamStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetUserPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetUserPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_GetUserPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetUserPerformance(ctx, req.(*GetUserPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExamService_ServiceDesc is the grpc.ServiceDesc for ExamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ExamService",
	HandlerType: (*ExamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExam",
			Handler:    _ExamService_CreateExam_Handler,
		},
		{
			MethodName: "UpdateExam",
			Handler:    _ExamService_UpdateExam_Handler,
		},
		{
			MethodName: "DeleteExam",
			Handler:    _ExamService_DeleteExam_Handler,
		},
		{
			MethodName: "GetExam",
			Handler:    _ExamService_GetExam_Handler,
		},
		{
			MethodName: "ListExams",
			Handler:    _ExamService_ListExams_Handler,
		},
		{
			MethodName: "PublishExam",
			Handler:    _ExamService_PublishExam_Handler,
		},
		{
			MethodName: "ArchiveExam",
			Handler:    _ExamService_ArchiveExam_Handler,
		},
		{
			MethodName: "AddQuestionToExam",
			Handler:    _ExamService_AddQuestionToExam_Handler,
		},
		{
			MethodName: "RemoveQuestionFromExam",
			Handler:    _ExamService_RemoveQuestionFromExam_Handler,
		},
		{
			MethodName: "ReorderExamQuestions",
			Handler:    _ExamService_ReorderExamQuestions_Handler,
		},
		{
			MethodName: "GetExamQuestions",
			Handler:    _ExamService_GetExamQuestions_Handler,
		},
		{
			MethodName: "StartExam",
			Handler:    _ExamService_StartExam_Handler,
		},
		{
			MethodName: "SubmitAnswer",
			Handler:    _ExamService_SubmitAnswer_Handler,
		},
		{
			MethodName: "SubmitExam",
			Handler:    _ExamService_SubmitExam_Handler,
		},
		{
			MethodName: "GetExamAttempt",
			Handler:    _ExamService_GetExamAttempt_Handler,
		},
		{
			MethodName: "GetExamResults",
			Handler:    _ExamService_GetExamResults_Handler,
		},
		{
			MethodName: "GetExamStatistics",
			Handler:    _ExamService_GetExamStatistics_Handler,
		},
		{
			MethodName: "GetUserPerformance",
			Handler:    _ExamService_GetUserPerformance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/exam.proto",
}
