// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_ListUsers_FullMethodName            = "/v1.AdminService/ListUsers"
	AdminService_UpdateUserRole_FullMethodName       = "/v1.AdminService/UpdateUserRole"
	AdminService_UpdateUserLevel_FullMethodName      = "/v1.AdminService/UpdateUserLevel"
	AdminService_UpdateUserStatus_FullMethodName     = "/v1.AdminService/UpdateUserStatus"
	AdminService_GetAuditLogs_FullMethodName         = "/v1.AdminService/GetAuditLogs"
	AdminService_GetResourceAccess_FullMethodName    = "/v1.AdminService/GetResourceAccess"
	AdminService_GetSecurityAlerts_FullMethodName    = "/v1.AdminService/GetSecurityAlerts"
	AdminService_GetSystemStats_FullMethodName       = "/v1.AdminService/GetSystemStats"
	AdminService_GetMetricsHistory_FullMethodName    = "/v1.AdminService/GetMetricsHistory"
	AdminService_GetAllUserSessions_FullMethodName   = "/v1.AdminService/GetAllUserSessions"
	AdminService_GetAllNotifications_FullMethodName  = "/v1.AdminService/GetAllNotifications"
	AdminService_GetNotificationStats_FullMethodName = "/v1.AdminService/GetNotificationStats"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Admin service
type AdminServiceClient interface {
	// User management
	ListUsers(ctx context.Context, in *AdminListUsersRequest, opts ...grpc.CallOption) (*AdminListUsersResponse, error)
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleResponse, error)
	UpdateUserLevel(ctx context.Context, in *UpdateUserLevelRequest, opts ...grpc.CallOption) (*UpdateUserLevelResponse, error)
	UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*UpdateUserStatusResponse, error)
	// Audit & Monitoring
	GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error)
	GetResourceAccess(ctx context.Context, in *GetResourceAccessRequest, opts ...grpc.CallOption) (*GetResourceAccessResponse, error)
	GetSecurityAlerts(ctx context.Context, in *GetSecurityAlertsRequest, opts ...grpc.CallOption) (*GetSecurityAlertsResponse, error)
	GetSystemStats(ctx context.Context, in *GetSystemStatsRequest, opts ...grpc.CallOption) (*GetSystemStatsResponse, error)
	GetMetricsHistory(ctx context.Context, in *GetMetricsHistoryRequest, opts ...grpc.CallOption) (*GetMetricsHistoryResponse, error)
	// Session management
	GetAllUserSessions(ctx context.Context, in *GetAllUserSessionsRequest, opts ...grpc.CallOption) (*GetAllUserSessionsResponse, error)
	// Notification management
	GetAllNotifications(ctx context.Context, in *GetAllNotificationsRequest, opts ...grpc.CallOption) (*GetAllNotificationsResponse, error)
	GetNotificationStats(ctx context.Context, in *GetNotificationStatsRequest, opts ...grpc.CallOption) (*GetNotificationStatsResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) ListUsers(ctx context.Context, in *AdminListUsersRequest, opts ...grpc.CallOption) (*AdminListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminListUsersResponse)
	err := c.cc.Invoke(ctx, AdminService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserRoleResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUserLevel(ctx context.Context, in *UpdateUserLevelRequest, opts ...grpc.CallOption) (*UpdateUserLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserLevelResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateUserLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*UpdateUserStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserStatusResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuditLogsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetAuditLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetResourceAccess(ctx context.Context, in *GetResourceAccessRequest, opts ...grpc.CallOption) (*GetResourceAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceAccessResponse)
	err := c.cc.Invoke(ctx, AdminService_GetResourceAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSecurityAlerts(ctx context.Context, in *GetSecurityAlertsRequest, opts ...grpc.CallOption) (*GetSecurityAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecurityAlertsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSecurityAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSystemStats(ctx context.Context, in *GetSystemStatsRequest, opts ...grpc.CallOption) (*GetSystemStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemStatsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSystemStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetMetricsHistory(ctx context.Context, in *GetMetricsHistoryRequest, opts ...grpc.CallOption) (*GetMetricsHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricsHistoryResponse)
	err := c.cc.Invoke(ctx, AdminService_GetMetricsHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAllUserSessions(ctx context.Context, in *GetAllUserSessionsRequest, opts ...grpc.CallOption) (*GetAllUserSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUserSessionsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetAllUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAllNotifications(ctx context.Context, in *GetAllNotificationsRequest, opts ...grpc.CallOption) (*GetAllNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllNotificationsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetAllNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetNotificationStats(ctx context.Context, in *GetNotificationStatsRequest, opts ...grpc.CallOption) (*GetNotificationStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationStatsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetNotificationStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations should embed UnimplementedAdminServiceServer
// for forward compatibility.
//
// Admin service
type AdminServiceServer interface {
	// User management
	ListUsers(context.Context, *AdminListUsersRequest) (*AdminListUsersResponse, error)
	UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleResponse, error)
	UpdateUserLevel(context.Context, *UpdateUserLevelRequest) (*UpdateUserLevelResponse, error)
	UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*UpdateUserStatusResponse, error)
	// Audit & Monitoring
	GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error)
	GetResourceAccess(context.Context, *GetResourceAccessRequest) (*GetResourceAccessResponse, error)
	GetSecurityAlerts(context.Context, *GetSecurityAlertsRequest) (*GetSecurityAlertsResponse, error)
	GetSystemStats(context.Context, *GetSystemStatsRequest) (*GetSystemStatsResponse, error)
	GetMetricsHistory(context.Context, *GetMetricsHistoryRequest) (*GetMetricsHistoryResponse, error)
	// Session management
	GetAllUserSessions(context.Context, *GetAllUserSessionsRequest) (*GetAllUserSessionsResponse, error)
	// Notification management
	GetAllNotifications(context.Context, *GetAllNotificationsRequest) (*GetAllNotificationsResponse, error)
	GetNotificationStats(context.Context, *GetNotificationStatsRequest) (*GetNotificationStatsResponse, error)
}

// UnimplementedAdminServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) ListUsers(context.Context, *AdminListUsersRequest) (*AdminListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUserLevel(context.Context, *UpdateUserLevelRequest) (*UpdateUserLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLevel not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*UpdateUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedAdminServiceServer) GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogs not implemented")
}
func (UnimplementedAdminServiceServer) GetResourceAccess(context.Context, *GetResourceAccessRequest) (*GetResourceAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceAccess not implemented")
}
func (UnimplementedAdminServiceServer) GetSecurityAlerts(context.Context, *GetSecurityAlertsRequest) (*GetSecurityAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityAlerts not implemented")
}
func (UnimplementedAdminServiceServer) GetSystemStats(context.Context, *GetSystemStatsRequest) (*GetSystemStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemStats not implemented")
}
func (UnimplementedAdminServiceServer) GetMetricsHistory(context.Context, *GetMetricsHistoryRequest) (*GetMetricsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricsHistory not implemented")
}
func (UnimplementedAdminServiceServer) GetAllUserSessions(context.Context, *GetAllUserSessionsRequest) (*GetAllUserSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserSessions not implemented")
}
func (UnimplementedAdminServiceServer) GetAllNotifications(context.Context, *GetAllNotificationsRequest) (*GetAllNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotifications not implemented")
}
func (UnimplementedAdminServiceServer) GetNotificationStats(context.Context, *GetNotificationStatsRequest) (*GetNotificationStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationStats not implemented")
}
func (UnimplementedAdminServiceServer) testEmbeddedByValue() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUsers(ctx, req.(*AdminListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUserRole(ctx, req.(*UpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUserLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUserLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateUserLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUserLevel(ctx, req.(*UpdateUserLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUserStatus(ctx, req.(*UpdateUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAuditLogs(ctx, req.(*GetAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetResourceAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetResourceAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetResourceAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetResourceAccess(ctx, req.(*GetResourceAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSecurityAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSecurityAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSecurityAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSecurityAlerts(ctx, req.(*GetSecurityAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSystemStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSystemStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSystemStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSystemStats(ctx, req.(*GetSystemStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetMetricsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetMetricsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetMetricsHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetMetricsHistory(ctx, req.(*GetMetricsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAllUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAllUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAllUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAllUserSessions(ctx, req.(*GetAllUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAllNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAllNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAllNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAllNotifications(ctx, req.(*GetAllNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetNotificationStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetNotificationStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetNotificationStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetNotificationStats(ctx, req.(*GetNotificationStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _AdminService_ListUsers_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _AdminService_UpdateUserRole_Handler,
		},
		{
			MethodName: "UpdateUserLevel",
			Handler:    _AdminService_UpdateUserLevel_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _AdminService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "GetAuditLogs",
			Handler:    _AdminService_GetAuditLogs_Handler,
		},
		{
			MethodName: "GetResourceAccess",
			Handler:    _AdminService_GetResourceAccess_Handler,
		},
		{
			MethodName: "GetSecurityAlerts",
			Handler:    _AdminService_GetSecurityAlerts_Handler,
		},
		{
			MethodName: "GetSystemStats",
			Handler:    _AdminService_GetSystemStats_Handler,
		},
		{
			MethodName: "GetMetricsHistory",
			Handler:    _AdminService_GetMetricsHistory_Handler,
		},
		{
			MethodName: "GetAllUserSessions",
			Handler:    _AdminService_GetAllUserSessions_Handler,
		},
		{
			MethodName: "GetAllNotifications",
			Handler:    _AdminService_GetAllNotifications_Handler,
		},
		{
			MethodName: "GetNotificationStats",
			Handler:    _AdminService_GetNotificationStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/admin.proto",
}
