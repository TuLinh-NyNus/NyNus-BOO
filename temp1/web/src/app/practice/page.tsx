"use client";

import { motion, useInView, useScroll, useTransform } from "framer-motion";
import { ChevronRight, Clock, FileText, BarChart3, Brain, Zap, Award, Target, BookOpen, Star, ExternalLink } from "lucide-react";
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { Metadata } from "next";
import Image from "next/image";
import Link from "next/link";
import { useState, useEffect, useRef, Suspense, lazy } from "react";

// Lazy load c√°c components n·∫∑ng
const AnalysisSection = lazy(() => import('./components/analysis-section'));
const CTASection = lazy(() => import('./components/cta-section'));

// Loading fallback
const SectionSkeleton = () => (
  <div className="py-20">
    <div className="container mx-auto px-4">
      <div className="animate-pulse space-y-8">
        <div className="h-10 w-72 bg-slate-700 rounded mx-auto"></div>
        <div className="h-5 w-full max-w-2xl mx-auto bg-slate-700 rounded"></div>
        <div className="h-64 bg-slate-800 rounded-xl"></div>
      </div>
    </div>
  </div>
);

export default function ExercisePage(): JSX.Element {
  // D·ªØ li·ªáu danh m·ª•c ƒë·ªÅ thi
  const categories = [
    {
      title: "Luy·ªán ƒë·ªÅ theo l·ªõp",
      icon: <BookOpen className="h-6 w-6 text-purple-500" />,
      description: "B√†i t·∫≠p ƒë∆∞·ª£c ph√¢n chia theo c·∫•p ƒë·ªô t·ª´ L·ªõp 6 ƒë·∫øn L·ªõp 12, ph√π h·ª£p v·ªõi ch∆∞∆°ng tr√¨nh gi√°o d·ª•c.",
      items: ["L·ªõp 6", "L·ªõp 7", "L·ªõp 8", "L·ªõp 9", "L·ªõp 10", "L·ªõp 11", "L·ªõp 12"],
      bgColor: "from-purple-500/10 to-indigo-500/10",
      borderColor: "border-purple-500/20",
    },
    {
      title: "Luy·ªán ƒë·ªÅ theo k·ª≥ thi",
      icon: <Award className="h-6 w-6 text-blue-500" />,
      description: "T·∫≠p h·ª£p ƒë·ªÅ thi t·ª´ c√°c k·ª≥ thi ch√≠nh th·ª©c v√† kh√¥ng ch√≠nh th·ª©c, t·ª´ ki·ªÉm tra 15 ph√∫t ƒë·∫øn THPT Qu·ªëc gia.",
      items: ["THPT Qu·ªëc gia", "H·ªçc k·ª≥", "Ki·ªÉm tra 1 ti·∫øt", "Ki·ªÉm tra 15 ph√∫t", "Thi th·ª≠ ƒë·∫°i h·ªçc"],
      bgColor: "from-blue-500/10 to-cyan-500/10",
      borderColor: "border-blue-500/20",
    },
    {
      title: "Luy·ªán ƒë·ªÅ theo ch·ªß ƒë·ªÅ",
      icon: <Target className="h-6 w-6 text-amber-500" />,
      description: "C√°c ƒë·ªÅ thi t·∫≠p trung v√†o c√°c ch·ªß ƒë·ªÅ to√°n h·ªçc c·ª• th·ªÉ, gi√∫p c·ªßng c·ªë ki·∫øn th·ª©c t·ª´ng ph·∫ßn chi ti·∫øt.",
      items: ["H√¨nh h·ªçc", "ƒê·∫°i s·ªë", "Gi·∫£i t√≠ch", "S·ªë h·ªçc", "X√°c su·∫•t th·ªëng k√™", "T·ªï h·ª£p h√†m s·ªë"],
      bgColor: "from-amber-500/10 to-yellow-500/10",
      borderColor: "border-amber-500/20",
    },
    {
      title: "Luy·ªán ƒë·ªÅ c√° nh√¢n h√≥a",
      icon: <Brain className="h-6 w-6 text-rose-500" />,
      description: "S·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu v√† t·∫°o ƒë·ªÅ thi ph√π h·ª£p v·ªõi nƒÉng l·ª±c c·ªßa t·ª´ng h·ªçc sinh.",
      items: ["ƒê·ªÅ g·ª£i √Ω AI", "ƒêi·ªÉm y·∫øu c·∫ßn c·∫£i thi·ªán", "TƒÉng c∆∞·ªùng k·ªπ nƒÉng", "Luy·ªán t·∫≠p m·ª•c ti√™u"],
      bgColor: "from-rose-500/10 to-pink-500/10",
      borderColor: "border-rose-500/20",
    },
  ];

  // D·ªØ li·ªáu ƒë·ªÅ thi n·ªïi b·∫≠t
  const featuredExams = [
    {
      id: 1,
      title: "ƒê·ªÅ thi THPT Qu·ªëc Gia 2023",
      time: 90,
      questions: 50,
      level: "Kh√≥",
      levelColor: "text-rose-500",
      description: "ƒê·ªÅ thi ch√≠nh th·ª©c k·ª≥ thi THPT Qu·ªëc Gia nƒÉm 2023, bao g·ªìm c√°c d·∫°ng b√†i th∆∞·ªùng g·∫∑p.",
      aiTip: "T·∫≠p trung v√†o ph·∫ßn H√¨nh h·ªçc kh√¥ng gian v√† Nguy√™n h√†m t√≠ch ph√¢n.",
      attempts: 12580,
      success: 68,
    },
    {
      id: 2,
      title: "Luy·ªán ƒë·ªÅ ƒê·∫°i s·ªë - L·ªõp 10",
      time: 45,
      questions: 25,
      level: "Trung b√¨nh",
      levelColor: "text-amber-500",
      description: "T·ªïng h·ª£p c√°c b√†i t·∫≠p v·ªÅ H√†m s·ªë, Ph∆∞∆°ng tr√¨nh b·∫≠c 2 v√† B·∫•t ƒë·∫≥ng th·ª©c.",
      aiTip: "Ch√∫ √Ω c√°c d·∫°ng b√†i v·ªÅ ƒë·ªãnh l√Ω Viet v√† ·ª©ng d·ª•ng.",
      attempts: 8745,
      success: 76,
    },
    {
      id: 3,
      title: "ƒê·ªÅ √¥n thi H·ªçc k·ª≥ 1 - L·ªõp 12",
      time: 60,
      questions: 40,
      level: "Trung b√¨nh - Kh√≥",
      levelColor: "text-orange-500",
      description: "ƒê·ªÅ t·ªïng h·ª£p ki·∫øn th·ª©c n·ª≠a ƒë·∫ßu nƒÉm h·ªçc l·ªõp 12, chu·∫©n b·ªã cho k·ª≥ thi h·ªçc k·ª≥.",
      aiTip: "ƒê·ªÅ c√≥ nhi·ªÅu c√¢u h·ªèi v·ªÅ ƒë·∫°o h√†m v√† ·ª©ng d·ª•ng, n√™n d√†nh th·ªùi gian √¥n l·∫°i ph·∫ßn n√†y.",
      attempts: 9450,
      success: 72,
    },
    {
      id: 4,
      title: "Ki·ªÉm tra 15 ph√∫t - L∆∞·ª£ng gi√°c",
      time: 15,
      questions: 10,
      level: "D·ªÖ",
      levelColor: "text-green-500",
      description: "ƒê·ªÅ ki·ªÉm tra nhanh ki·∫øn th·ª©c v·ªÅ c√°c c√¥ng th·ª©c l∆∞·ª£ng gi√°c c∆° b·∫£n.",
      aiTip: "√în l·∫°i c√°c c√¥ng th·ª©c l∆∞·ª£ng gi√°c c∆° b·∫£n v√† c√°ch √°p d·ª•ng v√†o b√†i t·∫≠p.",
      attempts: 15670,
      success: 85,
    },
  ];

  // D·ªØ li·ªáu ph√¢n t√≠ch k·∫øt qu·∫£ ng∆∞·ªùi d√πng m·∫´u
  const userStats = {
    completedExams: 12,
    avgScore: 7.8,
    weakTopics: ["H√†m s·ªë", "S·ªë ph·ª©c", "Nguy√™n h√†m"],
    strongTopics: ["L∆∞·ª£ng gi√°c", "ƒê·∫°o h√†m", "Ph∆∞∆°ng tr√¨nh"],
    timeSpent: "18 gi·ªù 42 ph√∫t",
    completed: "78%",
  };

  // Tr·∫°ng th√°i hi·ªÉn th·ªã menu n·ªïi
  const [showQuickNav, setShowQuickNav] = useState(false);

  // Hi·ªán menu khi cu·ªôn xu·ªëng
  useEffect(() => {
    const handleScroll = () => {
      setShowQuickNav(window.scrollY > 500);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // H√†m t·∫°o l·ªùi ch√∫c m·ª´ng c√° nh√¢n h√≥a d·ª±a tr√™n ti·∫øn ƒë·ªô
  const getMotivationalMessage = (progress: string): string => {
    const progressNum = parseInt(progress);
    if (progressNum < 30) return "H√£y b·∫Øt ƒë·∫ßu h√†nh tr√¨nh h·ªçc t·∫≠p c·ªßa b·∫°n!";
    if (progressNum < 50) return "B·∫°n ƒë√£ b·∫Øt ƒë·∫ßu t·ªët, h√£y ti·∫øp t·ª•c n·ªó l·ª±c!";
    if (progressNum < 70) return "Ti·∫øn b·ªô tuy·ªát v·ªùi! B·∫°n ƒëang ƒëi ƒë√∫ng h∆∞·ªõng.";
    if (progressNum < 90) return "Xu·∫•t s·∫Øc! B·∫°n g·∫ßn ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u r·ªìi!";
    return "Phi th∆∞·ªùng! B·∫°n ƒë√£ ch·ª©ng minh s·ª± ki√™n tr√¨ v√† n·ªó l·ª±c c·ªßa m√¨nh!";
  };

  // M√†u background cho tin nh·∫Øn d·ª±a tr√™n ti·∫øn ƒë·ªô
  const getMotivationColor = (progress: string): string => {
    const progressNum = parseInt(progress);
    if (progressNum < 30) return "from-amber-600/20 to-amber-500/10 border-amber-500/30";
    if (progressNum < 50) return "from-orange-600/20 to-amber-500/10 border-orange-500/30";
    if (progressNum < 70) return "from-indigo-600/20 to-blue-500/10 border-indigo-500/30";
    if (progressNum < 90) return "from-blue-600/20 to-indigo-500/10 border-blue-500/30";
    return "from-green-600/20 to-emerald-500/10 border-green-500/30";
  };

  // T·∫°o refs v√† hooks cho animation scroll
  const heroRef = useRef(null);
  const categoriesRef = useRef(null);
  const isHeroInView = useInView(heroRef, { once: true, margin: "-100px 0px" });
  const isCategoriesInView = useInView(categoriesRef, { once: true, margin: "-100px 0px" });

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.3
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } }
  };

  // Parallax effect cho background hero
  const { scrollY } = useScroll();
  const heroParallax = useTransform(scrollY, [0, 500], [0, 100]);
  const heroBg1Parallax = useTransform(scrollY, [0, 500], [0, 50]);
  const heroBg2Parallax = useTransform(scrollY, [0, 500], [0, -30]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-slate-100 to-indigo-100 dark:from-slate-900 dark:via-slate-900 dark:to-indigo-950 transition-colors duration-300">
      {/* Breadcrumbs Navigation */}
      <div className="container mx-auto px-4 pt-4">
        <div className="flex items-center space-x-2 text-sm font-medium">
          <Link href="/" className="text-slate-500 dark:text-slate-400 hover:text-indigo-500 dark:hover:text-indigo-300 transition-colors duration-300">
            Trang ch·ªß
          </Link>
          <span className="text-slate-400 dark:text-slate-600 transition-colors duration-300">/</span>
          <span className="text-indigo-500 dark:text-indigo-300 transition-colors duration-300">Luy·ªán ƒë·ªÅ</span>
        </div>
      </div>

      {/* Hero Section */}
      <section className="relative py-16 overflow-hidden">
        {/* Background elements */}
        <motion.div className="absolute inset-0 z-0 opacity-30" style={{ y: heroParallax }}>
          <motion.div
            className="absolute top-20 left-10 w-72 h-72 bg-purple-500 rounded-full filter blur-[120px]"
            style={{ y: heroBg1Parallax }}
          ></motion.div>
          <motion.div
            className="absolute bottom-10 right-10 w-72 h-72 bg-blue-500 rounded-full filter blur-[100px]"
            style={{ y: heroBg2Parallax }}
          ></motion.div>
        </motion.div>

        <div className="container mx-auto px-4 relative z-10">
          <motion.div
            ref={heroRef}
            className="flex flex-col lg:flex-row items-center gap-12"
            variants={containerVariants}
            initial="hidden"
            animate={isHeroInView ? "visible" : "hidden"}
          >
            <motion.div className="flex-1 space-y-6" variants={itemVariants}>
              <div className="inline-block px-3 py-1 rounded-full bg-indigo-100/50 dark:bg-indigo-500/20 border border-indigo-300/50 dark:border-indigo-500/30 text-indigo-600 dark:text-indigo-300 text-sm font-medium mb-2 transition-colors duration-300">
                üèÜ Chinh ph·ª•c m·ªçi k·ª≥ thi
              </div>
              <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold text-slate-800 dark:text-white transition-colors duration-300">
                Luy·ªán ƒë·ªÅ th√¥ng minh<br />
                <span className="text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-violet-600 dark:from-blue-400 dark:to-violet-500 transition-colors duration-300">v·ªõi tr√≠ tu·ªá nh√¢n t·∫°o</span>
              </h1>
              <p className="text-lg text-slate-700 dark:text-slate-50 max-w-2xl leading-relaxed transition-colors duration-300">
                Tr·∫£i nghi·ªám luy·ªán ƒë·ªÅ v·ªõi ng√¢n h√†ng c√¢u h·ªèi phong ph√∫, ƒë·ªÅ thi t√πy ch·ªânh v√† g·ª£i √Ω AI
                gi√∫p b·∫°n h·ªçc t·∫≠p hi·ªáu qu·∫£ h∆°n. C√° nh√¢n h√≥a l·ªô tr√¨nh h·ªçc t·∫≠p c·ªßa b·∫°n.
              </p>
              <div className="flex flex-wrap gap-4 pt-4">
                <Link
                  href="#exam-categories"
                  className="px-6 py-3 rounded-xl bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold hover:from-indigo-700 hover:to-purple-700 transition-all flex items-center gap-2 shadow-lg shadow-indigo-500/25"
                >
                  Ch·ªçn ƒë·ªÅ ngay
                  <ChevronRight className="h-4 w-4" />
                </Link>
                <Link
                  href="#analysis"
                  className="px-6 py-3 rounded-xl bg-white/80 dark:bg-slate-800/80 border border-slate-300 dark:border-slate-700 text-slate-800 dark:text-white font-semibold hover:bg-slate-100 dark:hover:bg-slate-800 transition-all duration-300"
                >
                  Xem th·ªëng k√™ c·ªßa b·∫°n
                </Link>
              </div>
            </motion.div>

            <motion.div className="flex-1 relative" variants={itemVariants}>
              <div className="relative w-full h-[400px] bg-white/40 dark:bg-slate-800/40 rounded-xl overflow-hidden fancy-card transition-colors duration-300">
                <div className="absolute inset-0 bg-gradient-to-br from-indigo-200/20 to-purple-200/20 dark:from-indigo-600/10 dark:to-purple-600/10 transition-colors duration-300"></div>
                <Image
                  src="/images/exercise-dashboard.svg"
                  alt="Dashboard luy·ªán ƒë·ªÅ v·ªõi AI"
                  fill
                  className="p-4 object-contain"
                />
                <div className="absolute top-4 right-4 px-3 py-1 bg-indigo-100/50 dark:bg-indigo-500/20 backdrop-blur-sm rounded-full text-xs text-indigo-600 dark:text-indigo-300 border border-indigo-300/50 dark:border-indigo-500/30 transition-colors duration-300">
                  Powered by AI
                </div>
              </div>

              {/* Floating badge elements */}
              <motion.div
                className="absolute -top-6 -left-6 bg-purple-100/80 dark:bg-purple-900/80 backdrop-blur-sm p-3 rounded-lg border border-purple-300/50 dark:border-purple-700/50 shadow-xl transition-colors duration-300"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.5, duration: 0.5 }}
              >
                <div className="flex items-center gap-2">
                  <Zap className="h-5 w-5 text-purple-600 dark:text-purple-400 transition-colors duration-300" />
                  <span className="text-sm font-medium text-slate-800 dark:text-white transition-colors duration-300">AI ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh y·∫øu</span>
                </div>
              </motion.div>

              <motion.div
                className="absolute -bottom-6 -right-6 bg-blue-100/80 dark:bg-blue-900/80 backdrop-blur-sm p-3 rounded-lg border border-blue-300/50 dark:border-blue-700/50 shadow-xl transition-colors duration-300"
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.7, duration: 0.5 }}
              >
                <div className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5 text-blue-600 dark:text-blue-400 transition-colors duration-300" />
                  <span className="text-sm font-medium text-slate-800 dark:text-white transition-colors duration-300">Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p</span>
                </div>
              </motion.div>
            </motion.div>
          </motion.div>
        </div>
      </section>

      {/* Wave Divider */}
      <div className="relative h-24 -mt-10">
        <svg className="absolute w-full h-full" viewBox="0 0 1440 120" fill="none" preserveAspectRatio="none">
          <path
            d="M0,36L48,40C96,44,192,52,288,57.3C384,63,480,65,576,64C672,63,768,59,864,50.7C960,43,1056,31,1152,33.3C1248,36,1344,52,1392,60L1440,68L1440,120L1392,120C1344,120,1248,120,1152,120C1056,120,960,120,864,120C768,120,672,120,576,120C480,120,384,120,288,120C192,120,96,120,48,120L0,120Z"
            className="fill-slate-50/80 dark:fill-slate-900/80 transition-colors duration-300"
          ></path>
        </svg>
      </div>

      {/* Danh m·ª•c ƒë·ªÅ thi */}
      <section id="exam-categories" className="py-20 bg-slate-100/50 dark:bg-slate-900/50 transition-colors duration-300">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-slate-800 dark:text-white transition-colors duration-300">Danh m·ª•c ƒë·ªÅ thi</h2>
            <p className="mt-4 text-slate-700 dark:text-slate-50 max-w-2xl mx-auto leading-relaxed transition-colors duration-300">
              L·ª±a ch·ªçn danh m·ª•c ph√π h·ª£p v·ªõi nhu c·∫ßu h·ªçc t·∫≠p c·ªßa b·∫°n. T·ª´ ƒë·ªÅ thi theo l·ªõp
              ƒë·∫øn c√°c b√†i t·∫≠p ƒë∆∞·ª£c c√° nh√¢n h√≥a b·ªüi AI.
            </p>
          </div>

          <motion.div
            ref={categoriesRef}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"
            variants={containerVariants}
            initial="hidden"
            animate={isCategoriesInView ? "visible" : "hidden"}
          >
            {categories.map((category, index) => (
              <motion.div
                key={index}
                className={`rounded-xl p-6 border ${category.borderColor} bg-gradient-to-br ${category.bgColor} backdrop-blur-sm relative overflow-hidden group fancy-card`}
                variants={itemVariants}
                whileHover={{
                  scale: 1.03,
                  y: -5,
                  boxShadow: "0 20px 25px -5px rgba(0, 0, 0, 0.2), 0 10px 10px -5px rgba(0, 0, 0, 0.1)"
                }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <div className="mb-4 flex items-center gap-3">
                  <div className="p-2 bg-white/40 dark:bg-slate-900/40 rounded-lg backdrop-blur-sm transition-colors duration-300">
                    {category.icon}
                  </div>
                  <h3 className="text-xl font-bold text-slate-800 dark:text-white transition-colors duration-300">{category.title}</h3>
                </div>
                <p className="text-sm text-slate-700 dark:text-slate-300 mb-6 transition-colors duration-300">
                  {category.description}
                </p>
                <ul className="space-y-2 mb-6">
                  {category.items.map((item, i) => (
                    <motion.li
                      key={i}
                      className="flex items-center gap-2"
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 + i * 0.05 + 0.3, duration: 0.3 }}
                    >
                      <div className="h-1.5 w-1.5 rounded-full bg-indigo-500 transition-colors duration-300"></div>
                      <span className="text-sm text-slate-700 dark:text-slate-200 transition-colors duration-300">{item}</span>
                    </motion.li>
                  ))}
                </ul>
                <Link
                  href={`/luyen-de/${category.title.toLowerCase().replace(/\s+/g, '-')}`}
                  className="inline-flex items-center gap-1 text-indigo-600 dark:text-indigo-300 hover:text-indigo-500 dark:hover:text-indigo-200 text-sm font-medium transition-colors duration-300"
                >
                  Xem chi ti·∫øt
                  <ChevronRight className="h-3 w-3" />
                </Link>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* Wave Divider */}
      <div className="relative h-24">
        <svg className="absolute w-full h-full transform rotate-180" viewBox="0 0 1440 120" fill="none" preserveAspectRatio="none">
          <path
            d="M0,36L48,40C96,44,192,52,288,57.3C384,63,480,65,576,64C672,63,768,59,864,50.7C960,43,1056,31,1152,33.3C1248,36,1344,52,1392,60L1440,68L1440,120L1392,120C1344,120,1248,120,1152,120C1056,120,960,120,864,120C768,120,672,120,576,120C480,120,384,120,288,120C192,120,96,120,48,120L0,120Z"
            className="fill-slate-50/80 dark:fill-slate-900/80 transition-colors duration-300"
          ></path>
        </svg>
      </div>

      {/* ƒê·ªÅ thi n·ªïi b·∫≠t */}
      <section className="py-20">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-end mb-12">
            <div>
              <h2 className="text-3xl md:text-4xl font-bold text-slate-800 dark:text-white transition-colors duration-300">ƒê·ªÅ thi n·ªïi b·∫≠t</h2>
              <p className="mt-4 text-slate-700 dark:text-slate-50 max-w-2xl leading-relaxed transition-colors duration-300">
                C√°c ƒë·ªÅ thi ƒë∆∞·ª£c nhi·ªÅu h·ªçc sinh l·ª±a ch·ªçn v√† ƒë√°nh gi√° cao. B·∫Øt ƒë·∫ßu ngay ƒë·ªÉ c·∫£i thi·ªán k·ªπ nƒÉng c·ªßa b·∫°n.
              </p>
            </div>
            <Link
              href="/luyen-de/tat-ca"
              className="hidden md:flex items-center gap-1 text-indigo-600 dark:text-indigo-300 hover:text-indigo-500 dark:hover:text-indigo-200 font-medium transition-colors duration-300"
            >
              Xem t·∫•t c·∫£ ƒë·ªÅ thi
              <ExternalLink className="h-4 w-4" />
            </Link>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {featuredExams.map((exam, index) => (
              <motion.div
                key={exam.id}
                className="border border-slate-300 dark:border-slate-800 rounded-xl overflow-hidden group hover:border-indigo-500/30 transition-colors duration-300 fancy-card bg-white/50 dark:bg-transparent"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1, duration: 0.5 }}
                whileHover={{
                  scale: 1.02,
                  y: -5,
                  boxShadow: "0 20px 25px -5px rgba(0, 0, 0, 0.2), 0 10px 10px -5px rgba(0, 0, 0, 0.1)"
                }}
              >
                <div className="p-6">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="text-xl font-bold text-slate-800 dark:text-white group-hover:text-indigo-600 dark:group-hover:text-indigo-300 transition-colors duration-300">
                        {exam.title}
                      </h3>
                      <div className="flex items-center gap-4 mt-2">
                        <div className="flex items-center gap-1 text-slate-600 dark:text-slate-400 transition-colors duration-300">
                          <Clock className="h-4 w-4" />
                          <span className="text-sm">{exam.time} ph√∫t</span>
                        </div>
                        <div className="flex items-center gap-1 text-slate-600 dark:text-slate-400 transition-colors duration-300">
                          <FileText className="h-4 w-4" />
                          <span className="text-sm">{exam.questions} c√¢u h·ªèi</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <Star className="h-4 w-4 text-slate-600 dark:text-slate-400 transition-colors duration-300" />
                          <span className={`text-sm ${exam.levelColor}`}>{exam.level}</span>
                        </div>
                      </div>
                    </div>
                    <Link
                      href={`/luyen-de/de-thi/${exam.id}`}
                      className="px-4 py-2 bg-indigo-600/20 hover:bg-indigo-600 border border-indigo-600/30 rounded-lg text-indigo-300 hover:text-white text-sm font-medium transition-all hover:scale-105 hover:shadow-lg hover:shadow-indigo-500/20"
                    >
                      B·∫Øt ƒë·∫ßu
                    </Link>
                  </div>

                  <div className="mt-4 text-sm text-slate-700 dark:text-slate-300 transition-colors duration-300">
                    {exam.description}
                  </div>

                  <div className="mt-5 p-3 bg-indigo-50/50 dark:bg-indigo-950/50 border border-indigo-200/50 dark:border-indigo-900/50 rounded-lg transition-colors duration-300">
                    <div className="flex items-start gap-2">
                      <Brain className="h-5 w-5 text-indigo-600 dark:text-indigo-400 mt-0.5 transition-colors duration-300" />
                      <div>
                        <div className="text-xs font-medium text-indigo-600 dark:text-indigo-300 mb-1 transition-colors duration-300">G·ª£i √Ω t·ª´ AI:</div>
                        <div className="text-sm text-slate-700 dark:text-slate-300 transition-colors duration-300">{exam.aiTip}</div>
                      </div>
                    </div>
                  </div>

                  <div className="mt-5 flex items-center justify-between">
                    <div className="flex items-center gap-1 text-slate-600 dark:text-slate-400 text-sm transition-colors duration-300">
                      <span className="text-slate-700 dark:text-slate-300 font-medium transition-colors duration-300">{exam.attempts.toLocaleString()}</span> l∆∞·ª£t th·ª±c hi·ªán
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-16 h-2 bg-slate-200 dark:bg-slate-800 rounded-full overflow-hidden transition-colors duration-300">
                        <div
                          className="h-full bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full"
                          style={{ width: `${exam.success}%` }}
                        ></div>
                      </div>
                      <span className="text-sm text-indigo-600 dark:text-indigo-300 transition-colors duration-300">{exam.success}% <span className="text-slate-600 dark:text-slate-400 transition-colors duration-300">ho√†n th√†nh</span></span>
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>

          <div className="mt-8 text-center md:hidden">
            <Link
              href="/luyen-de/tat-ca"
              className="inline-flex items-center gap-1 text-indigo-600 dark:text-indigo-300 hover:text-indigo-500 dark:hover:text-indigo-200 font-medium transition-colors duration-300"
            >
              Xem t·∫•t c·∫£ ƒë·ªÅ thi
              <ExternalLink className="h-4 w-4" />
            </Link>
          </div>
        </div>
      </section>

      {/* Ph√¢n t√≠ch k·∫øt qu·∫£ v·ªõi Lazy Loading */}
      <Suspense fallback={<SectionSkeleton />}>
        <AnalysisSection
          userStats={userStats}
          getMotivationalMessage={getMotivationalMessage}
          getMotivationColor={getMotivationColor}
        />
      </Suspense>

      {/* CTA Section v·ªõi Lazy Loading */}
      <Suspense fallback={<SectionSkeleton />}>
        <CTASection />
      </Suspense>

      {/* Quick Navigation Menu */}
      <motion.div
        className="fixed bottom-8 right-8 z-50"
        initial={{ opacity: 0, scale: 0.5 }}
        animate={{
          opacity: showQuickNav ? 1 : 0,
          scale: showQuickNav ? 1 : 0.5,
          pointerEvents: showQuickNav ? "auto" : "none"
        }}
        transition={{ duration: 0.3 }}
      >
        <div className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm p-3 rounded-full border border-slate-200/50 dark:border-slate-700/50 shadow-xl transition-colors duration-300">
          <div className="flex flex-col gap-3">
            <a
              href="#exam-categories"
              className="w-10 h-10 rounded-full bg-indigo-100/50 dark:bg-indigo-600/20 hover:bg-indigo-600 flex items-center justify-center text-indigo-600 dark:text-indigo-300 hover:text-white transition-colors duration-300"
              title="Danh m·ª•c ƒë·ªÅ thi"
            >
              <BookOpen className="h-5 w-5" />
            </a>
            <a
              href="#analysis"
              className="w-10 h-10 rounded-full bg-indigo-100/50 dark:bg-indigo-600/20 hover:bg-indigo-600 flex items-center justify-center text-indigo-600 dark:text-indigo-300 hover:text-white transition-colors duration-300"
              title="Ph√¢n t√≠ch k·∫øt qu·∫£"
            >
              <BarChart3 className="h-5 w-5" />
            </a>
            <motion.a
              href="#"
              className="w-10 h-10 rounded-full bg-indigo-600 flex items-center justify-center text-white transition-colors duration-300"
              title="L√™n ƒë·∫ßu trang"
              onClick={(e) => {
                e.preventDefault();
                window.scrollTo({ top: 0, behavior: 'smooth' });
              }}
              whileHover={{ y: -3 }}
            >
              <ChevronRight className="h-5 w-5 rotate-270" />
            </motion.a>
          </div>
        </div>
      </motion.div>
    </div>
  );
}
