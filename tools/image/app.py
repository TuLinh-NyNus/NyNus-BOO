"""
LaTeX Image Processor - Streamlit UI
Tool x·ª≠ l√Ω h√¨nh ·∫£nh trong file LaTeX (TikZ v√† existing images)
"""
import streamlit as st
import tempfile
import shutil
import zipfile
from pathlib import Path
from processor import LaTeXImageProcessor
from config import STREAMLIT_CONFIG

# Page config
st.set_page_config(
    page_title=STREAMLIT_CONFIG['page_title'],
    page_icon=STREAMLIT_CONFIG['page_icon'],
    layout=STREAMLIT_CONFIG['layout'],
    initial_sidebar_state=STREAMLIT_CONFIG['initial_sidebar_state']
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #2E86AB;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .info-box {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
        margin: 10px 0;
    }
    .success-box {
        background-color: #d4edda;
        padding: 15px;
        border-radius: 5px;
        border-left: 5px solid #28a745;
    }
    .error-box {
        background-color: #f8d7da;
        padding: 15px;
        border-radius: 5px;
        border-left: 5px solid #dc3545;
    }
    .warning-box {
        background-color: #fff3cd;
        padding: 15px;
        border-radius: 5px;
        border-left: 5px solid #ffc107;
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown("<h1 class='main-header'>üñºÔ∏è LaTeX Image Processor</h1>", unsafe_allow_html=True)
st.markdown("### C√¥ng c·ª• x·ª≠ l√Ω h√¨nh ·∫£nh TikZ v√† chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh trong file LaTeX")

# Sidebar - H∆∞·ªõng d·∫´n
with st.sidebar:
    st.markdown("## üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
    
    with st.expander("üéØ M·ª•c ƒë√≠ch"):
        st.markdown("""
        Tool n√†y gi√∫p:
        - Compile code TikZ th√†nh h√¨nh ·∫£nh WEBP
        - Copy v√† rename h√¨nh ·∫£nh c√≥ s·∫µn theo subcount
        - Thay th·∫ø TikZ v√† c·∫≠p nh·∫≠t path h√¨nh trong file .tex
        - T·ªï ch·ª©c h√¨nh ·∫£nh v√†o th∆∞ m·ª•c images/
        """)
    
    with st.expander("üìù Quy t·∫Øc ƒë·∫∑t t√™n"):
        st.markdown("""
        **V·ªõi subcount [XX.N]:**
        - C√¢u h·ªèi: `XXN-QUES.webp`
        - L·ªùi gi·∫£i: `XXN-SOL.webp`
        - Nhi·ªÅu h√¨nh: `XXN-QUES-1.webp`, `XXN-QUES-2.webp`
        
        **Kh√¥ng c√≥ subcount:**
        - Format: `t√™nfile_cauX-TYPE.webp`
        """)
    
    with st.expander("‚öôÔ∏è C·∫•u h√¨nh"):
        st.markdown("""
        - **Compiler:** pdflatex
        - **Format:** WEBP
        - **DPI:** 300
        - **Quality:** 95%
        """)
    
    st.markdown("---")
    st.markdown("### üõ†Ô∏è Y√™u c·∫ßu h·ªá th·ªëng")
    st.markdown("""
    - LaTeX distribution (MiKTeX/TeX Live)
    - Python 3.9+
    - poppler-utils (cho pdf2image)
    """)

# Main content
tab1, tab2, tab3 = st.tabs(["üì§ Upload & X·ª≠ l√Ω", "üìä K·∫øt qu·∫£", "‚ÑπÔ∏è Th√¥ng tin"])

with tab1:
    st.markdown("### Upload file LaTeX ƒë·ªÉ x·ª≠ l√Ω")
    
    # Upload file
    uploaded_file = st.file_uploader(
        "Ch·ªçn file .tex",
        type=['tex'],
        help="File LaTeX ch·ª©a c√°c c√¢u h·ªèi v·ªõi TikZ ho·∫∑c h√¨nh ·∫£nh"
    )
    
    if uploaded_file:
        st.success(f"‚úÖ ƒê√£ t·∫£i l√™n: {uploaded_file.name}")
        
        # Hi·ªÉn th·ªã th√¥ng tin file
        col1, col2 = st.columns(2)
        with col1:
            st.metric("T√™n file", uploaded_file.name)
        with col2:
            st.metric("K√≠ch th∆∞·ªõc", f"{uploaded_file.size / 1024:.2f} KB")
        
        # Preview n·ªôi dung
        with st.expander("üëÅÔ∏è Xem tr∆∞·ªõc n·ªôi dung file"):
            content = uploaded_file.read().decode('utf-8')
            uploaded_file.seek(0)  # Reset pointer
            st.text_area("N·ªôi dung:", content[:2000] + "..." if len(content) > 2000 else content, height=300)
        
        # N√∫t x·ª≠ l√Ω
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω", type="primary", use_container_width=True):
                with st.spinner("ƒêang x·ª≠ l√Ω file LaTeX..."):
                    # T·∫°o temp file
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.tex') as tmp_file:
                        tmp_file.write(uploaded_file.read())
                        tmp_path = tmp_file.name
                    
                    # X·ª≠ l√Ω file
                    processor = LaTeXImageProcessor()
                    results = processor.process_file(tmp_path)
                    
                    # L∆∞u k·∫øt qu·∫£ v√†o session state
                    st.session_state['results'] = results
                    st.session_state['processed'] = True
                    
                    # Cleanup temp file
                    Path(tmp_path).unlink()
                    
                    # Chuy·ªÉn sang tab k·∫øt qu·∫£
                    st.success("‚úÖ X·ª≠ l√Ω ho√†n t·∫•t!")
                    st.balloons()

with tab2:
    if 'results' in st.session_state and st.session_state.get('processed'):
        results = st.session_state['results']
        
        if 'error' in results:
            st.error(f"‚ùå L·ªói: {results['error']}")
        else:
            st.markdown("### üìä K·∫øt qu·∫£ x·ª≠ l√Ω")
            
            # Th·ªëng k√™ t·ªïng quan
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("üìù T·ªïng c√¢u h·ªèi", results['total_questions'])
            with col2:
                st.metric("üé® TikZ ƒë√£ compile", results['tikz_compiled'])
            with col3:
                st.metric("üñºÔ∏è H√¨nh ƒë√£ x·ª≠ l√Ω", results['images_processed'])
            with col4:
                st.metric("‚ö†Ô∏è L·ªói", results['errors'])
            
            # Chi ti·∫øt t·ª´ng c√¢u
            with st.expander("üìã Chi ti·∫øt t·ª´ng c√¢u h·ªèi"):
                for q in results['questions']:
                    col1, col2, col3 = st.columns([1, 2, 3])
                    with col1:
                        st.write(f"**C√¢u {q['index']}**")
                    with col2:
                        st.write(f"Subcount: {q.get('subcount', 'N/A')}")
                    with col3:
                        stats = []
                        if q['question_tikz'] > 0:
                            stats.append(f"TikZ c√¢u h·ªèi: {q['question_tikz']}")
                        if q['solution_tikz'] > 0:
                            stats.append(f"TikZ l·ªùi gi·∫£i: {q['solution_tikz']}")
                        if q['existing_images'] > 0:
                            stats.append(f"H√¨nh c√≥ s·∫µn: {q['existing_images']}")
                        st.write(" | ".join(stats) if stats else "Kh√¥ng c√≥ h√¨nh")
                    
                    if q.get('errors'):
                        st.error(f"L·ªói: {', '.join(q['errors'])}")
            
            # Download section
            st.markdown("### üíæ T·∫£i xu·ªëng k·∫øt qu·∫£")
            
            output_dir = Path(results['output_dir'])
            
            col1, col2 = st.columns(2)
            
            with col1:
                # T·∫°o zip file
                zip_path = output_dir.parent / f"{output_dir.name}.zip"
                with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for file_path in output_dir.rglob('*'):
                        if file_path.is_file():
                            arcname = file_path.relative_to(output_dir.parent)
                            zipf.write(file_path, arcname)
                
                # Download button
                with open(zip_path, 'rb') as f:
                    st.download_button(
                        label="üì¶ T·∫£i xu·ªëng t·∫•t c·∫£ (ZIP)",
                        data=f.read(),
                        file_name=f"{output_dir.name}.zip",
                        mime="application/zip",
                        use_container_width=True
                    )
            
            with col2:
                # Download processed .tex file
                processed_tex = Path(results['processed_file'])
                if processed_tex.exists():
                    with open(processed_tex, 'rb') as f:
                        st.download_button(
                            label="üìÑ T·∫£i file .tex ƒë√£ x·ª≠ l√Ω",
                            data=f.read(),
                            file_name=processed_tex.name,
                            mime="text/plain",
                            use_container_width=True
                        )
            
            # Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n output
            st.info(f"üìÅ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u t·∫°i: `{output_dir}`")
    else:
        st.info("üëÜ Vui l√≤ng upload v√† x·ª≠ l√Ω file tr∆∞·ªõc")

with tab3:
    st.markdown("### ‚ÑπÔ∏è Th√¥ng tin v·ªÅ tool")
    
    st.markdown("""
    #### üéØ Ch·ª©c nƒÉng ch√≠nh:
    1. **Parse file LaTeX** ƒë·ªÉ t√¨m c√°c block `\\begin{ex}...\\end{ex}`
    2. **Tr√≠ch xu·∫•t subcount** d·∫°ng `[XX.N]` t·ª´ m·ªói c√¢u h·ªèi
    3. **Compile TikZ** th√†nh h√¨nh ·∫£nh WEBP ch·∫•t l∆∞·ª£ng cao
    4. **X·ª≠ l√Ω h√¨nh c√≥ s·∫µn**: copy v√† rename theo quy t·∫Øc
    5. **C·∫≠p nh·∫≠t file .tex** v·ªõi ƒë∆∞·ªùng d·∫´n h√¨nh m·ªõi
    6. **T·∫°o b√°o c√°o** chi ti·∫øt v·ªÅ qu√° tr√¨nh x·ª≠ l√Ω
    
    #### üîß C√¥ng ngh·ªá s·ª≠ d·ª•ng:
    - **Python 3.9+** v·ªõi Streamlit framework
    - **pdflatex** ƒë·ªÉ compile LaTeX
    - **pdf2image** & **Pillow** ƒë·ªÉ x·ª≠ l√Ω h√¨nh ·∫£nh
    - **regex** ƒë·ªÉ parse LaTeX ph·ª©c t·∫°p
    
    #### üìù L∆∞u √Ω:
    - File g·ªëc s·∫Ω ƒë∆∞·ª£c backup v·ªõi prefix `GOC-`
    - N·∫øu compile TikZ th·∫•t b·∫°i, code TikZ s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n
    - H√¨nh ·∫£nh output c√≥ format WEBP v·ªõi ch·∫•t l∆∞·ª£ng 95%
    - Th∆∞ m·ª•c output c√≥ c√πng t√™n v·ªõi file .tex
    
    #### üë®‚Äçüíª Ph√°t tri·ªÉn b·ªüi:
    H·ªá th·ªëng NyNus - LaTeX Question Bank
    """)
    
    # System check
    st.markdown("### üîç Ki·ªÉm tra h·ªá th·ªëng")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Check LaTeX
        import subprocess
        try:
            result = subprocess.run(['pdflatex', '--version'], capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                st.success("‚úÖ pdflatex ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            else:
                st.error("‚ùå pdflatex ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        except:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y pdflatex")
    
    with col2:
        # Check poppler
        try:
            from pdf2image import convert_from_path
            st.success("‚úÖ pdf2image v√† poppler ho·∫°t ƒë·ªông")
        except:
            st.error("‚ùå C·∫ßn c√†i ƒë·∫∑t poppler-utils")

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #888;'>
    <small>LaTeX Image Processor v1.0.0 | ¬© 2025 NyNus System</small>
</div>
""", unsafe_allow_html=True)
