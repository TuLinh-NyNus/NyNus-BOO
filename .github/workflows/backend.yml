name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'packages/proto/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'packages/proto/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
        go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

    - name: Generate proto files
      run: |
        chmod +x tools/scripts/gen-proto.sh
        make proto

    - name: Format generated proto files
      working-directory: ./apps/backend
      run: go fmt ./pkg/proto/...

    - name: Download dependencies
      working-directory: ./apps/backend
      run: go mod download

    - name: Run tests
      working-directory: ./apps/backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_NAME: test_db
        JWT_SECRET: test-secret
      run: go test ./internal/... -v -race -coverprofile=coverage.out

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/backend/coverage.out
        flags: backend

    - name: Build binary
      working-directory: ./apps/backend
      run: go build -o bin/grpc-server cmd/main.go

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
        go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

    - name: Generate proto files
      run: |
        chmod +x tools/scripts/gen-proto.sh
        make proto

    - name: Format generated proto files
      working-directory: ./apps/backend
      run: go fmt ./pkg/proto/...

    - name: Download dependencies
      working-directory: ./apps/backend
      run: go mod download

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./apps/backend

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
        go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

    - name: Generate proto files
      run: |
        chmod +x tools/scripts/gen-proto.sh
        make proto

    - name: Format generated proto files
      working-directory: ./apps/backend
      run: go fmt ./pkg/proto/...

    - name: Download dependencies
      working-directory: ./apps/backend
      run: go mod download
    
    - name: Install Gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest
    
    - name: Run Gosec Security Scanner
      working-directory: ./apps/backend
      run: gosec -no-fail ./...
      continue-on-error: true

  build-docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/backend/Dockerfile
        push: false
        tags: exam-bank-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
