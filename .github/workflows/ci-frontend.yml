# Frontend Continuous Integration Pipeline
# Handles Next.js frontend linting, type checking, testing, and security scanning

name: Frontend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/frontend/**'
      - 'packages/proto/**'
      - 'docker/frontend*.Dockerfile'
      - '.github/workflows/ci-frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/frontend/**'
      - 'packages/proto/**'
      - 'docker/frontend*.Dockerfile'
      - '.github/workflows/ci-frontend.yml'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'
  WORKING_DIR: 'apps/frontend'

jobs:
  # Setup and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        id: cache
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm lint || echo "Linting completed with warnings"

      - name: Run Prettier check
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm exec prettier --check "src/**/*.{ts,tsx,js,jsx,json,md,css}" 2>/dev/null || echo "Prettier check completed"

      - name: Check unused files and circular dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm exec madge --circular --extensions ts,tsx src/ || true

  # TypeScript type checking
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Buf CLI
        run: |
          # Install buf CLI for protobuf generation
          BUF_VERSION="1.47.2"
          echo "üì¶ Installing Buf CLI v${BUF_VERSION}..."
          sudo curl -sSL "https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-$(uname -s)-$(uname -m)" -o /usr/local/bin/buf
          sudo chmod +x /usr/local/bin/buf
          
          # Verify installation
          if ! buf --version; then
            echo "‚ùå Buf CLI installation failed"
            exit 1
          fi
          
          echo "‚úÖ Buf CLI installed successfully"

      - name: Generate protobuf files for frontend
        working-directory: ./packages/proto
        run: |
          echo "üîß Generating protobuf files..."
          
          # Create output directory if not exists
          mkdir -p ../../apps/frontend/src/generated
          
          # Generate with better error handling
          if ! buf generate --template buf.gen.frontend.yaml; then
            echo "‚ùå Buf generate failed"
            echo "Checking buf.gen.frontend.yaml configuration..."
            cat buf.gen.frontend.yaml
            echo ""
            echo "Checking buf.yaml configuration..."
            cat buf.yaml
            exit 1
          fi
          
          echo "‚úÖ Protobuf files generated successfully"
          
      - name: Verify generated files
        run: |
          echo "üìã Verifying generated protobuf files..."
          
          if [ ! -d "apps/frontend/src/generated" ]; then
            echo "‚ùå Generated directory not found"
            exit 1
          fi
          
          # Count generated files
          TS_FILES=$(find apps/frontend/src/generated -name "*.ts" | wc -l)
          JS_FILES=$(find apps/frontend/src/generated -name "*.js" | wc -l)
          
          echo "Generated files:"
          echo "  - TypeScript files: ${TS_FILES}"
          echo "  - JavaScript files: ${JS_FILES}"
          
          if [ "$TS_FILES" -eq 0 ] || [ "$JS_FILES" -eq 0 ]; then
            echo "‚ùå No TypeScript or JavaScript files generated"
            echo "Directory contents:"
            ls -la apps/frontend/src/generated/
            exit 1
          fi
          
          echo "‚úÖ Generated files verified successfully"
          echo ""
          echo "Sample files:"
          find apps/frontend/src/generated -name "*.ts" -o -name "*.js" | head -10

      - name: Generate Prisma Client
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"
        run: pnpm prisma:generate

      - name: Run TypeScript type check
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm type-check

      - name: Generate types report
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm type-check 2>&1 | tee type-check-report.txt || true

      - name: Upload type check report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: type-check-report
          path: ${{ env.WORKING_DIR }}/type-check-report.txt

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Buf CLI
        run: |
          BUF_VERSION="1.47.2"
          sudo curl -sSL "https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-$(uname -s)-$(uname -m)" -o /usr/local/bin/buf
          sudo chmod +x /usr/local/bin/buf
          buf --version || { echo "‚ùå Buf CLI installation failed"; exit 1; }

      - name: Generate protobuf files for frontend
        working-directory: ./packages/proto
        run: |
          mkdir -p ../../apps/frontend/src/generated
          buf generate --template buf.gen.frontend.yaml || { echo "‚ùå Buf generate failed"; exit 1; }

      - name: Generate Prisma Client
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"
        run: pnpm prisma:generate

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm test:unit --coverage --passWithNoTests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.WORKING_DIR }}/coverage/coverage-final.json
          flags: frontend-unit
          name: frontend-unit-tests
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-unit-coverage
          path: ${{ env.WORKING_DIR }}/coverage/

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint, type-check, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Buf CLI
        run: |
          BUF_VERSION="1.47.2"
          sudo curl -sSL "https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-$(uname -s)-$(uname -m)" -o /usr/local/bin/buf
          sudo chmod +x /usr/local/bin/buf
          buf --version || { echo "‚ùå Buf CLI installation failed"; exit 1; }

      - name: Generate protobuf files for frontend
        working-directory: ./packages/proto
        run: |
          mkdir -p ../../apps/frontend/src/generated
          buf generate --template buf.gen.frontend.yaml || { echo "‚ùå Buf generate failed"; exit 1; }

      - name: Generate Prisma Client
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"
        run: pnpm prisma:generate

      - name: Build application
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"
          NEXTAUTH_URL: "http://localhost:3000"
          NEXTAUTH_SECRET: "test-secret-key-for-ci-build-min-32-chars-long"
          NEXT_PUBLIC_API_URL: "http://localhost:8080"
          NEXT_PUBLIC_GRPC_URL: "http://localhost:8080"
          SKIP_TYPE_CHECK: "true"
        run: pnpm build

      - name: Generate search index
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm build:search-index

      - name: Check build size
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          du -sh .next/
          du -sh node_modules/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.WORKING_DIR }}/.next/
          retention-days: 7

  # E2E Tests with Playwright
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E tests
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm test:e2e --project=${{ matrix.browser }} || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: ${{ env.WORKING_DIR }}/playwright-report/
          retention-days: 7

  # Docker build test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-frontend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/frontend
          file: docker/frontend.Dockerfile
          platforms: linux/amd64
          push: false
          tags: |
            exam-bank-frontend:test
            exam-bank-frontend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm audit --audit-level=high || true

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=apps/frontend/package.json --severity-threshold=high
        continue-on-error: true

  # Summary status
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, type-check, unit-tests, build, e2e-tests, docker, security]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" || \
                "${{ needs.type-check.result }}" == "failure" || \
                "${{ needs.unit-tests.result }}" == "failure" || \
                "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå Frontend CI failed"
            exit 1
          else
            echo "‚úÖ Frontend CI passed"
          fi


