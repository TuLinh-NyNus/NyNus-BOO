# Frontend Continuous Integration Pipeline
# Handles Next.js frontend linting, type checking, testing, and security scanning

name: Frontend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/frontend/**'
      - 'packages/proto/**'
      - 'docker/frontend*.Dockerfile'
      - '.github/workflows/ci-frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/frontend/**'
      - 'packages/proto/**'
      - 'docker/frontend*.Dockerfile'
      - '.github/workflows/ci-frontend.yml'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'
  WORKING_DIR: 'apps/frontend'
  # Consistent cache keys across all jobs
  CACHE_NODE_MODULES_KEY: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

jobs:
  # Setup and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache pnpm store
        uses: actions/cache@v4
        id: cache
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15  # ‚úÖ PREVENT HANGING
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm lint || echo "Linting completed with warnings"

      - name: Run Prettier check
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm exec prettier --check "src/**/*.{ts,tsx,js,jsx,json,md,css}" 2>/dev/null || echo "Prettier check completed"

      - name: Check unused files and circular dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm exec madge --circular --extensions ts,tsx src/ || true

  # TypeScript type checking
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 15  # ‚úÖ PREVENT HANGING
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Buf CLI
        run: |
          BUF_VERSION="1.47.2"
          BUF_ARCH="$(uname -s)-$(uname -m)"
          BUF_URL="https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-${BUF_ARCH}"
          
          echo "üì¶ Installing Buf CLI v${BUF_VERSION}..."
          
          if ! timeout 30 sudo curl -sSL --retry 3 --retry-delay 2 "${BUF_URL}" -o /usr/local/bin/buf; then
            echo "‚ùå Failed to download Buf CLI"
            exit 1
          fi
          
          sudo chmod +x /usr/local/bin/buf
          
          if ! buf --version; then
            echo "‚ùå Buf CLI installation failed"
            exit 1
          fi
          
          echo "‚úÖ Buf CLI installed: $(buf --version)"

      - name: Generate protobuf files for frontend
        working-directory: ./packages/proto
        run: |
          mkdir -p ../../apps/frontend/src/generated
          
          if ! buf generate --template buf.gen.frontend.yaml; then
            echo "‚ùå Buf generate failed"
            exit 1
          fi
          
          echo "‚úÖ Protobuf files generated"
          
      - name: Verify generated files
        run: |
          echo "üìã Verifying generated protobuf files..."
          
          # Check if generated directory exists
          if [ ! -d "apps/frontend/src/generated" ]; then
            echo "‚ùå Generated directory not found: apps/frontend/src/generated"
            echo "Current structure:"
            ls -la apps/frontend/src/ | head -20
            exit 1
          fi
          
          # Count generated files
          TS_FILES=$(find apps/frontend/src/generated -name "*.ts" -type f 2>/dev/null | wc -l)
          JS_FILES=$(find apps/frontend/src/generated -name "*.js" -type f 2>/dev/null | wc -l)
          TOTAL_FILES=$((TS_FILES + JS_FILES))
          
          echo "Generated files summary:"
          echo "  - TypeScript files: ${TS_FILES}"
          echo "  - JavaScript files: ${JS_FILES}"
          echo "  - Total files: ${TOTAL_FILES}"
          
          # Verify at least some files were generated (critical check)
          if [ "$TOTAL_FILES" -lt 1 ]; then
            echo "‚ùå No protobuf files generated (expected at least 1 file)"
            echo "Directory contents:"
            ls -la apps/frontend/src/generated/
            exit 1
          fi
          
          # Verify proto message files exist
          if ! find apps/frontend/src/generated -name "*pb.ts" -o -name "*pb.js" 2>/dev/null | grep -q .; then
            echo "‚ö†Ô∏è Warning: Expected *pb.ts or *pb.js files not found"
            echo "Generated files:"
            find apps/frontend/src/generated -type f 2>/dev/null | head -10
          fi
          
          echo "‚úÖ Generated protobuf files verified successfully"
          echo ""
          echo "Sample generated files (max 10):"
          find apps/frontend/src/generated -type f 2>/dev/null | head -10

      - name: Generate Prisma Client
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "üîß Generating Prisma Client..."
          
          if ! pnpm prisma:generate; then
            echo "‚ùå Prisma generation failed - stopping type-check"
            exit 1
          fi
          
          # Verify generated files exist
          if [ ! -d "node_modules/.prisma/client" ]; then
            echo "‚ùå Prisma client not generated"
            exit 1
          fi
          
          echo "‚úÖ Prisma client generated"

      - name: Run TypeScript type check
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm type-check

      - name: Generate types report
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm type-check 2>&1 | tee type-check-report.txt || true

      - name: Upload type check report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: type-check-report
          path: ${{ env.WORKING_DIR }}/type-check-report.txt

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20  # ‚úÖ PREVENT HANGING
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Buf CLI
        run: |
          BUF_VERSION="1.47.2"
          BUF_ARCH="$(uname -s)-$(uname -m)"
          BUF_URL="https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-${BUF_ARCH}"
          
          echo "üì¶ Installing Buf CLI v${BUF_VERSION}..."
          
          if ! timeout 30 sudo curl -sSL --retry 3 --retry-delay 2 "${BUF_URL}" -o /usr/local/bin/buf; then
            echo "‚ùå Failed to download Buf CLI"
            exit 1
          fi
          
          sudo chmod +x /usr/local/bin/buf
          
          if ! buf --version; then
            echo "‚ùå Buf CLI installation failed"
            exit 1
          fi
          
          echo "‚úÖ Buf CLI installed: $(buf --version)"

      - name: Generate protobuf files for frontend
        working-directory: ./packages/proto
        run: |
          mkdir -p ../../apps/frontend/src/generated
          
          if ! buf generate --template buf.gen.frontend.yaml; then
            echo "‚ùå Buf generate failed"
            exit 1
          fi
          
          echo "‚úÖ Protobuf files generated"

      - name: Generate Prisma Client
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"
        run: pnpm prisma:generate

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "üß™ Running unit tests..."
          
          # Verify test files exist
          if ! find src -name "*.test.ts" -o -name "*.test.tsx" 2>/dev/null | grep -q .; then
            echo "‚ùå No test files found in src/"
            exit 1
          fi
          
          # Run tests with coverage requirements
          if ! pnpm test:unit --coverage; then
            echo "‚ùå Unit tests failed"
            exit 1
          fi
          
          # Verify coverage reports generated
          if [ ! -f "coverage/coverage-final.json" ]; then
            echo "‚ùå Coverage report not generated"
            exit 1
          fi
          
          echo "‚úÖ Unit tests passed with coverage"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.WORKING_DIR }}/coverage/coverage-final.json
          flags: frontend-unit
          name: frontend-unit-tests
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-unit-coverage
          path: ${{ env.WORKING_DIR }}/coverage/

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 20  # ‚úÖ PREVENT HANGING
    needs: [lint, type-check, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Buf CLI
        run: |
          BUF_VERSION="1.47.2"
          BUF_ARCH="$(uname -s)-$(uname -m)"
          BUF_URL="https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-${BUF_ARCH}"
          
          echo "üì¶ Installing Buf CLI v${BUF_VERSION} (${BUF_ARCH})..."
          
          # Download with timeout and retry
          if ! timeout 30 sudo curl -sSL --retry 3 --retry-delay 2 "${BUF_URL}" -o /usr/local/bin/buf; then
            echo "‚ùå Failed to download Buf CLI from: ${BUF_URL}"
            exit 1
          fi
          
          sudo chmod +x /usr/local/bin/buf
          
          # Verify installation
          if ! buf --version; then
            echo "‚ùå Buf CLI installation failed"
            rm -f /usr/local/bin/buf
            exit 1
          fi
          
          echo "‚úÖ Buf CLI installed: $(buf --version)"

      - name: Generate protobuf files for frontend
        working-directory: ./packages/proto
        run: |
          mkdir -p ../../apps/frontend/src/generated
          buf generate --template buf.gen.frontend.yaml || { echo "‚ùå Buf generate failed"; exit 1; }

      - name: Generate Prisma Client
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"
        run: pnpm prisma:generate

      - name: Build application
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DATABASE_URL: "postgresql://user:password@localhost:5432/test_db"
          NEXTAUTH_URL: "http://localhost:3000"
          NEXTAUTH_SECRET: "test-secret-key-for-ci-build-min-32-chars-long"
          NEXT_PUBLIC_API_URL: "http://localhost:8080"
          NEXT_PUBLIC_GRPC_URL: "http://localhost:8080"
          SKIP_TYPE_CHECK: "true"
        run: pnpm build

      - name: Generate search index
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm build:search-index

      - name: Check build size
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          du -sh .next/
          du -sh node_modules/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.WORKING_DIR }}/.next/
          retention-days: 7

  # E2E Tests with Playwright
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    timeout-minutes: 20  # ‚úÖ PREVENT HANGING
    needs: build
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: ${{ env.WORKING_DIR }}
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E tests
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "üß™ Running E2E tests for ${{ matrix.browser }} browser..."
          
          # Run tests and fail if they fail
          if ! pnpm test:e2e --project=${{ matrix.browser }}; then
            echo "‚ùå E2E tests failed for ${{ matrix.browser }} browser"
            exit 1
          fi
          
          echo "‚úÖ E2E tests passed for ${{ matrix.browser }} browser"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: ${{ env.WORKING_DIR }}/playwright-report/
          retention-days: 7

  # Docker build test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15  # ‚úÖ PREVENT HANGING
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-frontend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/frontend
          file: docker/frontend.Dockerfile
          platforms: linux/amd64
          push: false
          tags: |
            exam-bank-frontend:test
            exam-bank-frontend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15  # ‚úÖ PREVENT HANGING
    needs: setup
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.WORKING_DIR }}/node_modules
            ~/.next/cache
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "[INFO] Running npm audit for security vulnerabilities..."
          
          # Run audit with high severity threshold and fail on vulnerabilities
          if pnpm audit --audit-level=high; then
            echo "[OK] No high-severity vulnerabilities found"
          else
            echo "[ERROR] Security vulnerabilities detected!"
            exit 1
          fi

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: false  # ‚úÖ FAIL ON SECURITY ISSUES

  # Summary status
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, type-check, unit-tests, build, e2e-tests, docker, security]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" || \
                "${{ needs.type-check.result }}" == "failure" || \
                "${{ needs.unit-tests.result }}" == "failure" || \
                "${{ needs.build.result }}" == "failure" ]]; then
            echo "‚ùå Frontend CI failed"
            exit 1
          else
            echo "‚úÖ Frontend CI passed"
          fi

  # Notify on failure
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [ci-status]
    if: failure()
    steps:
      - name: Notify Slack on CI failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK_CICD }}
          text: |
            üö® Frontend CI Pipeline Failed
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        continue-on-error: true


