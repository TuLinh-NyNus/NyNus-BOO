# Staging Continuous Deployment Pipeline
# Automatically deploys to staging environment when all CI checks pass on main branch
# NOTE: This workflow requires GitHub Secrets to be configured. See docs/deployment/SECRETS_SETUP.md

name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["Backend CI", "Frontend CI"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Check if deployment is configured
  check-config:
    name: Check Deployment Configuration
    runs-on: ubuntu-latest
    outputs:
      is-configured: ${{ steps.check.outputs.configured }}
    steps:
      - name: Check if deployment secrets are configured
        id: check
        run: |
          # Check if critical secrets exist
          if [[ -z "${{ secrets.DEPLOY_METHOD }}" ]]; then
            echo "⚠️ DEPLOY_METHOD secret not configured"
            echo "configured=false" >> $GITHUB_OUTPUT
            echo "::warning::Deployment skipped - secrets not configured. See docs/deployment/SECRETS_SETUP.md"
          else
            echo "✅ Deployment configured"
            echo "configured=true" >> $GITHUB_OUTPUT
          fi

  # Check CI status from previous workflows
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    needs: check-config
    if: needs.check-config.outputs.is-configured == 'true'
    outputs:
      ci-passed: ${{ steps.check.outputs.passed }}
    steps:
      - name: Check workflow status
        id: check
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" || "${{ github.event_name }}" == "push" ]]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
          fi

  # Build and push Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [check-config, check-ci]
    if: needs.check-config.outputs.is-configured == 'true' && needs.check-ci.outputs.ci-passed == 'true'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - name: backend
            file: docker/backend.Dockerfile
            context: .
          - name: frontend
            file: docker/frontend.Dockerfile
            context: apps/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.name }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=staging-
            type=raw,value=staging-latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine deploy method
        id: deploy-method
        run: |
          DEPLOY_METHOD="${{ secrets.DEPLOY_METHOD }}"
          if [[ -z "$DEPLOY_METHOD" ]]; then
            echo "⚠️ DEPLOY_METHOD not set, defaulting to skip"
            DEPLOY_METHOD="skip"
          fi
          echo "method=${DEPLOY_METHOD}" >> $GITHUB_OUTPUT
          echo "is_docker_compose=$([[ "$DEPLOY_METHOD" == "docker-compose" ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "is_kubernetes=$([[ "$DEPLOY_METHOD" == "kubernetes" ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        if: secrets.AWS_ACCESS_KEY_ID != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
        continue-on-error: true

      - name: Deploy via Docker Compose (if self-hosted)
        if: steps.deploy-method.outputs.is_docker_compose == 'true' && secrets.STAGING_HOST != ''
        run: |
          scp -o StrictHostKeyChecking=no \
              -i ${{ secrets.DEPLOY_SSH_KEY }} \
              docker/compose/docker-compose.yml \
              docker/compose/docker-compose.prod.yml \
              ${{ secrets.STAGING_HOST }}:/opt/exam-bank-system/
          
          ssh -o StrictHostKeyChecking=no \
              -i ${{ secrets.DEPLOY_SSH_KEY }} \
              ${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/exam-bank-system
            docker-compose -f docker/compose/docker-compose.yml \
                          -f docker/compose/docker-compose.prod.yml \
                          pull
            docker-compose -f docker/compose/docker-compose.yml \
                          -f docker/compose/docker-compose.prod.yml \
                          up -d
            docker system prune -f
          EOF
        continue-on-error: true

      - name: Deploy to Kubernetes (if using K8s)
        if: steps.deploy-method.outputs.is_kubernetes == 'true' && secrets.KUBE_CONFIG_STAGING != ''
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update image tags
          kubectl set image deployment/backend \
            backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:staging-latest \
            --record -n staging
          
          kubectl set image deployment/frontend \
            frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:staging-latest \
            --record -n staging
          
          # Wait for rollout
          kubectl rollout status deployment/backend -n staging --timeout=300s
          kubectl rollout status deployment/frontend -n staging --timeout=300s
        continue-on-error: true

      - name: Verify deployment
        if: secrets.STAGING_API_URL != ''
        run: |
          # Wait for services to be healthy
          for i in {1..30}; do
            if curl -f http://${{ secrets.STAGING_API_URL }}/health; then
              echo "✅ API health check passed"
              break
            else
              echo "⏳ Waiting for API to be ready... ($i/30)"
              sleep 10
            fi
          done
        continue-on-error: true

      - name: Deployment summary
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Method**: ${{ steps.deploy-method.outputs.method }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Images Built**: backend, frontend" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ secrets.STAGING_URL }}" != "" ]]; then
            echo "- **Staging URL**: https://${{ secrets.STAGING_URL }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Staging URL**: Not configured" >> $GITHUB_STEP_SUMMARY
          fi

  # Run smoke tests (only if configured)
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: secrets.STAGING_URL != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd apps/frontend
          npm install -g newman
        continue-on-error: true

      - name: Run API smoke tests
        if: hashFiles('postman/smoke-tests.json') != ''
        run: |
          newman run postman/smoke-tests.json \
            --environment postman/staging.postman_environment.json \
            --reporters cli,json
        continue-on-error: true

      - name: Test frontend accessibility
        if: hashFiles('.pa11yci.json') != ''
        run: |
          npm install -g pa11y-ci
          pa11y-ci --config .pa11yci.json https://${{ secrets.STAGING_URL }}
        continue-on-error: true

  # Send notification (only if webhook configured)
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests]
    if: always() && secrets.SLACK_WEBHOOK_STAGING != ''
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_STAGING }}
          text: |
            🚀 Staging Deployment Report
            Status: ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            URL: https://${{ secrets.STAGING_URL }}
        if: always()




