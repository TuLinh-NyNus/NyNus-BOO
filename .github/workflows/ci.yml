name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  proto-generation:
    name: Generate Protocol Buffers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: '1.23.5'
      
      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
      
      - name: Install protoc plugins for Go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
      
      - name: Generate Go protobuf code
        run: |
          chmod +x tools/scripts/gen-proto.sh
          ./tools/scripts/gen-proto.sh
      
      - name: Install Buf CLI for frontend proto generation
        run: |
          BUF_VERSION="1.47.2"
          curl -sSL "https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-$(uname -s)-$(uname -m)" -o /usr/local/bin/buf
          chmod +x /usr/local/bin/buf
          buf --version
      
      - name: Generate TypeScript protobuf code for frontend
        working-directory: packages/proto
        run: |
          echo "🔧 Generating frontend protobuf files..."
          mkdir -p ../../apps/frontend/src/generated
          buf generate --template buf.gen.frontend.yaml
          echo "✅ Frontend protobuf files generated"
      
      - name: Verify generated frontend files
        run: |
          echo "📋 Generated frontend proto files:"
          ls -la apps/frontend/src/generated/ || echo "⚠️ No files generated"
          find apps/frontend/src/generated -type f | head -20
      
      - name: Upload generated proto files for frontend
        uses: actions/upload-artifact@v4
        with:
          name: proto-generated-frontend
          path: apps/frontend/src/generated/
          retention-days: 1
          if-no-files-found: error

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: proto-generation
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: exam_bank_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v4
        with:
          go-version: '1.23.5'
      
      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
      
      - name: Install protoc plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Generate proto files for backend
        run: |
          chmod +x tools/scripts/gen-proto.sh
          ./tools/scripts/gen-proto.sh

      - name: Download dependencies
        working-directory: ./apps/backend
        run: go mod download

      - name: Run backend tests with coverage
        working-directory: ./apps/backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_NAME: exam_bank_test
          DB_SSLMODE: disable
          JWT_SECRET: test-secret-for-ci
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./internal/...

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/backend/coverage.out
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Run LaTeX parser tests (if exists)
        working-directory: ./apps/backend
        run: |
          if ls ./internal/latex/*_test.go 1> /dev/null 2>&1; then
            echo "✅ Found LaTeX tests, running..."
            go test -v -cover ./internal/latex/...
          else
            echo "⚠️ No LaTeX test files found, skipping"
          fi

  tex-live-check:
    name: TeX Live Availability Check (Optional)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Check TeX Live
        run: |
          if command -v lualatex &> /dev/null; then
            echo "✅ TeX Live is available"
            lualatex --version
          else
            echo "⚠️ TeX Live is not installed - Image processing will not work"
          fi
        continue-on-error: true
      - name: Check ImageMagick
        run: |
          if command -v magick &> /dev/null; then
            echo "✅ ImageMagick is available"
            magick -version
          else
            echo "⚠️ ImageMagick is not installed - Image conversion will not work"
          fi
        continue-on-error: true

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: proto-generation
    steps:
      - uses: actions/checkout@v4
      
      - name: Download generated proto files
        uses: actions/download-artifact@v4
        with:
          name: proto-generated-frontend
          path: apps/frontend/src/generated/
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ./apps/frontend
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        working-directory: ./apps/frontend
        env:
          DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/exam_bank_test"
        run: pnpm prisma:generate

      - name: Type check
        working-directory: ./apps/frontend
        run: pnpm type-check
        continue-on-error: false

      - name: Lint
        working-directory: ./apps/frontend
        run: pnpm lint
        continue-on-error: false

      - name: Run frontend tests with coverage
        working-directory: ./apps/frontend
        run: pnpm test:coverage
        continue-on-error: false

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./apps/frontend/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: exam_bank_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: actions/setup-go@v4
        with:
          go-version: '1.23.5'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install frontend dependencies
        working-directory: ./apps/frontend
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: ./apps/frontend
        run: pnpm playwright:install

      - name: Start backend server
        working-directory: ./apps/backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_NAME: exam_bank_test
          DB_SSLMODE: disable
          JWT_SECRET: test-secret-for-e2e
          GRPC_PORT: 50051
          HTTP_PORT: 8080
        run: |
          go build -o bin/server cmd/main.go
          ./bin/server &
          sleep 5

      - name: Run E2E tests
        working-directory: ./apps/frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080
          NEXT_PUBLIC_GRPC_URL: http://localhost:8080
        run: pnpm test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: ./apps/frontend/playwright-report/
          retention-days: 30

