# Backend Continuous Integration Pipeline
# Handles Go backend linting, testing, and security scanning

name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'packages/proto/**'
      - 'docker/backend*.Dockerfile'
      - '.github/workflows/ci-backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'packages/proto/**'
      - 'docker/backend*.Dockerfile'
      - '.github/workflows/ci-backend.yml'

env:
  GO_VERSION: '1.23'
  WORKING_DIR: 'apps/backend'

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

      - name: Generate proto files
        run: |
          chmod +x tools/scripts/gen-proto.sh
          make proto

      - name: Format generated proto files
        working-directory: ${{ env.WORKING_DIR }}
        run: go fmt ./pkg/proto/...

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: go mod download

      - name: Remove UTF-8 BOM from Go files
        run: |
          if [ -f "scripts/remove-bom.ps1" ]; then
            pwsh scripts/remove-bom.ps1 apps/backend
          else
            echo "⚠️ BOM removal script not found, skipping"
          fi

      - name: Verify dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: go mod verify

      - name: Run go fmt check
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          fmt_result=$(go fmt ./...)
          if [ -n "$fmt_result" ]; then
            echo "Code is not formatted properly:"
            echo "$fmt_result"
            exit 1
          fi

      - name: Run go vet
        working-directory: ${{ env.WORKING_DIR }}
        run: go vet ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: ${{ env.WORKING_DIR }}
          args: --timeout=5m --config=.golangci.yml

  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    # Test services (PostgreSQL and Redis)
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: exam_bank_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        env:
          REDIS_PASSWORD: test_redis_password
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

      - name: Generate proto files
        run: |
          chmod +x tools/scripts/gen-proto.sh
          make proto

      - name: Format generated proto files
        working-directory: ${{ env.WORKING_DIR }}
        run: go fmt ./pkg/proto/...

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: go mod download

      - name: Setup test database
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: exam_bank_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_URL: redis://localhost:6379
          REDIS_PASSWORD: test_redis_password
        run: |
          # Wait for services to be ready
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for postgres..."
            sleep 2
          done

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: exam_bank_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_URL: redis://localhost:6379
          REDIS_PASSWORD: test_redis_password
          JWT_SECRET: test-jwt-secret-key-for-testing
          ENV: test
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          
      - name: Generate coverage report
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.WORKING_DIR }}/coverage.out
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            ${{ env.WORKING_DIR }}/coverage.out
            ${{ env.WORKING_DIR }}/coverage.html

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: go mod download

      - name: Build backend binary
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Build for multiple architectures
          GOOS=linux GOARCH=amd64 go build -o bin/server-linux-amd64 ./cmd/server
          GOOS=linux GOARCH=arm64 go build -o bin/server-linux-arm64 ./cmd/server
          GOOS=windows GOARCH=amd64 go build -o bin/server-windows-amd64.exe ./cmd/server
          GOOS=darwin GOARCH=amd64 go build -o bin/server-darwin-amd64 ./cmd/server
          GOOS=darwin GOARCH=arm64 go build -o bin/server-darwin-arm64 ./cmd/server

      - name: Verify build
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          ls -la bin/
          file bin/server-linux-amd64

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-binaries
          path: ${{ env.WORKING_DIR }}/bin/
          retention-days: 7

  # Docker build test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-backend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-backend-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/backend.Dockerfile
          target: production
          platforms: linux/amd64
          push: false
          tags: |
            exam-bank-backend:test
            exam-bank-backend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Test Docker image
        run: |
          docker run --rm exam-bank-backend:test --version || echo "Binary test completed"

  # Dependency vulnerability check
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

      - name: Generate proto files
        run: |
          chmod +x tools/scripts/gen-proto.sh
          make proto

      - name: Format generated proto files
        working-directory: ${{ env.WORKING_DIR }}
        run: go fmt ./pkg/proto/...

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: go mod download

      - name: Install Gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run Gosec Security Scanner
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          gosec -no-fail -fmt sarif -out gosec.sarif ./...
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.WORKING_DIR }}/gosec.sarif
        if: always()

      - name: Run govulncheck
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...



